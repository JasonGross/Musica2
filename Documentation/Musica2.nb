(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.0'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     76195,       3326]*)
(*NotebookOutlinePosition[     76909,       3351]*)
(*  CellTagsIndexPosition[     76865,       3347]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["Musica2", "Title",
  FontSize->24],

Cell["Documentation on the Musica2 package.", "Text"],

Cell[CellGroupData[{

Cell["Licence", "Subtitle"],

Cell["\<\
Copyright (C) 2004 Bo C. Herlin

This program is free software;you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation;either version 2
of the License,or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program;if not,write to the Free Software Foundation,
Inc.,59 Temple Place-Suite 330,Boston,MA 02111-1307,USA.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["History", "Subtitle"],

Cell["\<\
2005-01-21 Bo C. Herlin : Mix, Par and Seq for Sound and Snippet
2005-01-21 Bo C. Herlin : more and hopefully better opts-handling
2005-01-19 Bo C. Herlin : changed the struct of Scale
2005-01-16 Bo C. Herlin : added EventList chapter at the end
2005-01-09 Bo C. Herlin : added CustomTuning
2005-01-07 Bo C. Herlin : ...still rewriting and killing bugs...
2004-12-21 Bo C. Herlin : started to rewrite most chapters
2004-12-20 Bo C. Herlin : changed example to Bush-Twig-Leaf
2004-12-13 Bo C. Herlin : added the \"Feedback...\" -chapter
2004-12-13 Bo C. Herlin : added DataToRules
2004-12-11 Bo C. Herlin : added usage in chapter \"Pattern (as in design)\"
2004-11-29 Bo C. Herlin : added Convert and then Overtone
2004-11-28 Bo C. Herlin : added Pianoroll
2004-11-27 Bo C. Herlin : added Naming
2004-10-20 Bo C. Herlin : added Spectrum,Tuning, FigBass, Intervals and \
ThirdStack
2004-09-27 Bo C. Herlin : changed PitchCode in Scale to Content and added \
some scale-examples
2004-09-24 Bo C. Herlin : changed SnippetData to Content
2004-09-22 Bo C. Herlin : changed Show to Play2
2004-09-21 Bo C. Herlin : more (roger that)
2004-09-20 Bo C. Herlin : more
2004-09-18 Bo C. Herlin : renamed Info to Opts
2004-09-15 Bo C. Herlin : major rewrite, started using up-values and a kind \
of template for types
2004-09-14 Bo C. Herlin : added Patterns section
2004-09-13 Bo C. Herlin : added some use of Chord's and Melody's
2004-09-12 Bo C. Herlin : added use of Common.m's Duration/Info-things
2004-09-11 Bo C. Herlin : added use of Note.m's Chord- and Melody-types
2004-09-02 Bo C. Herlin : changed all MidiData*Value* to Data*Value* and \
MidiTie to DataTie, and all *Voice* to *Melody*
2004-08-23 Bo C. Herlin : i dont remeber, i dont recall 
2004-08-19 Bo C. Herlin : moved MidiPlay to a package of its own
2004-08-17 Bo C. Herlin : added Midi(Add|Get|Rem|Set)(Chords|Voices), \
modified MidiToSound and added MidiPlay, added MidiOfSilence and \
MidiPitchShift
2004-08-15 Bo C. Herlin : dropped the voice-nr from shape voice and chord, \
renamed MidiAddEOT to MidiFixEOT and MidiNormalizeNoteOff to MidiFixNoteOff
2004-08-14 Bo C. Herlin : added MidiSeq and MidiPar
2004-08-13 Bo C. Herlin : yet another rest/tie scheme, now with \
MidiDataAnyValue and MidiDataNoValue, MidiRest* is removed
2004-08-13 Bo C. Herlin : added Midi(Add|Get|Rem|Set)(Notes|QPM), enamed \
MidiEqualizeEOT to MidiAddEOT
2004-08-11 Bo C. Herlin : added SoundSetDuration to be used in MidiToSound
2004-08-10 Bo C. Herlin : removed call to MidiAddEOT, added SoundPitchShift
2004-08-09 Bo C. Herlin : minor changes to reflect the code. 
2004-08-08 Bo C. Herlin : added this new state-thing 
2004-08-04 Bo C. Herlin : first release
2004-07-28 Bo C. Herlin : created\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Welcome", "Subtitle"],

Cell["Hi there! Welcome to Musica2.", "Text"],

Cell["\<\
This is a randomly created notebook that sometimes also works as a \
testbench when I extend Musica2. I try to make everything in this notebook to \
work in every release, and even in the CVS at sourceforge.net.
I hope that You will find it useful.\
\>", "Text"],

Cell["Homepage: http://musica.sourceforge.net", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Init", "Subtitle"],

Cell["\<\
A small example below uses a tiny part of the Audio package when \
creating a triangle sound.\
\>", "Text"],

Cell[BoxData[
    \(<< Graphics`Colors`\)], "Input",
  InitializationCell->True],

Cell["Im using some colors.", "Text"],

Cell[BoxData[
    \(<< Miscellaneous`Audio`\)], "Input",
  InitializationCell->True],

Cell["\<\
Load Musica2 which in turn will load each sub-package when \
needed.\
\>", "Text"],

Cell[BoxData[
    \(<< Musica2`\)], "Input",
  InitializationCell->True],

Cell["Set DataFolder to the folder containing the testfiles.", "Text"],

Cell[BoxData[
    \(\(DataFolder = "\<Musica2/Documentation/Data/\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(\(\(cor := DataFolder <> "\<cor.mid\>"\) \)\(;\)\( (*\ 2.9  kb, \ 
      J . S . Bach, \ bwv\ 323, \ choral, \ Holy, \ 
      holy, \ \(\(holy\)\(.\)\)\ *) \)\(\[IndentingNewLine]\)\(\(fug := 
        DataFolder <> "\<fug.mid\>"\) \)\(;\)\( (*\ 6.1  kb, \ 
      J . S . Bach, \ bwv\ 846  b, \ fugue\ 1\ in\ C\ major, \ 
      wtc1\ *) \)\(\[IndentingNewLine]\)\(\(cun := 
        DataFolder <> "\<cun.mid\>"\) \)\(;\)\( (*\ 6.4  kb, \ 
      J . S . Bach, \ bwv\ 1080  a, \ contrapunctus\ 1, \ 
      cunst\ die\ fugue\ *) \)\(\[IndentingNewLine]\)\(\(pre := 
        DataFolder <> "\<pre.mid\>"\) \)\(;\)\( (*\ 8.9  kb, \ 
      J . S . Bach, \ bwv\ 847  a, \ preludium\ 2\ in\ C\ minor, \ 
      wtc1\ *) \)\)\)], "Input",
  InitializationCell->True],

Cell["Set MidiTestFile to the file to apply the tests to.", "Text"],

Cell[BoxData[{
    \(\(MidiTestFile := cor;\)\), "\[IndentingNewLine]", 
    \(\(MidiTestFileList := {cor, fug, cun, pre};\)\)}], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Mini-tour", "Subtitle"],

Cell["Read from a SMF (StandardMidiFile).", "Text"],

Cell[BoxData[
    \(mid = Import[MidiTestFile, Midi]\)], "Input"],

Cell["Plot it on a pianoroll.", "Text"],

Cell[BoxData[
    \(PianoRoll[mid]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Play2[mid]\)], "Input"],

Cell["Write to a WAV-file.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", %]\)], "Input"],

Cell["Write to a SMF-file.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.mid\>", mid]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mini-tour step by step", "Subtitle"],

Cell["Read from a SMF.", "Text"],

Cell[BoxData[
    \(mid = Import[MidiTestFile, Midi]\)], "Input"],

Cell["Set time-unit to second instead of tick.", "Text"],

Cell[BoxData[
    \(mid = Midi[mid, TimeUnit \[Rule] Second]\)], "Input"],

Cell["Get all tracks.", "Text"],

Cell[BoxData[
    \(trk = Track[mid]\)], "Input"],

Cell["Convert each track to counterpoint.", "Text"],

Cell[BoxData[
    \(cpt = Counterpoint /@ trk\)], "Input"],

Cell["Get the melodies in each counterpoint.", "Text"],

Cell[BoxData[
    \(mel = Melody /@ cpt\)], "Input"],

Cell["Flatten it and get the ones that are non-empty.", "Text"],

Cell[BoxData[
    \(mel = Select[Flatten[mel], \((0 < Length[#])\) &]\)], "Input"],

Cell["Convert each melody to a snippet.", "Text"],

Cell[BoxData[
    \(snp = Snippet /@ mel\)], "Input"],

Cell["Or to be even more specific.", "Text"],

Cell[BoxData[
    \(snp = Convert[Melody, Snippet, Instrument] /@ mel\)], "Input"],

Cell["Make a 4ch sound of them.", "Text"],

Cell[BoxData[
    \(Length[snd = Sound[snp]]\)], "Input"],

Cell["Mix it to two channels.", "Text"],

Cell[BoxData[
    \(snd = Mix[snd, 2]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Show[snd]\)], "Input"],

Cell["Write to a WAV-file.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", snd]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Melody-Play2-Export example", "Subtitle"],

Cell["\<\
Create a random diatonic melody. The Note-constructor used take \
{duration,{pitchcode,velocity}} as parameter.\
\>", "Text"],

Cell[BoxData[
    \(mel = 
      Melody[Table[
          Note[\[IndentingNewLine]{\[IndentingNewLine]Random[Integer, {1, 4}]/
                4, \[IndentingNewLine]{\[IndentingNewLine]Random[
                  Integer, {35, 41}], \[IndentingNewLine]Random[
                  Integer, {64, 
                    127}]\[IndentingNewLine]}\[IndentingNewLine]}\
\[IndentingNewLine]], {12}]]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["\<\
The Scale constructor without arguments return a C-major scale.
Scales can be used as a function to convert from scale-step to \
pitch-code.\
\>", "Text"],

Cell["Diatonic to chromatic.", "Text"],

Cell[BoxData[
    \(mel = \(Scale[]\)[mel]\)], "Input"],

Cell[BoxData[
    \(DataToRules[mel] // ColumnForm\)], "Input"],

Cell["Plot it.", "Text"],

Cell[BoxData[
    \(NotePlot[mel, PitchCode]\)], "Input"],

Cell[BoxData[
    \(NotePlot[mel, Velocity]\)], "Input"],

Cell["Get the durations", "Text"],

Cell[BoxData[
    \(NoteDuration[mel]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Play2[mel]\)], "Input"],

Cell["Export it.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", %]\)], "Input"],

Cell["\<\
Convert to midi-track and set midi-channel to 3 (zero-based).\
\>", \
"Text"],

Cell[BoxData[
    \(trk = Track[mel, MidiChannel \[Rule] 3]\)], "Input"],

Cell[BoxData[
    \(DataToRules[trk] // ColumnForm\)], "Input"],

Cell["Convert to midi (assuming we used sec as time-unit).", "Text"],

Cell[BoxData[
    \(mid = Midi[trk, TimeUnit \[Rule] Second]\)], "Input"],

Cell["Plot it", "Text"],

Cell[BoxData[
    \(PianoRoll[mid]\)], "Input"],

Cell["Write to a SMF.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.mid\>", mid]\)], "Input"],

Cell["Augment the durations by a ratio of 3/2", "Text"],

Cell[BoxData[
    \(mel = Map[3  #/2 &, mel, NoteDuration]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Play2[mel]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern (as in design)", "Subtitle"],

Cell[CellGroupData[{

Cell["Intro", "Subsection"],

Cell["\<\
I have tried to minimize the number of new symbols by applying a \
pattern to each object-type in Musica2.\
\>", "Text"],

Cell["\<\
Most types in Musica2 is either a container or an element whithin a \
container (or both). Examples of this in Musica2 is
  Midi that contains Track's that contains Event's
  TempoTrack that contains Tempo's
  Progression that contains Chord's that contains Note's
  Counterpoint that contains Melody's that contains Note's
  Sound that contains Snippet's\
\>", "Text"],

Cell[TextData[{
  "Its not OOP (no inheritance or polymorphism), its rather TOP \
(Type-Oriented-Programming ;-), just like ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " wants it."
}], "Text"],

Cell["\<\
Instead of having a Midi-object with a list of Track-objects I \
wanted the Midi-object to have no other Head's on its internal data than \
List. This since other Head's sometimes mess things up (i must admit, it may \
be because of my bad programming). But having custom Head's on the contaier \
its a handy thing, so I want to have it both ways, at least pretend I have \
it.\
\>", "Text"],

Cell["\<\
This is where the design-pattern comes in. I have written code than \
generates the code needed for this dual-face to appear. The result of a lazy \
programmer I'd say.\
\>", "Text"],

Cell["\<\
The best way to describe the pattern used is probably by giving an \
example. I am using a Tree-Branch-Leaf example, but since Tree is already \
taken I decided to use Bush-Twig-Leaf instead.\
\>", "Text"],

Cell["\<\
Creating types like this is rather easy (if you stick to some rules \
on the pattern for the leaf element which I havent documented yet and \
probably never will, ok, dont use \
BlankSequence,BlankNullSequence,Alternatives and then some...nested List's is \
ok though).\
\>", "Text"],

Cell["Always create the types in leaf to tree order.", "Text"],

Cell[TextData[{
  "We dont like the ",
  Cell[BoxData[
      \(General::"spell1"\)], "Message"],
  " message about LeafQ and ",
  "Leaf",
  ".\n(todo: is there a way of getting the status of On and Off so this can \
be automated?)"
}], "Text"],

Cell[BoxData[
    \(Off[General::spell1]\)], "Input"],

Cell["\<\
Ok, lets create Bush that contains Twig's that contains \
Leaf's\
\>", "Text"],

Cell[BoxData[
    \(CreateElement[
      Leaf, {Alive : \((True | False)\), Worms_Integer}, {True, 
        0}, "\<An object representing a Leaf.\>"]\)], "Input"],

Cell[BoxData[
    \(CreateContainer[Twig, Leaf, "\<Twigs has Leafs\>"]\)], "Input"],

Cell[BoxData[
    \(CreateContainer[Bush, Twig, "\<A Bush has Twigs\>"]\)], "Input"],

Cell[BoxData[
    \(On[General::spell1]\)], "Input"],

Cell["\<\
We now have a load of code generated for us that will make it \
easier to handle these new types. We even have some usage-text \
generated:\
\>", "Text"],

Cell[BoxData[
    \(\(?Leaf\)\)], "Input"],

Cell[BoxData[
    \(\(?Twig\)\)], "Input"],

Cell[BoxData[
    \(\(?Bush\)\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Leaf", "Subsection"],

Cell["Leaf is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Leaf]\)], "Input"],

Cell["Leaf's are contained in a Twig:", "Text"],

Cell[BoxData[
    \(ElementType[Twig]\)], "Input"],

Cell["Leaf has members:", "Text"],

Cell[BoxData[
    \(Members[Leaf]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Leaf]\)], "Input"],

Cell["An example creating a Leaf the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Leaf[{True, 42}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Leaf:", "Text"],

Cell[BoxData[
    \(e = Leaf[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Twig", "Subsection"],

Cell["Twig is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Twig]\)], "Input"],

Cell["Twig's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Twig]\)], "Input"],

Cell["Twig's are contained in a Bush's:", "Text"],

Cell[BoxData[
    \(ElementType[Bush]\)], "Input"],

Cell["An example creating a Twig the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Twig[{Leaf[], Leaf[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Leaf's:", "Text"],

Cell[BoxData[
    \(e = Leaf[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Bush", "Subsection"],

Cell["Bush is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Bush]\)], "Input"],

Cell["Bush's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Bush]\)], "Input"],

Cell["An example creating a Bush the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Bush[{Twig[{Leaf[], Leaf[]}], Twig[{Leaf[], Leaf[]}]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Twig's:", "Text"],

Cell[BoxData[
    \(e = Twig[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["To convert to a list of Leaf's:", "Text"],

Cell[BoxData[
    \(e = Leaf[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(\(DataToRules /@ # &\) /@ e // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Extras", "Subsection"],

Cell["\<\
All this extra code is generated for all elements and containers.\
\
\>", "Text"],

Cell["Code for \"reflection\":", "Text"],

Cell[BoxData[
    \(Members[Leaf]\)], "Input"],

Cell[BoxData[
    \(\(Pos[Leaf, #] &\) /@ %\)], "Input"],

Cell[BoxData[
    \(ContainerQ /@ {Bush, Twig, Leaf}\)], "Input"],

Cell[BoxData[
    \(ElementType /@ {Bush, Twig}\)], "Input"],

Cell[BoxData[
    \(Struct[Leaf]\)], "Input"],

Cell["All constructors take optional parameters.", "Text"],

Cell["\<\
Default-constructors for all types take the data as first \
parameter.\
\>", "Text"],

Cell[BoxData[
    \(ln = {l = Leaf[{True, 0}, name \[Rule] "\<john\>"], 
        Leaf[{False, 1}, age \[Rule] 12]}\)], "Input"],

Cell["\<\
Extra constructors for a container takes one or a list of elements.\
\
\>", "Text"],

Cell[BoxData[
    \(t = Twig[ln]\)], "Input"],

Cell[BoxData[
    \(b = 
      Bush[{t, Twig[ln, no \[Rule] good]}, 
        nice \[Rule] DataNoValue]\)], "Input"],

Cell["\<\
Then there are som constructors for elements that take a container \
as parameter.\
\>", "Text"],

Cell[BoxData[
    \(Twig[b]\)], "Input"],

Cell[BoxData[
    \(Leaf[t]\)], "Input"],

Cell[BoxData[
    \(Leaf[b]\)], "Input"],

Cell["\<\
Each type has two parts, Opts and Data. Data is a \"raw\" format:\
\
\>", "Text"],

Cell[BoxData[
    \(Opts /@ {b, t, l} // ColumnForm\)], "Input"],

Cell["\<\
The elements are simply stored in a list, one item for each \
element.
Each element is a two item list {Opts,Data}, but if an element has no Opts it \
is just Data without the enclosing list.\
\>", "Text"],

Cell[BoxData[
    \(Data /@ {b, t, l} // ColumnForm\)], "Input"],

Cell["DataToRules is another way of getting the data:", "Text"],

Cell[BoxData[
    \(DataToRules /@ {b, t, l} // ColumnForm\)], "Input"],

Cell["\<\
The \"default-constructor\" for all types thus works like \
this:\
\>", "Text"],

Cell[BoxData[
    \(\(\(#[\([0]\)]\)[Data[#], Sequence @@ Opts[#]] &\) /@ {b, t, 
        l}\)], "Input"],

Cell["\<\
But we usually never use this \"raw\" Data, only the Opts. Instead \
we use the members in various ways:\
\>", "Text"],

Cell[BoxData[
    \(Worms /@ {b, t, l} // ColumnForm\)], "Input"],

Cell["Tests:", "Text"],

Cell[BoxData[
    \(\({BushQ[#], TwigQ[#], LeafQ[#]} &\) /@ {b, t, l} // 
      ColumnForm\)], "Input"],

Cell[BoxData[
    \(\({\(DataQ[Bush]\)[Data[#]], \(DataQ[Twig]\)[Data[#]], \(DataQ[Leaf]\)[
              Data[#]]} &\) /@ {b, t, l} // ColumnForm\)], "Input"],

Cell["Map and many other List-functions also works on Containers.", "Text"],

Cell["Append[_Container,_Element]", "Text"],

Cell[BoxData[
    \(Append[b, t]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["Delete[_Container,n__]", "Text"],

Cell[BoxData[
    \(Delete[b, \(-1\)]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["Drop[_Container,n_]", "Text"],

Cell[BoxData[
    \(Drop[b, 1]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["\<\
Extract[_Container,n_Integer] calls \
Part[_Container,n_Integer]\
\>", "Text"],

Cell[BoxData[
    \(Extract[b, 1]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["First[_Container]", "Text"],

Cell[BoxData[
    \(First[b]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["Insert[_Container,_Element,n_Integer]", "Text"],

Cell[BoxData[
    \(Insert[b, t, 2]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["Last[_Container]", "Text"],

Cell[BoxData[
    \(Last[b]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["Length[_Container]", "Text"],

Cell[BoxData[
    \(Length[b]\)], "Input"],

Cell["Map[f_,_Container]", "Text"],

Cell[BoxData[
    \(Opts /@ b\)], "Input"],

Cell["\<\
If the result from Map is a list of elements or an empty list a \
container is returned\
\>", "Text"],

Cell[BoxData[
    \(\(# &\) /@ b\)], "Input"],

Cell["The same goes for MapIndexed[f_,_Container]", "Text"],

Cell[BoxData[
    \(MapIndexed[# &, b]\)], "Input"],

Cell["Most[_Container]", "Text"],

Cell[BoxData[
    \(Most[b]\)], "Input"],

Cell["Part[_Container,n_Integer]", "Text"],

Cell[BoxData[
    \(b[\([1]\)]\)], "Input"],

Cell["Part[_Container,n_Integer,m__Integer]", "Text"],

Cell[BoxData[
    \(b[\([1, 2]\)]\)], "Input"],

Cell["Prepend[_Container,_Element]", "Text"],

Cell[BoxData[
    \(Prepend[b, t]\)], "Input"],

Cell["ReplacePart[_Container,_Element,n_Integer]", "Text"],

Cell[BoxData[
    \(ReplacePart[b, Twig[{}], 1]\)], "Input"],

Cell["Rest[_Container]", "Text"],

Cell[BoxData[
    \(Rest[b]\)], "Input"],

Cell["Scan[f_,_Container]", "Text"],

Cell[BoxData[
    \(Scan[Print, b]\)], "Input"],

Cell["Select[_Container,f_]", "Text"],

Cell[BoxData[
    \(Select[b, \((Opts[#] =!= {})\) &]\)], "Input"],

Cell["Take[_Container,n_]", "Text"],

Cell[BoxData[
    \(Take[b, 1]\)], "Input"],

Cell["Some, like Map, are extended.", "Text"],

Cell["\<\
Map[f_,_Container,s_Symbol] and MapIndexed[f_, _Container, \
s_Symbol] maps through all elements (leafs) and applys f to the leaf's member \
and the reconstructs the container again.\
\>", "Text"],

Cell[BoxData[
    \(Worms /@ b\)], "Input"],

Cell[BoxData[
    \(Map[2 + # &, b, Worms]\)], "Input"],

Cell[BoxData[
    \(Worms /@ %\)], "Input"],

Cell["\<\
Part[_Container,s_Symbol] and Part[_Container, n_Integer, \
m___Integer, s_Symbol] works like expected\
\>", "Text"],

Cell[BoxData[
    \(b[\([Worms]\)]\)], "Input"],

Cell[BoxData[
    \(b[\([1, Worms]\)]\)], "Input"],

Cell[BoxData[
    \(b[\([1, 2, Worms]\)]\)], "Input"],

Cell["\<\
Until I write more documentation the best way to find out about all \
List-functions for Containers is to look inside Type.m\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Sound", "Subtitle"],

Cell[CellGroupData[{

Cell["Snippet", "Subsection"],

Cell["Snippets represents a one-channel sound.", "Text"],

Cell["Snippet is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Snippet]\)], "Input"],

Cell["Snippet's are contained in a Sound:", "Text"],

Cell[BoxData[
    \(ElementType[Sound]\)], "Input"],

Cell["Snippet has members:", "Text"],

Cell[BoxData[
    \(Members[Snippet]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Snippet]\)], "Input"],

Cell["An example creating a Snippet the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = 
      Snippet[{SampledSoundFunction, Sin[2\ Pi\ 220\ #1] &, 22050, 
          22050}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Snippet:", "Text"],

Cell[BoxData[
    \(e = Snippet[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["Duration[_Snippet] calculates the duration in seconds", "Text"],

Cell[BoxData[
    \(Duration[e] // N\)], "Input"],

Cell["Play2[snp_Snippet] is horthand for Play2[Sound[{snp}]]", "Text"],

Cell[BoxData[
    \(Play2[e]\)], "Input"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", %]\)], "Input"],

Cell["Mix, Par and Seq:", "Text"],

Cell[BoxData[
    \(Mix[{e, e}]\)], "Input"],

Cell[BoxData[
    \(Par[{e, e}]\)], "Input"],

Cell[BoxData[
    \(Seq[{e, e}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Sound", "Subsection"],

Cell["\<\
Since Sound is a type that I don't own, the underlying logic for it \
is not straightforward, but I have made Sound behave like the rest of the \
Containers in Musica2.\
\>", "Text"],

Cell["Sound is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Sound]\)], "Input"],

Cell["Sound's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Sound]\)], "Input"],

Cell["An example creating a Sound the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Sound[{Snippet[], Snippet[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Snippet's:", "Text"],

Cell[BoxData[
    \(e = Snippet[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["All Snippets in a Sound object must have the same SoundType.", "Text"],

Cell["\<\
Tidy[_Sound] makes sure even a monophonic Sound has a List \
internally.\
\>", "Text"],

Cell[BoxData[
    \(\(ReplacePart[c = Waveform[Triangle, 440, 0.2], List, {0}]\)[\([1, 
        1]\)]\)], "Input"],

Cell[BoxData[
    \(\(ReplacePart[Tidy[c], List, {0}]\)[\([1, 1]\)]\)], "Input"],

Cell["Duration[_Sound] calculates the duration in seconds", "Text"],

Cell[BoxData[
    \(Duration[c] // N\)], "Input"],

Cell["\<\
Play2[_Sound] calls Show after first mixing it to two \
channels.\
\>", "Text"],

Cell[BoxData[
    \(Length[c]\)], "Input"],

Cell[BoxData[
    \(Length[Play2[c]]\)], "Input"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", c]\)], "Input"],

Cell["Mix, Par and Seq:", "Text"],

Cell[BoxData[
    \(Mix[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Note", "Subtitle"],

Cell["Note.m depends on Sound.m", "Text"],

Cell[CellGroupData[{

Cell["Note", "Subsection"],

Cell["A Note is a simple note or rest.", "Text"],

Cell["Note is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Note]\)], "Input"],

Cell["Note's are contained in a Melody:", "Text"],

Cell[BoxData[
    \(ElementType[Melody]\)], "Input"],

Cell["Note's are contained in a Chord:", "Text"],

Cell[BoxData[
    \(ElementType[Chord]\)], "Input"],

Cell["Note has members:", "Text"],

Cell[BoxData[
    \(Members[Note]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Note]\)], "Input"],

Cell["An example creating a Note the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Note[{1/4, {72, 64}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Note:", "Text"],

Cell[BoxData[
    \(e = Note[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["\<\
If PitchCode or Velocity contains the symbol DataNoValue it is \
concidered to be a rest.\
\>", "Text"],

Cell["Duration for a Note returns the NoteDuration value.", "Text"],

Cell[BoxData[
    \(Duration[e]\)], "Input"],

Cell["Note[pc_?AtomQ] creates a Note using Options[Note]", "Text"],

Cell[BoxData[
    \(Options[Note]\)], "Input"],

Cell[BoxData[
    \(DataToRules[Note[pc]] // ColumnForm\)], "Input"],

Cell["\<\
Play2[n_Note] is shorthand for Play2[Sound[{Snippet[Melody[{n}]]}]]\
\
\>", "Text"],

Cell[BoxData[
    \(Play2[e]\)], "Input"],

Cell["Play2 assumes second is the unit for duration.", "Text"],

Cell["Par and Seq:", "Text"],

Cell[BoxData[
    \(Par[{e, e}]\)], "Input"],

Cell[BoxData[
    \(Seq[{e, e}]\)], "Input"],

Cell["\<\
NoteRestQ returns true if PitchCode or Velocity is NadaNoValue or \
if Velocity is 0 (zero)\
\>", "Text"],

Cell[BoxData[
    \(NoteRestQ[e]\)], "Input"],

Cell["\<\
NoteTieQ returns true if PitchCode or Velocity is/has \
DataTieQ\
\>", "Text"],

Cell[BoxData[
    \(NoteTieQ[e]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Melody", "Subsection"],

Cell["\<\
Melody is a Note container. The notes are played in sequence.\
\>", \
"Text"],

Cell["Melody is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Melody]\)], "Input"],

Cell["Melody's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Melody]\)], "Input"],

Cell["Melody's are contained in a Counterpoint's:", "Text"],

Cell[BoxData[
    \(ElementType[Counterpoint]\)], "Input"],

Cell["An example creating a Melody the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Melody[{Note[], Note[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Note's:", "Text"],

Cell[BoxData[
    \(e = Note[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["An example with a rest:", "Text"],

Cell[BoxData[
    \(c = 
      Melody[{Note[{ .2, {60, 64}}], Note[{ .2, {DataNoValue, DataNoValue}}], 
          Note[{ .2, {64, 64}}], Note[{ .6, {65, 64}}]}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["Duration gives the total duration", "Text"],

Cell[BoxData[
    \(Duration[c]\)], "Input"],

Cell["NoteDuration gives the individual durations", "Text"],

Cell[BoxData[
    \(NoteDuration[c]\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second, QPM \[Rule] 100]\)], "Input"],

Cell["Converting to Chord gives a list of one-note chords", "Text"],

Cell[BoxData[
    \(Chord[c]\)], "Input"],

Cell[BoxData[
    \(Length /@ %\)], "Input"],

Cell["You can pass just PitchCodes to Melody", "Text"],

Cell[BoxData[
    \(c = Melody[{60, DataNoValue, 64, 65}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second, QPM \[Rule] 60]\)], "Input"],

Cell["Play2[m_Melody] is shorthand for Play2[Sound[{Snippet[m]}]]", "Text"],

Cell[BoxData[
    \(Play2[c]\)], "Input"],

Cell["Play2 assumes second is the unit for duration.", "Text"],

Cell["You can get functions for PitchCode and Velocity", "Text"],

Cell[BoxData[
    \(c = \(Melody[Import[cor, Midi]]\)[\([1]\)]\)], "Input"],

Cell[BoxData[
    \(\(fp = Convert[Time, PitchCode, c];\)\)], "Input"],

Cell[BoxData[
    \(\(fv = Convert[Time, Velocity, c];\)\)], "Input"],

Cell[BoxData[
    \(Plot[{fp[x], fv[x]}, {x, 0, Duration[c]}]\)], "Input"],

Cell["Par and Seq:", "Text"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"],

Cell["Tidy[_Melody] sets any leading ties to rest and merges rests", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Chord", "Subsection"],

Cell["Chord is a Note container. The notes are played in paralell.", "Text"],

Cell["Chord is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Chord]\)], "Input"],

Cell["Chord's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Chord]\)], "Input"],

Cell["Chord's are contained in a Progression's:", "Text"],

Cell[BoxData[
    \(ElementType[Progression]\)], "Input"],

Cell["An example creating a Chord the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Chord[{Note[], Note[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Note's:", "Text"],

Cell[BoxData[
    \(e = Note[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["Another example:", "Text"],

Cell[BoxData[
    \(c = 
      Chord[{Note[{ .2, {60, 64}}], Note[{ .4, {64, 64}}], 
          Note[{ .6, {67, 64}}], Note[{ .8, {70, 64}}]}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["\<\
The NoteDuration of the first Note is used as the duration for the \
Chord\
\>", "Text"],

Cell["Duration gives the total duration", "Text"],

Cell[BoxData[
    \(Duration[c]\)], "Input"],

Cell["NoteDuration gives the individual durations", "Text"],

Cell[BoxData[
    \(NoteDuration[c]\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second]\)], "Input"],

Cell["Converting to Melody gives a list of one-note melodies", "Text"],

Cell[BoxData[
    \(Melody[c]\)], "Input"],

Cell[BoxData[
    \(Length /@ %\)], "Input"],

Cell["You can pass just PitchCodes to Chord", "Text"],

Cell[BoxData[
    \(c = Chord[{60, 64, 67, 70}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second]\)], "Input"],

Cell["\<\
Play2[c_Chord] is shorthand for \
Play2[Sound[Snippet/@Melody[c]]]\
\>", "Text"],

Cell[BoxData[
    \(Play2[c]\)], "Input"],

Cell["Play2 assumes second is the unit for duration.", "Text"],

Cell["Par and Seq:", "Text"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Progression", "Subsection"],

Cell["\<\
Progression is a Chord container. The chords are played in \
sequence.\
\>", "Text"],

Cell["Progression is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Progression]\)], "Input"],

Cell["Progression's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Progression]\)], "Input"],

Cell["\<\
An example creating a Progression the basic way is therefore:\
\>", \
"Text"],

Cell[BoxData[
    \(c = 
      Progression[{Chord[{Note[], Note[]}], 
          Chord[{Note[], Note[]}]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Chord's:", "Text"],

Cell[BoxData[
    \(e = Chord[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["To convert to a list of Note's:", "Text"],

Cell[BoxData[
    \(e = Note[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(\(DataToRules /@ # &\) /@ e // ColumnForm\)], "Input"],

Cell["Another example:", "Text"],

Cell[BoxData[
    \(c = 
      Progression[{Chord[{60, 64, 67}], Chord[{60, 65, 69}], 
          Chord[{62, 67, 71}], Chord[{64, 67, 72}]}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["Duration gives the total duration", "Text"],

Cell[BoxData[
    \(Duration[c]\)], "Input"],

Cell["NoteDuration gives the individual durations", "Text"],

Cell[BoxData[
    \(NoteDuration[c]\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second]\)], "Input"],

Cell["You can convert back to Chords", "Text"],

Cell[BoxData[
    \(Chord[c]\)], "Input"],

Cell["Or to melodies, one for each voice", "Text"],

Cell[BoxData[
    \(Melody[c]\)], "Input"],

Cell["Or to Notes", "Text"],

Cell[BoxData[
    \(Note[c]\)], "Input"],

Cell["\<\
Play2[p_Progression] is shorthand for \
Play2[Sound[Snippet/@Melody[p]]]\
\>", "Text"],

Cell[BoxData[
    \(Play2[c]\)], "Input"],

Cell["Play2 assumes second is the unit for duration.", "Text"],

Cell["Par and Seq:", "Text"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Counterpoint", "Subsection"],

Cell["\<\
Counterpoint is a Melody container. The melodies are played in \
paralell.\
\>", "Text"],

Cell["Counterpoint is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Counterpoint]\)], "Input"],

Cell["Counterpoint's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Counterpoint]\)], "Input"],

Cell["\<\
An example creating a Counterpoint the basic way is \
therefore:\
\>", "Text"],

Cell[BoxData[
    \(c = 
      Counterpoint[{Melody[{Note[], Note[]}], 
          Melody[{Note[], Note[]}]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Melody's:", "Text"],

Cell[BoxData[
    \(e = Melody[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["To convert to a list of Note's:", "Text"],

Cell[BoxData[
    \(e = Note[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(\(DataToRules /@ # &\) /@ e // ColumnForm\)], "Input"],

Cell["Another example:", "Text"],

Cell[BoxData[
    \(c = 
      Counterpoint[{\[IndentingNewLine]Melody[{Note[{2, {60, 64}}], Note[62], 
              Note[64]}], \[IndentingNewLine]Melody[{Note[64], Note[65], 
              Note[{2, {67, 64}}]}], \[IndentingNewLine]Melody[{67, 69, 71, 
              72}]\[IndentingNewLine]}]\)], "Input"],

Cell["Note that the last melody har 4 notes", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["Duration gives the total duration", "Text"],

Cell[BoxData[
    \(Duration[c]\)], "Input"],

Cell["NoteDuration gives the individual durations", "Text"],

Cell[BoxData[
    \(NoteDuration[c]\)], "Input"],

Cell[BoxData[
    \(PianoRoll[c, TimeUnit \[Rule] Second]\)], "Input"],

Cell["You can convert back to Melodies", "Text"],

Cell[BoxData[
    \(Melody[c]\)], "Input"],

Cell["Or to chords", "Text"],

Cell[BoxData[
    \(Chord[c]\)], "Input"],

Cell["Observe the ties in the chords", "Text"],

Cell[BoxData[
    \(DataToRules /@ % // ColumnForm\)], "Input"],

Cell["Or to Notes", "Text"],

Cell[BoxData[
    \(Note[c]\)], "Input"],

Cell["Or to Progression", "Text"],

Cell[BoxData[
    \(Progression[c]\)], "Input"],

Cell["Observe the ties in the chords", "Text"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["\<\
Play2[c_Counterpoint] is shorthand for \
Play2[Sound[Snippet/@Melody[c]]]\
\>", "Text"],

Cell[BoxData[
    \(Play2[c]\)], "Input"],

Cell["Play2 assumes second is the unit for duration.", "Text"],

Cell["Par and Seq:", "Text"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"],

Cell["Tidy[_Counterpoint] calls Tidy on all Melody's it contains", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["FigBass", "Subsection"],

Cell["\<\
FigBass is almost like a figured-bass-chord, but without duration \
and velocity.\
\>", "Text"],

Cell["FigBass is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[FigBass]\)], "Input"],

Cell["FigBass has members:", "Text"],

Cell[BoxData[
    \(Members[FigBass]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[FigBass]\)], "Input"],

Cell["An example creating a FigBass the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = FigBass[{12, {{2}, 242}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default FigBass:", "Text"],

Cell[BoxData[
    \(e = FigBass[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["Another example:", "Text"],

Cell[BoxData[
    \(e = FigBass[{12, {{40}, 145}}]\)], "Input"],

Cell["You can get the PitchCodes", "Text"],

Cell[BoxData[
    \(PitchCode[e]\)], "Input"],

Cell[BoxData[
    \(PianoRoll[Chord[PitchCode[e]], TimeUnit \[Rule] Second]\)], "Input"],

Cell["You can also supply a list of pitchcodes as argument:", "Text"],

Cell[BoxData[
    \(DataToRules[FigBass[{0, 3, 5, 9}, Octave \[Rule] 12]]\)], "Input"],

Cell["\<\
Octave can also be \[Infinity] to allow inversions and octave \
distictions\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[e = FigBass[{60, 65, 69}, Octave \[Rule] \[Infinity]]] // 
      ColumnForm\)], "Input"],

Cell[BoxData[
    \(PitchCode[e]\)], "Input"],

Cell[BoxData[
    \(DataToRules[e = FigBass[{60, 65, 69}, Octave \[Rule] 12]] // 
      ColumnForm\)], "Input"],

Cell[BoxData[
    \(PitchCode[e]\)], "Input"],

Cell["Using the counterpoint above", "Text"],

Cell[BoxData[
    \(c = 
      Counterpoint[{\[IndentingNewLine]Melody[{Note[{2, {60, 64}}], Note[62], 
              Note[64]}], \[IndentingNewLine]Melody[{Note[64], Note[65], 
              Note[{2, {67, 64}}]}], \[IndentingNewLine]Melody[{67, 69, 71, 
              72}]\[IndentingNewLine]}]\)], "Input"],

Cell["\<\
Octave is \[Infinity] so the inversions are shown in the code\
\>", \
"Text"],

Cell[BoxData[
    \(Code /@ \((FigBass /@ DataUnTie[PitchCode /@ Chord[c]])\)\)], "Input"],

Cell["Octave is 12 so inversions are gone", "Text"],

Cell[BoxData[
    \(Code /@ \((\(FigBass[#, Octave \[Rule] 12] &\) /@ 
          DataUnTie[PitchCode /@ Chord[c]])\)\)], "Input"],

Cell["\<\
The reason for Bass to be a list is when we make a FigBass out of \
{0,3,6,9}, a dim chord, which have many roots\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[FigBass[{0, 3, 6, 9}, Octave \[Rule] 12]]\)], "Input"],

Cell["or an augmented chord", "Text"],

Cell[BoxData[
    \(DataToRules[FigBass[{0, 4, 8}, Octave \[Rule] 12]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Intervals", "Subsection"],

Cell["Intervals is an interval-vector.", "Text"],

Cell["\<\
The member-name \"Content\" is a bad name, it will probably change \
in the future.\
\>", "Text"],

Cell["Intervals is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Intervals]\)], "Input"],

Cell["Intervals has members:", "Text"],

Cell[BoxData[
    \(Members[Intervals]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Intervals]\)], "Input"],

Cell["An example creating a Intervals the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Intervals[{12, {0, 0, 1, 2, 1, 0, 0}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Intervals:", "Text"],

Cell[BoxData[
    \(e = Intervals[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["Another example:", "Text"],

Cell[BoxData[
    \(DataToRules[Intervals[Chord[{0, 4, 7}]]]\)], "Input"],

Cell["\<\
The answer means that we have 1 minor third, one major third and \
one fifth.\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[Intervals[Chord[{0, 4, 7}], Octave \[Rule] 12]]\)], "Input"],

Cell["Now the fifth is a forth.", "Text"],

Cell["You can also supply a list of pitchcodes as argument:", "Text"],

Cell[BoxData[
    \(DataToRules[Intervals[{0, 3, 5, 9}, Octave \[Rule] 12]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Scale", "Subsection"],

Cell["\<\
Scale in Musica2 is not the same thing as SScale in \
Miscellaneous`Music`, I dont think they will collide.\
\>", "Text"],

Cell["Scale is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Scale]\)], "Input"],

Cell["Scale has members:", "Text"],

Cell[BoxData[
    \(Members[Scale]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Scale]\)], "Input"],

Cell["An example creating a Scale the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Scale[{60, {2, 2, 3, 2, 3}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Scale:", "Text"],

Cell[BoxData[
    \(e = Scale[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There are more ways to construct a Scale.", "Text"],

Cell["\<\
The first parameter is the number of sharps/flats as a \
positive/negative number. The second is the mode which is a number 0 to 6 \
representing the scale-step the scale starts on compared to major, or one of \
{ModeAeolian, ModeDorian, ModeIonian, ModeLocrian, ModeLydian, ModeMajor, \
ModeMinor, ModeMixolydian, ModePhrygian}. The pitch-codes are always \
positive. The number of sharps/flats are mod 12.\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[3, ModeMajor]]\)], "Input"],

Cell[BoxData[
    \(DataToRules[Scale[\(-6\), ModeMixolydian]]\)], "Input"],

Cell[BoxData[
    \(DataToRules[Scale[6, ModeMixolydian]]\)], "Input"],

Cell["\<\
The Mode* constants are integers for the scale-step they start on \
compared to major.\
\>", "Text"],

Cell[BoxData[
    \({{ModeIonian, ModeMajor}, ModeDorian, ModePhrygian, ModeLydian, 
      ModeMixolydian, {ModeAeolian, ModeMinor}, ModeLocrian}\)], "Input"],

Cell["\<\
Unfortunately this dont match the EventTypeKeySignature in Midi \
(which by the way only handles minor and major), so it might CHANGE.\
\>", \
"Text"],

Cell["\<\
Scale[], with no parameter, is C-major scale, same as \
Scale[0,ModeMajor]\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[]]\)], "Input"],

Cell["\<\
Giving only one parameter to Scale[n] (number of sharps/flats) will \
return a scale that differ in only one scale-step from Scale[n-1] and \
Scale[n+1] and may therefore result in a scale with negative pitch-codes. The \
number of sharps/flats are NOT mod 12 here.\
\>", "Text"],

Cell["Compare...", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[3]]\)], "Input"],

Cell["...with...", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[4]]\)], "Input"],

Cell["...and...", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[\(-6\)]]\)], "Input"],

Cell["...with...", "Text"],

Cell[BoxData[
    \(DataToRules[Scale[\(-5\)]]\)], "Input"],

Cell["\<\
The proper way to get a function that convert ScaleStep to \
PitchCode or vice versa is to use the Convert function\
\>", "Text"],

Cell[BoxData[
    \(\(sff = 
        Convert[ScaleStep, PitchCode, Scale[0, ModePhrygian]];\)\)], "Input"],

Cell[BoxData[
    \(sff /@ Range[35, 35 + 7]\)], "Input"],

Cell[BoxData[
    \(\(sfr = 
        Convert[PitchCode, ScaleStep, Scale[0, ModePhrygian]];\)\)], "Input"],

Cell[BoxData[
    \(sfr /@ %%\)], "Input"],

Cell["You can create a Scale from PitchCode's:", "Text"],

Cell[BoxData[
    \(DataToRules[e = Scale[{20, 23, 25, 29, 31}]]\)], "Input"],

Cell["You can get the PitchCode's from a Scale:", "Text"],

Cell[BoxData[
    \(PitchCode[e]\)], "Input"],

Cell[BoxData[
    \(PitchCode[Scale[]]\)], "Input"],

Cell["You can get the Octave and the scale-size from a Scale:", "Text"],

Cell[BoxData[
    \({Octave[e], Length[e]}\)], "Input"],

Cell[BoxData[
    \({Octave[Scale[]], Length[Scale[]]}\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["ThirdStack", "Subsection"],

Cell["\<\
ThirdStack is another way besides FigBass of coding chords. No \
duration or velocity.\
\>", "Text"],

Cell["ThirdStack is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[ThirdStack]\)], "Input"],

Cell["ThirdStack has members:", "Text"],

Cell[BoxData[
    \(Members[ThirdStack]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[ThirdStack]\)], "Input"],

Cell["An example creating a ThirdStack the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = ThirdStack[{{3, 4}, {2, 7}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default ThirdStack:", "Text"],

Cell[BoxData[
    \(e = ThirdStack[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["You can get the PitchCodes", "Text"],

Cell[BoxData[
    \(PitchCode[e]\)], "Input"],

Cell["You can use another base than {3,4} which is default.", "Text"],

Cell["ThirdStack[i] is the same as ThirdStack[{{3,4},{0,i}}].", "Text"],

Cell[BoxData[
    \(\((p = \(PitchCode[ThirdStack[#]] &\) /@ Range[10])\) // 
      ColumnForm\)], "Input"],

Cell[BoxData[
    \(PianoRoll[Progression[Chord /@ p]]\)], "Input"],

Cell[BoxData[
    \(\(Content[Intervals[#, Octave \[Rule] 12]] &\) /@ p // 
      ColumnForm\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Midi", "Subtitle"],

Cell["Midi.m depends on Note.m", "Text"],

Cell["\<\
Tidy[_Track] sorts the events and makes sure that there is exactly \
one EOT in the track.
Tidy[_Midi] calls Tidy for each track and sets them to the same length.
Tidy[_TempoTrack] sorts the tempos for the tempo-track.\
\>", "Text"],

Cell["\<\
Conversion- and extra- constructors:
  Event[_Tempo] does the hard work
  Midi[_Midi, opts___] is used to change time-unit and uses TempoTrack and \
TempoFunction and then some
  Tempo[_Event] does the hard work
  TempoTrack[_Track] uses Tempo[_Event] and TempoTrack[{__Tempo}]
  Track[_TempoTrack] uses Event[_Tempo] and Track[{__Event}]\
\>", "Text"],

Cell["\<\
Duration functions:
  Duration[_Midi] uses EventTime[_Event] and Max
  Duration[_Track] uses Duration[_Track] and Max\
\>", "Text"],

Cell["\<\
Play2 functions:
  Play2[_Midi]
  Play2[_Track]\
\>", "Text"],

Cell[CellGroupData[{

Cell["Event", "Subsection"],

Cell["Event is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Event]\)], "Input"],

Cell["Event's are contained in a Track:", "Text"],

Cell[BoxData[
    \(ElementType[Track]\)], "Input"],

Cell["Event has members:", "Text"],

Cell[BoxData[
    \(Members[Event]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Event]\)], "Input"],

Cell["An example creating a Event the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Event[{100, {1, {0, 60, 64}}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Event:", "Text"],

Cell[BoxData[
    \(e = Event[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Track", "Subsection"],

Cell["Track is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Track]\)], "Input"],

Cell["Track's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Track]\)], "Input"],

Cell["Track's are contained in a Midi's:", "Text"],

Cell[BoxData[
    \(ElementType[Midi]\)], "Input"],

Cell["An example creating a Track the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Track[{Event[], Event[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Event's:", "Text"],

Cell[BoxData[
    \(e = Event[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["Mix, Par and Seq:", "Text"],

Cell[BoxData[
    \(Mix[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Midi", "Subsection"],

Cell["Midi is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Midi]\)], "Input"],

Cell["Midi's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Midi]\)], "Input"],

Cell["An example creating a Midi the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = 
      Midi[{Track[{Event[], Event[]}], Track[{Event[], Event[]}]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Track's:", "Text"],

Cell[BoxData[
    \(e = Track[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["To convert to a list of Event's:", "Text"],

Cell[BoxData[
    \(e = Event[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(\(DataToRules /@ # &\) /@ e // ColumnForm\)], "Input"],

Cell["Mix, Par and Seq:", "Text"],

Cell[BoxData[
    \(Mix[{c, c}]\)], "Input"],

Cell["\<\
Par will only use Track 1 (mastertrack) from the first Midi object.\
\
\>", "Text"],

Cell[BoxData[
    \(Par[{c, c}]\)], "Input"],

Cell[BoxData[
    \(Seq[{c, c}]\)], "Input"],

Cell["You can change the time-unit in a Midi object...", "Text"],

Cell[BoxData[
    \(c = Import[cor, Midi]\)], "Input"],

Cell[BoxData[
    \(Opts[c]\)], "Input"],

Cell[BoxData[
    \(EventTime[c[\([1]\)]]\)], "Input"],

Cell["...to Second...", "Text"],

Cell[BoxData[
    \(c = Midi[c, TimeUnit \[Rule] Second]\)], "Input"],

Cell[BoxData[
    \(Opts[c]\)], "Input"],

Cell[BoxData[
    \(EventTime[c[\([1]\)]]\)], "Input"],

Cell["...to MilliSecond...", "Text"],

Cell[BoxData[
    \(c = Midi[c, TimeUnit \[Rule] MilliSecond]\)], "Input"],

Cell[BoxData[
    \(Opts[c]\)], "Input"],

Cell[BoxData[
    \(EventTime[c[\([1]\)]]\)], "Input"],

Cell["...to Tick", "Text"],

Cell[BoxData[
    \(c = Midi[c, TimeUnit \[Rule] Tick]\)], "Input"],

Cell[BoxData[
    \(Opts[c]\)], "Input"],

Cell[BoxData[
    \(EventTime[c[\([1]\)]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Tempo", "Subsection"],

Cell["Tempo is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Tempo]\)], "Input"],

Cell["Tempo's are contained in a Twig:", "Text"],

Cell[BoxData[
    \(ElementType[TempoTrack]\)], "Input"],

Cell["Tempo has members:", "Text"],

Cell[BoxData[
    \(Members[Tempo]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Tempo]\)], "Input"],

Cell["An example creating a Tempo the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Tempo[{0, 80}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Tempo:", "Text"],

Cell[BoxData[
    \(e = Tempo[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["TempoTrack", "Subsection"],

Cell["TempoTrack is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[TempoTrack]\)], "Input"],

Cell["TempoTrack's contains:", "Text"],

Cell[BoxData[
    \(ElementType[TempoTrack]\)], "Input"],

Cell["An example creating a TempoTrack the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = TempoTrack[{Tempo[], Tempo[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Tempo's:", "Text"],

Cell[BoxData[
    \(e = Tempo[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["Call Convert to get conversion functions:", "Text"],

Cell[BoxData[
    \(\(Convert[Tick, Second, c]\)[200]\)], "Input"],

Cell[BoxData[
    \(\(Convert[Second, Tick, c]\)[10/48]\)], "Input"],

Cell["\<\
You can supply a Midi object with tempo events in track \
one...\
\>", "Text"],

Cell[BoxData[
    \(m = Import[cor, Midi]\)], "Input"],

Cell[BoxData[
    \(Duration[m]\)], "Input"],

Cell[BoxData[
    \(\(Convert[Tick, Second, m]\)[Duration[m]] // N\)], "Input"],

Cell[BoxData[
    \(\(Convert[Second, Tick, m]\)[42.5006]\)], "Input"],

Cell["...or a QPM (quarters per minute)", "Text"],

Cell[BoxData[
    \(\(Convert[Tick, Second, 120]\)[1000] // N\)], "Input"],

Cell[BoxData[
    \(\(Convert[Second, Tick, 120]\)[45]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tuning", "Subtitle"],

Cell["Tuning defaults to EqualTemperament.", "Text"],

Cell[BoxData[
    \(Tuning\)], "Input"],

Cell[CellGroupData[{

Cell["EqualTemperament", "Subsection"],

Cell["EqualTemperament is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[EqualTemperament]\)], "Input"],

Cell["EqualTemperament has members:", "Text"],

Cell[BoxData[
    \(Members[EqualTemperament]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[EqualTemperament]\)], "Input"],

Cell["\<\
An example creating a EqualTemperament the basic way is \
therefore:\
\>", "Text"],

Cell[BoxData[
    \(e = EqualTemperament[{{30, 300}, {17, 2}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default EqualTemperament:", "Text"],

Cell[BoxData[
    \(e = EqualTemperament[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["You can easily create another kind of eq-tuning, :", "Text"],

Cell[BoxData[
    \(e = EqualTemperament[{{69, 440}, {19, 3}}]\)], "Input"],

Cell["\<\
The function Convert takes a tuning object and returns a function \
for tuning.\
\>", "Text"],

Cell[BoxData[
    \(\(f = Convert[PitchCode, Frequency, e];\)\)], "Input"],

Cell[BoxData[
    \(f[69]\)], "Input"],

Cell[BoxData[
    \(\(g = Convert[Frequency, PitchCode, e];\)\)], "Input"],

Cell[BoxData[
    \(g[%%]\)], "Input"],

Cell["You can also use the tuning-object as a function directly:", "Text"],

Cell[BoxData[
    \(e /@ Range[60, 72] // N\)], "Input"],

Cell["\<\
Getting the FrequencyRatios is not very exiting on \
EqualTemperament:\
\>", "Text"],

Cell[BoxData[
    \(FrequencyRatios[e]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["CustomTuning", "Subsection"],

Cell["This object is for other tunings like meantone and others.", "Text"],

Cell["\<\
A know, the name is awful, but i couldn't come up with a better \
one.\
\>", "Text"],

Cell["CustomTuning is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[CustomTuning]\)], "Input"],

Cell["CustomTuning has members:", "Text"],

Cell[BoxData[
    \(Members[CustomTuning]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[CustomTuning]\)], "Input"],

Cell["\<\
An example creating a CustomTuning the basic way is \
therefore:\
\>", "Text"],

Cell[BoxData[
    \(e = CustomTuning[{{60, 400}, {9/8, 9/8, 9/8, 9/8, 9/8}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default CustomTuning:", "Text"],

Cell[BoxData[
    \(e = CustomTuning[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["You can get the FrequencyOctave:", "Text"],

Cell[BoxData[
    \(FrequencyOctave[e]\)], "Input"],

Cell["You can get the PitchCodeOctave:", "Text"],

Cell[BoxData[
    \(PitchCodeOctave[e]\)], "Input"],

Cell["Get the conversion-functions:", "Text"],

Cell[BoxData[
    \(\(f = Convert[PitchCode, Frequency, e];\)\)], "Input"],

Cell[BoxData[
    \(\(g = Convert[Frequency, PitchCode, e];\)\)], "Input"],

Cell[BoxData[
    \(f /@ Range[60, 72]\)], "Input"],

Cell[BoxData[
    \(g /@ %\)], "Input"],

Cell["You can use decimals:", "Text"],

Cell[BoxData[
    \(f /@ {33.45, 44.12, 66.7765, 88.6543}\)], "Input"],

Cell[BoxData[
    \(g /@ %\)], "Input"],

Cell["\<\
Another example, using the data from default \
EqualTemperament:\
\>", "Text"],

Cell[BoxData[
    \(e = 
      CustomTuning[{{PitchCodeRef[Tuning], FrequencyRef[Tuning]}, 
          FrequencyRatios[Tuning]}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["Get the conversion-functions:", "Text"],

Cell[BoxData[
    \(\(f = Convert[PitchCode, Frequency, e];\)\)], "Input"],

Cell[BoxData[
    \(\(g = Convert[Frequency, PitchCode, e];\)\)], "Input"],

Cell[BoxData[
    \(f /@ Range[60, 72]\)], "Input"],

Cell[BoxData[
    \(g /@ %\)], "Input"],

Cell["\<\
Compare the EqualTemperament with the CustomTuning for the same \
data. While being the same for integers, they differ on decimals.\
\>", "Text"],

Cell[BoxData[
    \(\(e = Convert[PitchCode, Frequency, EqualTemperament[]];\)\)], "Input"],

Cell[BoxData[
    \(And @@ \((\(e[#] \[Equal] f[#] &\) /@ Range[60, 72])\)\)], "Input"],

Cell[BoxData[
    \(Plot[f[p]/e[p], {p, 60, 72}]\)], "Input"],

Cell["\<\
If you have a list of cents,as in the scales in \
Miscellaneous`Music`,this is what you do:\
\>", "Text"],

Cell[BoxData[
    \(<< Miscellaneous`Music`\)], "Input"],

Cell[BoxData[
    \(e = 
      CustomTuning[{{69, 440}, 
          ValuesToRatios[\(2^\((#/1200)\) &\) /@ JustMajor]}]\)], "Input"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["Note that the PitchCodeOctave is only 7", "Text"],

Cell[BoxData[
    \(PitchCodeOctave[e]\)], "Input"],

Cell["\<\
There are more scales in Miscellaneous`Music` to choose from:\
\>", \
"Text"],

Cell[BoxData[
    \({QuarterTone, PythagoreanMajor, PythagoreanChromatic, MeanMajor, 
        MeanMinor, MeanChromatic, SixthTone, JustMajor, JustMinor, 
        TemperedMajor, TemperedMinor, TemperedChromatic} // 
      ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Overtone", "Subsection"],

Cell["\<\
The PitchCode for the n:th overtone (one-based and currently for \
plucked strings only):\
\>", "Text"],

Cell[BoxData[
    \(\(\(Convert[{PitchCode, Overtone}, PitchCode, Tuning]\)[60, #] &\) /@ 
      Range[6]\)], "Input"],

Cell[BoxData[
    \(% // N\)], "Input"],

Cell[BoxData[
    \(\(\(Convert[{PitchCode, Overtone}, PitchCode, CustomTuning[]]\)[
          60, #] &\) /@ Range[6]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Instrument", "Subtitle"],

Cell["Instrument defaults to BasicInstrument.", "Text"],

Cell["BasicInstrument is a bad name, it will probably change.", "Text"],

Cell[BoxData[
    \(Instrument\)], "Input"],

Cell[CellGroupData[{

Cell["BasicInstrument", "Subsection"],

Cell["BasicInstrument is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[BasicInstrument]\)], "Input"],

Cell["BasicInstrument has members:", "Text"],

Cell[BoxData[
    \(Members[BasicInstrument]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[BasicInstrument]\)], "Input"],

Cell["\<\
An example creating a BasicInstrument the basic way is therefore:\
\
\>", "Text"],

Cell[BoxData[
    \(e = 
      BasicInstrument[{Function[p, Log[2, p]], Function[v, v/127], 
          Function[{f, a, sr}, a\ Sin[f\ #/sr] &]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default BasicInstrument:", "Text"],

Cell[BoxData[
    \(e = BasicInstrument[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["\<\
P2F is a function converting PitchCode to Frequency. Default \
is:\
\>", "Text"],

Cell[BoxData[
    \(Convert[PitchCode, Frequency, Tuning]\)], "Input"],

Cell["\<\
V2A is a function converting Velocity to Amplitude. Default is \
currently VERY simple:\
\>", "Text"],

Cell[BoxData[
    \(Function[v, v/127]\)], "Input"],

Cell["\<\
T2S is a function converting Frequency, Amplitude and SampleRate to \
a function taking a sampleindex and returning a sample. Default is:\
\>", \
"Text"],

Cell[BoxData[
    \(Function[{f, a, sr}, N[a\ Sin[2  Pi\ f\ #/sr]] &]\)], "Input"],

Cell["\<\
The way to use an Instrument is to get its \
Conversion-function:\
\>", "Text"],

Cell[BoxData[
    \(\(f = Convert[Melody, Snippet, e];\)\)], "Input"],

Cell["And then to convert a Melody into a Snippet:", "Text"],

Cell[BoxData[
    \(f[Melody[{60, 62, 64, 65}]]\)], "Input"],

Cell["And then perhaps listen to it:", "Text"],

Cell[BoxData[
    \(Play2[%]\)], "Input"],

Cell[BoxData[
    \(Export["\<tmp.wav\>", %]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Spectrum", "Subtitle"],

Cell[CellGroupData[{

Cell["Tone", "Subsection"],

Cell["Tone is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[Tone]\)], "Input"],

Cell["Tone's are contained in a Spectrum:", "Text"],

Cell[BoxData[
    \(ElementType[Spectrum]\)], "Input"],

Cell["Tone has members:", "Text"],

Cell[BoxData[
    \(Members[Tone]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[Tone]\)], "Input"],

Cell["An example creating a Tone the basic way is therefore:", "Text"],

Cell[BoxData[
    \(e = Tone[{220, {0.3, 3/2  Pi}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default Tone:", "Text"],

Cell[BoxData[
    \(e = Tone[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["\<\
Tidy[_Tone] set Frequency and Amplitude positive and Phase Mod 2Pi.\
\
\>", "Text"],

Cell[BoxData[
    \(DataToRules[Tidy[Tone[{\(-100\), {\(-1\), 4  Pi}}]]] // 
      ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Spectrum", "Subsection"],

Cell["\<\
Spectrum in Musica2 is not the same thing as Spectrum in \
DiscreteMath`Combinatorica`, I dont think they will collide.\
\>", "Text"],

Cell["Spectrum is a contiainer:", "Text"],

Cell[BoxData[
    \(ContainerQ[Spectrum]\)], "Input"],

Cell["Spectrum's contains:", "Text"],

Cell[BoxData[
    \(ElementType[Spectrum]\)], "Input"],

Cell["An example creating a Spectrum the basic way is therefore:", "Text"],

Cell[BoxData[
    \(c = Spectrum[{Tone[], Tone[]}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[c] // ColumnForm\)], "Input"],

Cell["To convert to a list of Tone's:", "Text"],

Cell[BoxData[
    \(e = Tone[c]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules /@ e // ColumnForm\)], "Input"],

Cell["\<\
Tidy[_Spectrum] calls Tidy for all Tones, removes Tones where \
Amplitude is zero, merge tones with the same Frequency and sorts the Tone on \
Frequency.\
\>", "Text"],

Cell["\<\
Conversion from Snippet to Spectrum use Fourier, while Spectrum to \
Snippet currently use a bank of sines.\
\>", "Text"],

Cell[BoxData[
    \(c = Spectrum[Snippet[Note[60]]]\)], "Input"],

Cell[BoxData[
    \(Max[Amplitude[c]]\)], "Input"],

Cell[BoxData[
    \(c = Select[c, %*0.9 < Amplitude[#] &]\)], "Input"],

Cell[BoxData[
    \(DataToRules[c]\)], "Input"],

Cell[BoxData[
    \(Tuning[60] // N\)], "Input"],

Cell[BoxData[
    \(Show[Sound[Snippet[c]]]\)], "Input"],

Cell["You can add Tones to get a spectrum:", "Text"],

Cell[BoxData[
    \(Tone[100] + Tone[200]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["You can add Spectrums to get a new spectrum:", "Text"],

Cell[BoxData[
    \(%% + %%\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(Tidy[%%]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["You can multiply spectrums:", "Text"],

Cell[BoxData[
    \(%%*%%\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(Tidy[%%]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell["You can square them:", "Text"],

Cell[BoxData[
    \(%%^2\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(Tidy[%%]\)], "Input"],

Cell[BoxData[
    \(DataToRules[%] // ColumnForm\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Naming", "Subtitle"],

Cell["\<\
Functions for naming notes and chords.
They can easily be changed or extended (i'll document that another day...).
The way to call them might change in the future, im not quite happy with them \
yet. Ideas anyone?\
\>", "Text"],

Cell["\<\
There is currently only one type of note-naming, HelixNoteNaming, \
to which NoteNaming defaults to.\
\>", "Text"],

Cell[BoxData[
    \(NoteNaming\)], "Input"],

Cell["\<\
There is currently only one type of \
chord-naming,HelixChordNaming,to which ChordNaming defaults to.\
\>", "Text"],

Cell[BoxData[
    \(ChordNaming\)], "Input"],

Cell["\<\
Both b and \[Flat] are accepted as flats, and both # and \[Sharp] \
as sharps.\
\>", "Text"],

Cell[CellGroupData[{

Cell["HelixNoteNaming", "Subsection"],

Cell["HelixNoteNaming is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[HelixNoteNaming]\)], "Input"],

Cell["HelixNoteNaming has members:", "Text"],

Cell[BoxData[
    \(Members[HelixNoteNaming]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[HelixNoteNaming]\)], "Input"],

Cell["\<\
An example creating a HelixNoteNaming the basic way is therefore:\
\
\>", "Text"],

Cell[BoxData[
    \(e = 
      HelixNoteNaming[{7, {"\<p\>", "\<q\>", "\<r\>", "\<s\>"}, {3, 5, 1}, 
          0}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default HelixNoteNaming:", "Text"],

Cell[BoxData[
    \(e = HelixNoteNaming[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["\<\
The name of the note 60 to 71 in G major (The second parameter is \
the number of sharps/flats, one #)\
\>", "Text"],

Cell[BoxData[
    \(\(NoteNaming[#, 1] &\) /@ Range[60, 71]\)], "Input"],

Cell["The name of the note 60 to 71 in Bb major (two b's)", "Text"],

Cell[BoxData[
    \(\(NoteNaming[#, \(-2\)] &\) /@ Range[60, 71]\)], "Input"],

Cell["\<\
Calling NoteNaming directly is costly. Better to get the function \
first and then call it.\
\>", "Text"],

Cell[BoxData[
    \(\(f = Convert[PitchCode, String, NoteNaming];\)\)], "Input"],

Cell["The second parameter is the number of sharps/flats", "Text"],

Cell[BoxData[
    \(\(f[#, 5] &\) /@ Range[60, 71]\)], "Input"],

Cell["The reverse function", "Text"],

Cell[BoxData[
    \(\(g = Convert[String, PitchCode, NoteNaming];\)\)], "Input"],

Cell[BoxData[
    \(g /@ \((\(f[#, 5] &\) /@ Range[60, 71])\)\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["HelixChordNaming", "Subsection"],

Cell["HelixChordNaming is an element:", "Text"],

Cell[BoxData[
    \(ContainerQ[HelixChordNaming]\)], "Input"],

Cell["HelixChordNaming has members:", "Text"],

Cell[BoxData[
    \(Members[HelixChordNaming]\)], "Input"],

Cell["The members are structured as:", "Text"],

Cell[BoxData[
    \(Struct[HelixChordNaming]\)], "Input"],

Cell["\<\
An example creating a HelixChordNaming the basic way is \
therefore:\
\>", "Text"],

Cell[BoxData[
    \(e = 
      HelixChordNaming[{HelixNoteNaming[{7, {"\<p\>", "\<q\>", "\<r\>", \
"\<s\>"}, {3, 5, 1}, 
              0}], {{{"\<x\>"}, {0, 2, 4}}, {{"\<y\>"}, {0, 3, 
                4}}}}]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["There is a default HelixChordNaming:", "Text"],

Cell[BoxData[
    \(e = HelixChordNaming[]\)], "Input"],

Cell["View the data as rules:", "Text"],

Cell[BoxData[
    \(DataToRules[e] // ColumnForm\)], "Input"],

Cell["\<\
The types of chords currently handled by the default chord-naming \
are:\
\>", "Text"],

Cell[BoxData[
    \(\(#[\([1, 1]\)] &\) /@ ChordNames[ChordNaming]\)], "Input"],

Cell["\<\
You can call ChordNaming directly, as with NoteNaming. The second \
parameter is the number of sharps/flats.\
\>", "Text"],

Cell[BoxData[
    \(ChordNaming[{0, 4, 7} + 3, 1]\)], "Input"],

Cell["...but getting the function first is better.", "Text"],

Cell[BoxData[
    \(\(f = Convert[{PitchCode}, String, ChordNaming];\)\)], "Input"],

Cell["The current scheme takes inversions into account.", "Text"],

Cell[BoxData[
    \(f[{3, 7, 12}, 0]\)], "Input"],

Cell[BoxData[
    \(f[{0, 4, 7, 9}, 0]\)], "Input"],

Cell["Sometimes the result contain several alternatives.", "Text"],

Cell[BoxData[
    \(f[{0, 5, 7}, 0]\)], "Input"],

Cell[BoxData[
    \(f[{0, 3, 6, 9} + 3, 0]\)], "Input"],

Cell[BoxData[
    \(f[{0, 4, 8} + 5, 0]\)], "Input"],

Cell["\<\
If there is no chord with the given set of pc's, the scheme is to \
take the notes mod 12 and search for alien notes wich will be treated as \
bass.\
\>", "Text"],

Cell[BoxData[
    \(f[{0, 1, 3, 7}, 0]\)], "Input"],

Cell[BoxData[
    \(f[{0, 3, 6, 7}, 0]\)], "Input"],

Cell["The reverse function.", "Text"],

Cell[BoxData[
    \(\(g = Convert[String, {PitchCode}, ChordNaming];\)\)], "Input"],

Cell[BoxData[
    \(g["\<GbMaj7\>"]\)], "Input"],

Cell["An oddly notated chord:", "Text"],

Cell[BoxData[
    \(g["\<B##m/Fbb\>"]\)], "Input"],

Cell[BoxData[
    \(f[%, 11]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["PianoRoll", "Subtitle"],

Cell["\<\
PianoRoll IS going to change!!
Its just an initial port from musica (the old one).\
\>", "Text"],

Cell["The options WILL change.", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Comments", "Subtitle"],

Cell["\<\
Unfortunately I have not found a way to get the Convert-functions \
automatically loaded.
This means that You will have to load the actual package manually if not \
already loaded.\
\>", "Text"],

Cell["\<\
The non-trivial conversion-constructors are:
  Counterpoint[_Track] and Track[_Melody]
  Counterpoint[_Progression] and  Progression[_Counterpoint]
  Snippet[_Melody]
  Snippet[_Spectrum] and Spectrum[_Snippet]  
The rest of the conversion-constructors are quite simple and depend on the \
non-trivial ones.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["EventList", "Subtitle"],

Cell["\<\
Attention! If you evaluate this chapter the other chapters in this \
notebook will not work anymore as there are many symbol-conflicts between old \
Musica and the current Musica2.\
\>", "Text",
  FontWeight->"Bold"],

Cell["\<\
As you might have guessed, there are no EventList's in \
Musica2.\
\>", "Text"],

Cell["\<\
There is a function however that convert EventList's from old \
Musica to Midi objects in Musica2, but you have to load it manually. This \
will result in a lot of symbol-collisions...\
\>", "Text"],

Cell[BoxData[
    \(<< Musica2`EventList`\)], "Input"],

Cell["\<\
...so from now on we often have to state wich of two colliding \
symbols we refer to, be specific.\
\>", "Text"],

Cell["You also have to get the old Musica:", "Text"],

Cell[BoxData[
    \(<< Musica`\)], "Input"],

Cell["As an example, Import the choral using the old Musica:", "Text"],

Cell[BoxData[
    \(\(e = ImportMIDI[cor];\)\)], "Input"],

Cell["Take a look at the Head:", "Text"],

Cell[BoxData[
    \(e[\([0]\)] // ColumnForm\)], "Input"],

Cell["Then convert it:", "Text"],

Cell[BoxData[
    \(m = Midi[e]\)], "Input"],

Cell["Take a look at the opts:", "Text"],

Cell[BoxData[
    \(Opts[m]\)], "Input"],

Cell["The symbol PianoRoll collide, so we have to be specific:", "Text"],

Cell[BoxData[
    \(Musica2`PianoRoll`PianoRoll[m]\)], "Input"],

Cell["\<\
You can convert a specific track if you wish, but first you have to \
manually convert the data like this:\
\>", "Text"],

Cell[BoxData[
    \(\(x = 
        ConvertEventList[e, 
          EventList[MIDI, Musica`EventLists`MIDI`Messages`Tick, {}, 
            Null]];\)\)], "Input"],

Cell["Take a look at the Head:", "Text"],

Cell[BoxData[
    \(x[\([0]\)] // ColumnForm\)], "Input"],

Cell["Then convert a track:", "Text"],

Cell[BoxData[
    \(Musica2`Midi`Track[x[\([1]\)]]\)], "Input"],

Cell["Or convert just an event:", "Text"],

Cell[BoxData[
    \(Musica2`Midi`Event[x[\([1, 1]\)]]\)], "Input"],

Cell["\<\
Lots of symbol-collisions when both versions of Musica are loaded.
The rest of the examples in this document might not work anymore.\
\>", "Text"],

Cell["\<\
Currently only meta-events and notes are handled.
Look in EventList.m in Musica2 if you want to examine the functions.\
\>", \
"Text"]
}, Closed]]
}, Open  ]]
},
FrontEndVersion->"5.0 for X",
ScreenRectangle->{{0, 1600}, {0, 1200}},
AutoGeneratedPackage->Automatic,
WindowSize->{792, 1141},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification->1,
StyleDefinitions -> "Default.nb"
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 40, 1, 79, "Title"],
Cell[1819, 56, 53, 0, 32, "Text"],

Cell[CellGroupData[{
Cell[1897, 60, 27, 0, 51, "Subtitle"],
Cell[1927, 62, 720, 16, 284, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[2684, 83, 27, 0, 53, "Subtitle"],
Cell[2714, 85, 2758, 50, 770, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[5509, 140, 27, 0, 53, "Subtitle"],
Cell[5539, 142, 45, 0, 32, "Text"],
Cell[5587, 144, 272, 5, 68, "Text"],
Cell[5862, 151, 55, 0, 32, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[5954, 156, 24, 0, 53, "Subtitle"],
Cell[5981, 158, 117, 3, 32, "Text"],
Cell[6101, 163, 80, 2, 27, "Input",
  InitializationCell->True],
Cell[6184, 167, 37, 0, 32, "Text"],
Cell[6224, 169, 84, 2, 27, "Input",
  InitializationCell->True],
Cell[6311, 173, 92, 3, 32, "Text"],
Cell[6406, 178, 72, 2, 27, "Input",
  InitializationCell->True],
Cell[6481, 182, 70, 0, 32, "Text"],
Cell[6554, 184, 112, 2, 27, "Input",
  InitializationCell->True],
Cell[6669, 188, 775, 13, 107, "Input",
  InitializationCell->True],
Cell[7447, 203, 67, 0, 32, "Text"],
Cell[7517, 205, 166, 3, 43, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[7720, 213, 29, 0, 53, "Subtitle"],
Cell[7752, 215, 51, 0, 32, "Text"],
Cell[7806, 217, 65, 1, 27, "Input"],
Cell[7874, 220, 39, 0, 32, "Text"],
Cell[7916, 222, 47, 1, 27, "Input"],
Cell[7966, 225, 24, 0, 32, "Text"],
Cell[7993, 227, 43, 1, 27, "Input"],
Cell[8039, 230, 36, 0, 32, "Text"],
Cell[8078, 232, 57, 1, 27, "Input"],
Cell[8138, 235, 36, 0, 32, "Text"],
Cell[8177, 237, 59, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[8273, 243, 42, 0, 53, "Subtitle"],
Cell[8318, 245, 32, 0, 32, "Text"],
Cell[8353, 247, 65, 1, 27, "Input"],
Cell[8421, 250, 56, 0, 32, "Text"],
Cell[8480, 252, 73, 1, 27, "Input"],
Cell[8556, 255, 31, 0, 32, "Text"],
Cell[8590, 257, 49, 1, 27, "Input"],
Cell[8642, 260, 51, 0, 32, "Text"],
Cell[8696, 262, 58, 1, 27, "Input"],
Cell[8757, 265, 54, 0, 32, "Text"],
Cell[8814, 267, 52, 1, 27, "Input"],
Cell[8869, 270, 63, 0, 32, "Text"],
Cell[8935, 272, 82, 1, 27, "Input"],
Cell[9020, 275, 49, 0, 32, "Text"],
Cell[9072, 277, 53, 1, 27, "Input"],
Cell[9128, 280, 44, 0, 32, "Text"],
Cell[9175, 282, 82, 1, 27, "Input"],
Cell[9260, 285, 41, 0, 32, "Text"],
Cell[9304, 287, 57, 1, 27, "Input"],
Cell[9364, 290, 39, 0, 32, "Text"],
Cell[9406, 292, 50, 1, 27, "Input"],
Cell[9459, 295, 24, 0, 32, "Text"],
Cell[9486, 297, 42, 1, 27, "Input"],
Cell[9531, 300, 36, 0, 32, "Text"],
Cell[9570, 302, 59, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[9666, 308, 47, 0, 53, "Subtitle"],
Cell[9716, 310, 135, 3, 32, "Text"],
Cell[9854, 315, 398, 8, 155, "Input"],
Cell[10255, 325, 61, 1, 27, "Input"],
Cell[10319, 328, 164, 4, 50, "Text"],
Cell[10486, 334, 38, 0, 32, "Text"],
Cell[10527, 336, 55, 1, 27, "Input"],
Cell[10585, 339, 63, 1, 27, "Input"],
Cell[10651, 342, 24, 0, 32, "Text"],
Cell[10678, 344, 57, 1, 27, "Input"],
Cell[10738, 347, 56, 1, 27, "Input"],
Cell[10797, 350, 33, 0, 32, "Text"],
Cell[10833, 352, 50, 1, 27, "Input"],
Cell[10886, 355, 24, 0, 32, "Text"],
Cell[10913, 357, 43, 1, 27, "Input"],
Cell[10959, 360, 26, 0, 32, "Text"],
Cell[10988, 362, 57, 1, 27, "Input"],
Cell[11048, 365, 87, 3, 32, "Text"],
Cell[11138, 370, 72, 1, 27, "Input"],
Cell[11213, 373, 63, 1, 27, "Input"],
Cell[11279, 376, 68, 0, 32, "Text"],
Cell[11350, 378, 73, 1, 27, "Input"],
Cell[11426, 381, 23, 0, 32, "Text"],
Cell[11452, 383, 47, 1, 27, "Input"],
Cell[11502, 386, 31, 0, 32, "Text"],
Cell[11536, 388, 59, 1, 27, "Input"],
Cell[11598, 391, 55, 0, 32, "Text"],
Cell[11656, 393, 71, 1, 27, "Input"],
Cell[11730, 396, 24, 0, 32, "Text"],
Cell[11757, 398, 43, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[11837, 404, 42, 0, 53, "Subtitle"],

Cell[CellGroupData[{
Cell[11904, 408, 27, 0, 38, "Subsection"],
Cell[11934, 410, 130, 3, 32, "Text"],
Cell[12067, 415, 379, 8, 122, "Text"],
Cell[12449, 425, 205, 6, 32, "Text"],
Cell[12657, 433, 401, 7, 68, "Text"],
Cell[13061, 442, 192, 4, 50, "Text"],
Cell[13256, 448, 215, 4, 50, "Text"],
Cell[13474, 454, 293, 6, 50, "Text"],
Cell[13770, 462, 62, 0, 32, "Text"],
Cell[13835, 464, 243, 8, 50, "Text"],
Cell[14081, 474, 53, 1, 27, "Input"],
Cell[14137, 477, 88, 3, 32, "Text"],
Cell[14228, 482, 162, 3, 43, "Input"],
Cell[14393, 487, 83, 1, 27, "Input"],
Cell[14479, 490, 84, 1, 27, "Input"],
Cell[14566, 493, 52, 1, 27, "Input"],
Cell[14621, 496, 163, 4, 50, "Text"],
Cell[14787, 502, 42, 1, 27, "Input"],
Cell[14832, 505, 42, 1, 27, "Input"],
Cell[14877, 508, 42, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[14956, 514, 26, 0, 30, "Subsection"],
Cell[14985, 516, 35, 0, 32, "Text"],
Cell[15023, 518, 49, 1, 27, "Input"],
Cell[15075, 521, 47, 0, 32, "Text"],
Cell[15125, 523, 50, 1, 27, "Input"],
Cell[15178, 526, 33, 0, 32, "Text"],
Cell[15214, 528, 46, 1, 27, "Input"],
Cell[15263, 531, 46, 0, 32, "Text"],
Cell[15312, 533, 45, 1, 27, "Input"],
Cell[15360, 536, 70, 0, 32, "Text"],
Cell[15433, 538, 53, 1, 27, "Input"],
Cell[15489, 541, 39, 0, 32, "Text"],
Cell[15531, 543, 61, 1, 27, "Input"],
Cell[15595, 546, 40, 0, 32, "Text"],
Cell[15638, 548, 43, 1, 27, "Input"],
Cell[15684, 551, 39, 0, 32, "Text"],
Cell[15726, 553, 61, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[15824, 559, 26, 0, 30, "Subsection"],
Cell[15853, 561, 37, 0, 32, "Text"],
Cell[15893, 563, 49, 1, 27, "Input"],
Cell[15945, 566, 32, 0, 32, "Text"],
Cell[15980, 568, 50, 1, 27, "Input"],
Cell[16033, 571, 49, 0, 32, "Text"],
Cell[16085, 573, 50, 1, 27, "Input"],
Cell[16138, 576, 70, 0, 32, "Text"],
Cell[16211, 578, 59, 1, 27, "Input"],
Cell[16273, 581, 39, 0, 32, "Text"],
Cell[16315, 583, 61, 1, 27, "Input"],
Cell[16379, 586, 47, 0, 32, "Text"],
Cell[16429, 588, 44, 1, 27, "Input"],
Cell[16476, 591, 39, 0, 32, "Text"],
Cell[16518, 593, 63, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[16618, 599, 26, 0, 30, "Subsection"],
Cell[16647, 601, 37, 0, 32, "Text"],
Cell[16687, 603, 49, 1, 27, "Input"],
Cell[16739, 606, 32, 0, 32, "Text"],
Cell[16774, 608, 50, 1, 27, "Input"],
Cell[16827, 611, 70, 0, 32, "Text"],
Cell[16900, 613, 91, 1, 27, "Input"],
Cell[16994, 616, 39, 0, 32, "Text"],
Cell[17036, 618, 61, 1, 27, "Input"],
Cell[17100, 621, 47, 0, 32, "Text"],
Cell[17150, 623, 44, 1, 27, "Input"],
Cell[17197, 626, 39, 0, 32, "Text"],
Cell[17239, 628, 63, 1, 27, "Input"],
Cell[17305, 631, 47, 0, 32, "Text"],
Cell[17355, 633, 44, 1, 27, "Input"],
Cell[17402, 636, 39, 0, 32, "Text"],
Cell[17444, 638, 74, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[17555, 644, 28, 0, 30, "Subsection"],
Cell[17586, 646, 91, 3, 32, "Text"],
Cell[17680, 651, 40, 0, 32, "Text"],
Cell[17723, 653, 46, 1, 27, "Input"],
Cell[17772, 656, 56, 1, 27, "Input"],
Cell[17831, 659, 65, 1, 27, "Input"],
Cell[17899, 662, 60, 1, 27, "Input"],
Cell[17962, 665, 45, 1, 27, "Input"],
Cell[18010, 668, 58, 0, 32, "Text"],
Cell[18071, 670, 94, 3, 32, "Text"],
Cell[18168, 675, 127, 2, 27, "Input"],
Cell[18298, 679, 93, 3, 32, "Text"],
Cell[18394, 684, 45, 1, 27, "Input"],
Cell[18442, 687, 115, 3, 27, "Input"],
Cell[18560, 692, 106, 3, 32, "Text"],
Cell[18669, 697, 40, 1, 27, "Input"],
Cell[18712, 700, 40, 1, 27, "Input"],
Cell[18755, 703, 40, 1, 27, "Input"],
Cell[18798, 706, 91, 3, 32, "Text"],
Cell[18892, 711, 64, 1, 27, "Input"],
Cell[18959, 714, 215, 5, 50, "Text"],
Cell[19177, 721, 64, 1, 27, "Input"],
Cell[19244, 724, 63, 0, 32, "Text"],
Cell[19310, 726, 71, 1, 27, "Input"],
Cell[19384, 729, 89, 3, 32, "Text"],
Cell[19476, 734, 105, 2, 27, "Input"],
Cell[19584, 738, 128, 3, 32, "Text"],
Cell[19715, 743, 65, 1, 27, "Input"],
Cell[19783, 746, 22, 0, 32, "Text"],
Cell[19808, 748, 103, 2, 27, "Input"],
Cell[19914, 752, 159, 2, 43, "Input"],
Cell[20076, 756, 75, 0, 32, "Text"],
Cell[20154, 758, 43, 0, 32, "Text"],
Cell[20200, 760, 45, 1, 27, "Input"],
Cell[20248, 763, 61, 1, 27, "Input"],
Cell[20312, 766, 38, 0, 32, "Text"],
Cell[20353, 768, 50, 1, 27, "Input"],
Cell[20406, 771, 61, 1, 27, "Input"],
Cell[20470, 774, 35, 0, 32, "Text"],
Cell[20508, 776, 43, 1, 27, "Input"],
Cell[20554, 779, 61, 1, 27, "Input"],
Cell[20618, 782, 88, 3, 32, "Text"],
Cell[20709, 787, 46, 1, 27, "Input"],
Cell[20758, 790, 61, 1, 27, "Input"],
Cell[20822, 793, 33, 0, 32, "Text"],
Cell[20858, 795, 41, 1, 27, "Input"],
Cell[20902, 798, 61, 1, 27, "Input"],
Cell[20966, 801, 53, 0, 32, "Text"],
Cell[21022, 803, 48, 1, 27, "Input"],
Cell[21073, 806, 61, 1, 27, "Input"],
Cell[21137, 809, 32, 0, 32, "Text"],
Cell[21172, 811, 40, 1, 27, "Input"],
Cell[21215, 814, 61, 1, 27, "Input"],
Cell[21279, 817, 34, 0, 32, "Text"],
Cell[21316, 819, 42, 1, 27, "Input"],
Cell[21361, 822, 34, 0, 32, "Text"],
Cell[21398, 824, 42, 1, 27, "Input"],
Cell[21443, 827, 111, 3, 32, "Text"],
Cell[21557, 832, 45, 1, 27, "Input"],
Cell[21605, 835, 59, 0, 32, "Text"],
Cell[21667, 837, 51, 1, 27, "Input"],
Cell[21721, 840, 32, 0, 32, "Text"],
Cell[21756, 842, 40, 1, 27, "Input"],
Cell[21799, 845, 42, 0, 32, "Text"],
Cell[21844, 847, 43, 1, 27, "Input"],
Cell[21890, 850, 53, 0, 32, "Text"],
Cell[21946, 852, 46, 1, 27, "Input"],
Cell[21995, 855, 44, 0, 32, "Text"],
Cell[22042, 857, 46, 1, 27, "Input"],
Cell[22091, 860, 58, 0, 32, "Text"],
Cell[22152, 862, 60, 1, 27, "Input"],
Cell[22215, 865, 32, 0, 32, "Text"],
Cell[22250, 867, 40, 1, 27, "Input"],
Cell[22293, 870, 35, 0, 32, "Text"],
Cell[22331, 872, 47, 1, 27, "Input"],
Cell[22381, 875, 37, 0, 32, "Text"],
Cell[22421, 877, 66, 1, 27, "Input"],
Cell[22490, 880, 35, 0, 32, "Text"],
Cell[22528, 882, 43, 1, 27, "Input"],
Cell[22574, 885, 45, 0, 32, "Text"],
Cell[22622, 887, 206, 4, 50, "Text"],
Cell[22831, 893, 43, 1, 27, "Input"],
Cell[22877, 896, 55, 1, 27, "Input"],
Cell[22935, 899, 43, 1, 27, "Input"],
Cell[22981, 902, 126, 3, 32, "Text"],
Cell[23110, 907, 47, 1, 27, "Input"],
Cell[23160, 910, 50, 1, 27, "Input"],
Cell[23213, 913, 53, 1, 27, "Input"],
Cell[23269, 916, 148, 3, 32, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[23466, 925, 25, 0, 53, "Subtitle"],

Cell[CellGroupData[{
Cell[23516, 929, 29, 0, 38, "Subsection"],
Cell[23548, 931, 56, 0, 32, "Text"],
Cell[23607, 933, 38, 0, 32, "Text"],
Cell[23648, 935, 52, 1, 27, "Input"],
Cell[23703, 938, 51, 0, 32, "Text"],
Cell[23757, 940, 51, 1, 27, "Input"],
Cell[23811, 943, 36, 0, 32, "Text"],
Cell[23850, 945, 49, 1, 27, "Input"],
Cell[23902, 948, 46, 0, 32, "Text"],
Cell[23951, 950, 48, 1, 27, "Input"],
Cell[24002, 953, 73, 0, 32, "Text"],
Cell[24078, 955, 123, 3, 27, "Input"],
Cell[24204, 960, 39, 0, 32, "Text"],
Cell[24246, 962, 61, 1, 27, "Input"],
Cell[24310, 965, 43, 0, 32, "Text"],
Cell[24356, 967, 46, 1, 27, "Input"],
Cell[24405, 970, 39, 0, 32, "Text"],
Cell[24447, 972, 61, 1, 27, "Input"],
Cell[24511, 975, 69, 0, 32, "Text"],
Cell[24583, 977, 49, 1, 27, "Input"],
Cell[24635, 980, 70, 0, 32, "Text"],
Cell[24708, 982, 41, 1, 27, "Input"],
Cell[24752, 985, 57, 1, 27, "Input"],
Cell[24812, 988, 33, 0, 32, "Text"],
Cell[24848, 990, 44, 1, 27, "Input"],
Cell[24895, 993, 44, 1, 27, "Input"],
Cell[24942, 996, 44, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[25023, 1002, 27, 0, 30, "Subsection"],
Cell[25053, 1004, 192, 4, 50, "Text"],
Cell[25248, 1010, 38, 0, 32, "Text"],
Cell[25289, 1012, 50, 1, 27, "Input"],
Cell[25342, 1015, 33, 0, 32, "Text"],
Cell[25378, 1017, 51, 1, 27, "Input"],
Cell[25432, 1020, 71, 0, 32, "Text"],
Cell[25506, 1022, 66, 1, 27, "Input"],
Cell[25575, 1025, 39, 0, 32, "Text"],
Cell[25617, 1027, 61, 1, 27, "Input"],
Cell[25681, 1030, 50, 0, 32, "Text"],
Cell[25734, 1032, 47, 1, 27, "Input"],
Cell[25784, 1035, 39, 0, 32, "Text"],
Cell[25826, 1037, 63, 1, 27, "Input"],
Cell[25892, 1040, 76, 0, 32, "Text"],
Cell[25971, 1042, 96, 3, 32, "Text"],
Cell[26070, 1047, 114, 2, 27, "Input"],
Cell[26187, 1051, 80, 1, 27, "Input"],
Cell[26270, 1054, 67, 0, 32, "Text"],
Cell[26340, 1056, 49, 1, 27, "Input"],
Cell[26392, 1059, 89, 3, 32, "Text"],
Cell[26484, 1064, 42, 1, 27, "Input"],
Cell[26529, 1067, 49, 1, 27, "Input"],
Cell[26581, 1070, 57, 1, 27, "Input"],
Cell[26641, 1073, 33, 0, 32, "Text"],
Cell[26677, 1075, 44, 1, 27, "Input"],
Cell[26724, 1078, 44, 1, 27, "Input"],
Cell[26771, 1081, 44, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[26864, 1088, 24, 0, 53, "Subtitle"],
Cell[26891, 1090, 41, 0, 32, "Text"],

Cell[CellGroupData[{
Cell[26957, 1094, 26, 0, 38, "Subsection"],
Cell[26986, 1096, 48, 0, 32, "Text"],
Cell[27037, 1098, 35, 0, 32, "Text"],
Cell[27075, 1100, 49, 1, 27, "Input"],
Cell[27127, 1103, 49, 0, 32, "Text"],
Cell[27179, 1105, 52, 1, 27, "Input"],
Cell[27234, 1108, 48, 0, 32, "Text"],
Cell[27285, 1110, 51, 1, 27, "Input"],
Cell[27339, 1113, 33, 0, 32, "Text"],
Cell[27375, 1115, 46, 1, 27, "Input"],
Cell[27424, 1118, 46, 0, 32, "Text"],
Cell[27473, 1120, 45, 1, 27, "Input"],
Cell[27521, 1123, 70, 0, 32, "Text"],
Cell[27594, 1125, 58, 1, 27, "Input"],
Cell[27655, 1128, 39, 0, 32, "Text"],
Cell[27697, 1130, 61, 1, 27, "Input"],
Cell[27761, 1133, 40, 0, 32, "Text"],
Cell[27804, 1135, 43, 1, 27, "Input"],
Cell[27850, 1138, 39, 0, 32, "Text"],
Cell[27892, 1140, 61, 1, 27, "Input"],
Cell[27956, 1143, 113, 3, 32, "Text"],
Cell[28072, 1148, 67, 0, 32, "Text"],
Cell[28142, 1150, 44, 1, 27, "Input"],
Cell[28189, 1153, 66, 0, 32, "Text"],
Cell[28258, 1155, 46, 1, 27, "Input"],
Cell[28307, 1158, 68, 1, 27, "Input"],
Cell[28378, 1161, 93, 3, 32, "Text"],
Cell[28474, 1166, 41, 1, 27, "Input"],
Cell[28518, 1169, 62, 0, 32, "Text"],
Cell[28583, 1171, 28, 0, 32, "Text"],
Cell[28614, 1173, 44, 1, 27, "Input"],
Cell[28661, 1176, 44, 1, 27, "Input"],
Cell[28708, 1179, 115, 3, 32, "Text"],
Cell[28826, 1184, 45, 1, 27, "Input"],
Cell[28874, 1187, 88, 3, 32, "Text"],
Cell[28965, 1192, 44, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[29046, 1198, 28, 0, 30, "Subsection"],
Cell[29077, 1200, 87, 3, 32, "Text"],
Cell[29167, 1205, 39, 0, 32, "Text"],
Cell[29209, 1207, 51, 1, 27, "Input"],
Cell[29263, 1210, 34, 0, 32, "Text"],
Cell[29300, 1212, 52, 1, 27, "Input"],
Cell[29355, 1215, 59, 0, 32, "Text"],
Cell[29417, 1217, 58, 1, 27, "Input"],
Cell[29478, 1220, 72, 0, 32, "Text"],
Cell[29553, 1222, 61, 1, 27, "Input"],
Cell[29617, 1225, 39, 0, 32, "Text"],
Cell[29659, 1227, 61, 1, 27, "Input"],
Cell[29723, 1230, 47, 0, 32, "Text"],
Cell[29773, 1232, 44, 1, 27, "Input"],
Cell[29820, 1235, 39, 0, 32, "Text"],
Cell[29862, 1237, 63, 1, 27, "Input"],
Cell[29928, 1240, 39, 0, 32, "Text"],
Cell[29970, 1242, 173, 3, 43, "Input"],
Cell[30146, 1247, 61, 1, 27, "Input"],
Cell[30210, 1250, 49, 0, 32, "Text"],
Cell[30262, 1252, 44, 1, 27, "Input"],
Cell[30309, 1255, 59, 0, 32, "Text"],
Cell[30371, 1257, 48, 1, 27, "Input"],
Cell[30422, 1260, 87, 1, 27, "Input"],
Cell[30512, 1263, 67, 0, 32, "Text"],
Cell[30582, 1265, 41, 1, 27, "Input"],
Cell[30626, 1268, 44, 1, 27, "Input"],
Cell[30673, 1271, 54, 0, 32, "Text"],
Cell[30730, 1273, 70, 1, 27, "Input"],
Cell[30803, 1276, 61, 1, 27, "Input"],
Cell[30867, 1279, 86, 1, 27, "Input"],
Cell[30956, 1282, 75, 0, 32, "Text"],
Cell[31034, 1284, 41, 1, 27, "Input"],
Cell[31078, 1287, 62, 0, 32, "Text"],
Cell[31143, 1289, 64, 0, 32, "Text"],
Cell[31210, 1291, 75, 1, 27, "Input"],
Cell[31288, 1294, 70, 1, 27, "Input"],
Cell[31361, 1297, 69, 1, 27, "Input"],
Cell[31433, 1300, 74, 1, 27, "Input"],
Cell[31510, 1303, 28, 0, 32, "Text"],
Cell[31541, 1305, 44, 1, 27, "Input"],
Cell[31588, 1308, 44, 1, 27, "Input"],
Cell[31635, 1311, 76, 0, 32, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[31748, 1316, 27, 0, 30, "Subsection"],
Cell[31778, 1318, 76, 0, 32, "Text"],
Cell[31857, 1320, 38, 0, 32, "Text"],
Cell[31898, 1322, 50, 1, 27, "Input"],
Cell[31951, 1325, 33, 0, 32, "Text"],
Cell[31987, 1327, 51, 1, 27, "Input"],
Cell[32041, 1330, 57, 0, 32, "Text"],
Cell[32101, 1332, 57, 1, 27, "Input"],
Cell[32161, 1335, 71, 0, 32, "Text"],
Cell[32235, 1337, 60, 1, 27, "Input"],
Cell[32298, 1340, 39, 0, 32, "Text"],
Cell[32340, 1342, 61, 1, 27, "Input"],
Cell[32404, 1345, 47, 0, 32, "Text"],
Cell[32454, 1347, 44, 1, 27, "Input"],
Cell[32501, 1350, 39, 0, 32, "Text"],
Cell[32543, 1352, 63, 1, 27, "Input"],
Cell[32609, 1355, 32, 0, 32, "Text"],
Cell[32644, 1357, 154, 3, 43, "Input"],
Cell[32801, 1362, 61, 1, 27, "Input"],
Cell[32865, 1365, 98, 3, 32, "Text"],
Cell[32966, 1370, 49, 0, 32, "Text"],
Cell[33018, 1372, 44, 1, 27, "Input"],
Cell[33065, 1375, 59, 0, 32, "Text"],
Cell[33127, 1377, 48, 1, 27, "Input"],
Cell[33178, 1380, 70, 1, 27, "Input"],
Cell[33251, 1383, 70, 0, 32, "Text"],
Cell[33324, 1385, 42, 1, 27, "Input"],
Cell[33369, 1388, 44, 1, 27, "Input"],
Cell[33416, 1391, 53, 0, 32, "Text"],
Cell[33472, 1393, 60, 1, 27, "Input"],
Cell[33535, 1396, 61, 1, 27, "Input"],
Cell[33599, 1399, 70, 1, 27, "Input"],
Cell[33672, 1402, 90, 3, 32, "Text"],
Cell[33765, 1407, 41, 1, 27, "Input"],
Cell[33809, 1410, 62, 0, 32, "Text"],
Cell[33874, 1412, 28, 0, 32, "Text"],
Cell[33905, 1414, 44, 1, 27, "Input"],
Cell[33952, 1417, 44, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[34033, 1423, 33, 0, 30, "Subsection"],
Cell[34069, 1425, 94, 3, 32, "Text"],
Cell[34166, 1430, 44, 0, 32, "Text"],
Cell[34213, 1432, 56, 1, 27, "Input"],
Cell[34272, 1435, 39, 0, 32, "Text"],
Cell[34314, 1437, 57, 1, 27, "Input"],
Cell[34374, 1440, 87, 3, 32, "Text"],
Cell[34464, 1445, 118, 3, 27, "Input"],
Cell[34585, 1450, 39, 0, 32, "Text"],
Cell[34627, 1452, 61, 1, 27, "Input"],
Cell[34691, 1455, 48, 0, 32, "Text"],
Cell[34742, 1457, 45, 1, 27, "Input"],
Cell[34790, 1460, 39, 0, 32, "Text"],
Cell[34832, 1462, 63, 1, 27, "Input"],
Cell[34898, 1465, 47, 0, 32, "Text"],
Cell[34948, 1467, 44, 1, 27, "Input"],
Cell[34995, 1470, 39, 0, 32, "Text"],
Cell[35037, 1472, 74, 1, 27, "Input"],
Cell[35114, 1475, 32, 0, 32, "Text"],
Cell[35149, 1477, 152, 3, 43, "Input"],
Cell[35304, 1482, 61, 1, 27, "Input"],
Cell[35368, 1485, 49, 0, 32, "Text"],
Cell[35420, 1487, 44, 1, 27, "Input"],
Cell[35467, 1490, 59, 0, 32, "Text"],
Cell[35529, 1492, 48, 1, 27, "Input"],
Cell[35580, 1495, 70, 1, 27, "Input"],
Cell[35653, 1498, 46, 0, 32, "Text"],
Cell[35702, 1500, 41, 1, 27, "Input"],
Cell[35746, 1503, 50, 0, 32, "Text"],
Cell[35799, 1505, 42, 1, 27, "Input"],
Cell[35844, 1508, 27, 0, 32, "Text"],
Cell[35874, 1510, 40, 1, 27, "Input"],
Cell[35917, 1513, 96, 3, 32, "Text"],
Cell[36016, 1518, 41, 1, 27, "Input"],
Cell[36060, 1521, 62, 0, 32, "Text"],
Cell[36125, 1523, 28, 0, 32, "Text"],
Cell[36156, 1525, 44, 1, 27, "Input"],
Cell[36203, 1528, 44, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[36284, 1534, 34, 0, 30, "Subsection"],
Cell[36321, 1536, 98, 3, 32, "Text"],
Cell[36422, 1541, 45, 0, 32, "Text"],
Cell[36470, 1543, 57, 1, 27, "Input"],
Cell[36530, 1546, 40, 0, 32, "Text"],
Cell[36573, 1548, 58, 1, 27, "Input"],
Cell[36634, 1551, 88, 3, 32, "Text"],
Cell[36725, 1556, 121, 3, 27, "Input"],
Cell[36849, 1561, 39, 0, 32, "Text"],
Cell[36891, 1563, 61, 1, 27, "Input"],
Cell[36955, 1566, 49, 0, 32, "Text"],
Cell[37007, 1568, 46, 1, 27, "Input"],
Cell[37056, 1571, 39, 0, 32, "Text"],
Cell[37098, 1573, 63, 1, 27, "Input"],
Cell[37164, 1576, 47, 0, 32, "Text"],
Cell[37214, 1578, 44, 1, 27, "Input"],
Cell[37261, 1581, 39, 0, 32, "Text"],
Cell[37303, 1583, 74, 1, 27, "Input"],
Cell[37380, 1586, 32, 0, 32, "Text"],
Cell[37415, 1588, 307, 5, 91, "Input"],
Cell[37725, 1595, 53, 0, 32, "Text"],
Cell[37781, 1597, 61, 1, 27, "Input"],
Cell[37845, 1600, 49, 0, 32, "Text"],
Cell[37897, 1602, 44, 1, 27, "Input"],
Cell[37944, 1605, 59, 0, 32, "Text"],
Cell[38006, 1607, 48, 1, 27, "Input"],
Cell[38057, 1610, 70, 1, 27, "Input"],
Cell[38130, 1613, 48, 0, 32, "Text"],
Cell[38181, 1615, 42, 1, 27, "Input"],
Cell[38226, 1618, 28, 0, 32, "Text"],
Cell[38257, 1620, 41, 1, 27, "Input"],
Cell[38301, 1623, 46, 0, 32, "Text"],
Cell[38350, 1625, 63, 1, 27, "Input"],
Cell[38416, 1628, 27, 0, 32, "Text"],
Cell[38446, 1630, 40, 1, 27, "Input"],
Cell[38489, 1633, 33, 0, 32, "Text"],
Cell[38525, 1635, 47, 1, 27, "Input"],
Cell[38575, 1638, 46, 0, 32, "Text"],
Cell[38624, 1640, 61, 1, 27, "Input"],
Cell[38688, 1643, 97, 3, 32, "Text"],
Cell[38788, 1648, 41, 1, 27, "Input"],
Cell[38832, 1651, 62, 0, 32, "Text"],
Cell[38897, 1653, 28, 0, 32, "Text"],
Cell[38928, 1655, 44, 1, 27, "Input"],
Cell[38975, 1658, 44, 1, 27, "Input"],
Cell[39022, 1661, 74, 0, 32, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[39133, 1666, 29, 0, 30, "Subsection"],
Cell[39165, 1668, 105, 3, 32, "Text"],
Cell[39273, 1673, 38, 0, 32, "Text"],
Cell[39314, 1675, 52, 1, 27, "Input"],
Cell[39369, 1678, 36, 0, 32, "Text"],
Cell[39408, 1680, 49, 1, 27, "Input"],
Cell[39460, 1683, 46, 0, 32, "Text"],
Cell[39509, 1685, 48, 1, 27, "Input"],
Cell[39560, 1688, 73, 0, 32, "Text"],
Cell[39636, 1690, 62, 1, 27, "Input"],
Cell[39701, 1693, 39, 0, 32, "Text"],
Cell[39743, 1695, 61, 1, 27, "Input"],
Cell[39807, 1698, 43, 0, 32, "Text"],
Cell[39853, 1700, 46, 1, 27, "Input"],
Cell[39902, 1703, 39, 0, 32, "Text"],
Cell[39944, 1705, 61, 1, 27, "Input"],
Cell[40008, 1708, 32, 0, 32, "Text"],
Cell[40043, 1710, 63, 1, 27, "Input"],
Cell[40109, 1713, 42, 0, 32, "Text"],
Cell[40154, 1715, 45, 1, 27, "Input"],
Cell[40202, 1718, 88, 1, 27, "Input"],
Cell[40293, 1721, 69, 0, 32, "Text"],
Cell[40365, 1723, 86, 1, 27, "Input"],
Cell[40454, 1726, 99, 3, 32, "Text"],
Cell[40556, 1731, 120, 2, 27, "Input"],
Cell[40679, 1735, 45, 1, 27, "Input"],
Cell[40727, 1738, 111, 2, 27, "Input"],
Cell[40841, 1742, 45, 1, 27, "Input"],
Cell[40889, 1745, 44, 0, 32, "Text"],
Cell[40936, 1747, 307, 5, 91, "Input"],
Cell[41246, 1754, 87, 3, 32, "Text"],
Cell[41336, 1759, 90, 1, 27, "Input"],
Cell[41429, 1762, 51, 0, 32, "Text"],
Cell[41483, 1764, 129, 2, 27, "Input"],
Cell[41615, 1768, 137, 3, 32, "Text"],
Cell[41755, 1773, 86, 1, 27, "Input"],
Cell[41844, 1776, 37, 0, 32, "Text"],
Cell[41884, 1778, 83, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[42004, 1784, 31, 0, 30, "Subsection"],
Cell[42038, 1786, 48, 0, 32, "Text"],
Cell[42089, 1788, 107, 3, 32, "Text"],
Cell[42199, 1793, 40, 0, 32, "Text"],
Cell[42242, 1795, 54, 1, 27, "Input"],
Cell[42299, 1798, 38, 0, 32, "Text"],
Cell[42340, 1800, 51, 1, 27, "Input"],
Cell[42394, 1803, 46, 0, 32, "Text"],
Cell[42443, 1805, 50, 1, 27, "Input"],
Cell[42496, 1808, 75, 0, 32, "Text"],
Cell[42574, 1810, 75, 1, 27, "Input"],
Cell[42652, 1813, 39, 0, 32, "Text"],
Cell[42694, 1815, 61, 1, 27, "Input"],
Cell[42758, 1818, 45, 0, 32, "Text"],
Cell[42806, 1820, 48, 1, 27, "Input"],
Cell[42857, 1823, 39, 0, 32, "Text"],
Cell[42899, 1825, 61, 1, 27, "Input"],
Cell[42963, 1828, 32, 0, 32, "Text"],
Cell[42998, 1830, 73, 1, 27, "Input"],
Cell[43074, 1833, 101, 3, 32, "Text"],
Cell[43178, 1838, 92, 1, 27, "Input"],
Cell[43273, 1841, 41, 0, 32, "Text"],
Cell[43317, 1843, 69, 0, 32, "Text"],
Cell[43389, 1845, 88, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[43514, 1851, 27, 0, 30, "Subsection"],
Cell[43544, 1853, 131, 3, 32, "Text"],
Cell[43678, 1858, 36, 0, 32, "Text"],
Cell[43717, 1860, 50, 1, 27, "Input"],
Cell[43770, 1863, 34, 0, 32, "Text"],
Cell[43807, 1865, 47, 1, 27, "Input"],
Cell[43857, 1868, 46, 0, 32, "Text"],
Cell[43906, 1870, 46, 1, 27, "Input"],
Cell[43955, 1873, 71, 0, 32, "Text"],
Cell[44029, 1875, 65, 1, 27, "Input"],
Cell[44097, 1878, 39, 0, 32, "Text"],
Cell[44139, 1880, 61, 1, 27, "Input"],
Cell[44203, 1883, 41, 0, 32, "Text"],
Cell[44247, 1885, 44, 1, 27, "Input"],
Cell[44294, 1888, 39, 0, 32, "Text"],
Cell[44336, 1890, 61, 1, 27, "Input"],
Cell[44400, 1893, 57, 0, 32, "Text"],
Cell[44460, 1895, 431, 7, 86, "Text"],
Cell[44894, 1904, 65, 1, 27, "Input"],
Cell[44962, 1907, 75, 1, 27, "Input"],
Cell[45040, 1910, 70, 1, 27, "Input"],
Cell[45113, 1913, 110, 3, 32, "Text"],
Cell[45226, 1918, 158, 2, 43, "Input"],
Cell[45387, 1922, 160, 4, 50, "Text"],
Cell[45550, 1928, 98, 3, 32, "Text"],
Cell[45651, 1933, 53, 1, 27, "Input"],
Cell[45707, 1936, 289, 5, 50, "Text"],
Cell[45999, 1943, 26, 0, 32, "Text"],
Cell[46028, 1945, 54, 1, 27, "Input"],
Cell[46085, 1948, 26, 0, 32, "Text"],
Cell[46114, 1950, 54, 1, 27, "Input"],
Cell[46171, 1953, 25, 0, 32, "Text"],
Cell[46199, 1955, 59, 1, 27, "Input"],
Cell[46261, 1958, 26, 0, 32, "Text"],
Cell[46290, 1960, 59, 1, 27, "Input"],
Cell[46352, 1963, 139, 3, 32, "Text"],
Cell[46494, 1968, 106, 2, 27, "Input"],
Cell[46603, 1972, 57, 1, 27, "Input"],
Cell[46663, 1975, 106, 2, 27, "Input"],
Cell[46772, 1979, 42, 1, 27, "Input"],
Cell[46817, 1982, 56, 0, 32, "Text"],
Cell[46876, 1984, 77, 1, 27, "Input"],
Cell[46956, 1987, 57, 0, 32, "Text"],
Cell[47016, 1989, 45, 1, 27, "Input"],
Cell[47064, 1992, 51, 1, 27, "Input"],
Cell[47118, 1995, 71, 0, 32, "Text"],
Cell[47192, 1997, 55, 1, 27, "Input"],
Cell[47250, 2000, 67, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[47354, 2006, 32, 0, 30, "Subsection"],
Cell[47389, 2008, 110, 3, 32, "Text"],
Cell[47502, 2013, 41, 0, 32, "Text"],
Cell[47546, 2015, 55, 1, 27, "Input"],
Cell[47604, 2018, 39, 0, 32, "Text"],
Cell[47646, 2020, 52, 1, 27, "Input"],
Cell[47701, 2023, 46, 0, 32, "Text"],
Cell[47750, 2025, 51, 1, 27, "Input"],
Cell[47804, 2028, 76, 0, 32, "Text"],
Cell[47883, 2030, 65, 1, 27, "Input"],
Cell[47951, 2033, 39, 0, 32, "Text"],
Cell[47993, 2035, 61, 1, 27, "Input"],
Cell[48057, 2038, 46, 0, 32, "Text"],
Cell[48106, 2040, 49, 1, 27, "Input"],
Cell[48158, 2043, 39, 0, 32, "Text"],
Cell[48200, 2045, 61, 1, 27, "Input"],
Cell[48264, 2048, 42, 0, 32, "Text"],
Cell[48309, 2050, 45, 1, 27, "Input"],
Cell[48357, 2053, 69, 0, 32, "Text"],
Cell[48429, 2055, 71, 0, 32, "Text"],
Cell[48503, 2057, 107, 2, 27, "Input"],
Cell[48613, 2061, 67, 1, 27, "Input"],
Cell[48683, 2064, 105, 2, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[48837, 2072, 24, 0, 53, "Subtitle"],
Cell[48864, 2074, 40, 0, 32, "Text"],
Cell[48907, 2076, 242, 5, 68, "Text"],
Cell[49152, 2083, 362, 8, 122, "Text"],
Cell[49517, 2093, 141, 4, 68, "Text"],
Cell[49661, 2099, 71, 4, 68, "Text"],

Cell[CellGroupData[{
Cell[49757, 2107, 27, 0, 38, "Subsection"],
Cell[49787, 2109, 36, 0, 32, "Text"],
Cell[49826, 2111, 50, 1, 27, "Input"],
Cell[49879, 2114, 49, 0, 32, "Text"],
Cell[49931, 2116, 51, 1, 27, "Input"],
Cell[49985, 2119, 34, 0, 32, "Text"],
Cell[50022, 2121, 47, 1, 27, "Input"],
Cell[50072, 2124, 46, 0, 32, "Text"],
Cell[50121, 2126, 46, 1, 27, "Input"],
Cell[50170, 2129, 71, 0, 32, "Text"],
Cell[50244, 2131, 67, 1, 27, "Input"],
Cell[50314, 2134, 39, 0, 32, "Text"],
Cell[50356, 2136, 61, 1, 27, "Input"],
Cell[50420, 2139, 41, 0, 32, "Text"],
Cell[50464, 2141, 44, 1, 27, "Input"],
Cell[50511, 2144, 39, 0, 32, "Text"],
Cell[50553, 2146, 61, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[50651, 2152, 27, 0, 30, "Subsection"],
Cell[50681, 2154, 38, 0, 32, "Text"],
Cell[50722, 2156, 50, 1, 27, "Input"],
Cell[50775, 2159, 33, 0, 32, "Text"],
Cell[50811, 2161, 51, 1, 27, "Input"],
Cell[50865, 2164, 50, 0, 32, "Text"],
Cell[50918, 2166, 50, 1, 27, "Input"],
Cell[50971, 2169, 71, 0, 32, "Text"],
Cell[51045, 2171, 62, 1, 27, "Input"],
Cell[51110, 2174, 39, 0, 32, "Text"],
Cell[51152, 2176, 61, 1, 27, "Input"],
Cell[51216, 2179, 48, 0, 32, "Text"],
Cell[51267, 2181, 45, 1, 27, "Input"],
Cell[51315, 2184, 39, 0, 32, "Text"],
Cell[51357, 2186, 63, 1, 27, "Input"],
Cell[51423, 2189, 33, 0, 32, "Text"],
Cell[51459, 2191, 44, 1, 27, "Input"],
Cell[51506, 2194, 44, 1, 27, "Input"],
Cell[51553, 2197, 44, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[51634, 2203, 26, 0, 30, "Subsection"],
Cell[51663, 2205, 37, 0, 32, "Text"],
Cell[51703, 2207, 49, 1, 27, "Input"],
Cell[51755, 2210, 32, 0, 32, "Text"],
Cell[51790, 2212, 50, 1, 27, "Input"],
Cell[51843, 2215, 70, 0, 32, "Text"],
Cell[51916, 2217, 104, 2, 27, "Input"],
Cell[52023, 2221, 39, 0, 32, "Text"],
Cell[52065, 2223, 61, 1, 27, "Input"],
Cell[52129, 2226, 48, 0, 32, "Text"],
Cell[52180, 2228, 45, 1, 27, "Input"],
Cell[52228, 2231, 39, 0, 32, "Text"],
Cell[52270, 2233, 63, 1, 27, "Input"],
Cell[52336, 2236, 48, 0, 32, "Text"],
Cell[52387, 2238, 45, 1, 27, "Input"],
Cell[52435, 2241, 39, 0, 32, "Text"],
Cell[52477, 2243, 74, 1, 27, "Input"],
Cell[52554, 2246, 33, 0, 32, "Text"],
Cell[52590, 2248, 44, 1, 27, "Input"],
Cell[52637, 2251, 93, 3, 32, "Text"],
Cell[52733, 2256, 44, 1, 27, "Input"],
Cell[52780, 2259, 44, 1, 27, "Input"],
Cell[52827, 2262, 64, 0, 32, "Text"],
Cell[52894, 2264, 54, 1, 27, "Input"],
Cell[52951, 2267, 40, 1, 27, "Input"],
Cell[52994, 2270, 54, 1, 27, "Input"],
Cell[53051, 2273, 31, 0, 32, "Text"],
Cell[53085, 2275, 69, 1, 27, "Input"],
Cell[53157, 2278, 40, 1, 27, "Input"],
Cell[53200, 2281, 54, 1, 27, "Input"],
Cell[53257, 2284, 36, 0, 32, "Text"],
Cell[53296, 2286, 74, 1, 27, "Input"],
Cell[53373, 2289, 40, 1, 27, "Input"],
Cell[53416, 2292, 54, 1, 27, "Input"],
Cell[53473, 2295, 26, 0, 32, "Text"],
Cell[53502, 2297, 67, 1, 27, "Input"],
Cell[53572, 2300, 40, 1, 27, "Input"],
Cell[53615, 2303, 54, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[53706, 2309, 27, 0, 30, "Subsection"],
Cell[53736, 2311, 36, 0, 32, "Text"],
Cell[53775, 2313, 50, 1, 27, "Input"],
Cell[53828, 2316, 48, 0, 32, "Text"],
Cell[53879, 2318, 56, 1, 27, "Input"],
Cell[53938, 2321, 34, 0, 32, "Text"],
Cell[53975, 2323, 47, 1, 27, "Input"],
Cell[54025, 2326, 46, 0, 32, "Text"],
Cell[54074, 2328, 46, 1, 27, "Input"],
Cell[54123, 2331, 71, 0, 32, "Text"],
Cell[54197, 2333, 51, 1, 27, "Input"],
Cell[54251, 2336, 39, 0, 32, "Text"],
Cell[54293, 2338, 61, 1, 27, "Input"],
Cell[54357, 2341, 41, 0, 32, "Text"],
Cell[54401, 2343, 44, 1, 27, "Input"],
Cell[54448, 2346, 39, 0, 32, "Text"],
Cell[54490, 2348, 61, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[54588, 2354, 32, 0, 30, "Subsection"],
Cell[54623, 2356, 43, 0, 32, "Text"],
Cell[54669, 2358, 55, 1, 27, "Input"],
Cell[54727, 2361, 38, 0, 32, "Text"],
Cell[54768, 2363, 56, 1, 27, "Input"],
Cell[54827, 2366, 76, 0, 32, "Text"],
Cell[54906, 2368, 67, 1, 27, "Input"],
Cell[54976, 2371, 39, 0, 32, "Text"],
Cell[55018, 2373, 61, 1, 27, "Input"],
Cell[55082, 2376, 48, 0, 32, "Text"],
Cell[55133, 2378, 45, 1, 27, "Input"],
Cell[55181, 2381, 39, 0, 32, "Text"],
Cell[55223, 2383, 63, 1, 27, "Input"],
Cell[55289, 2386, 57, 0, 32, "Text"],
Cell[55349, 2388, 66, 1, 27, "Input"],
Cell[55418, 2391, 68, 1, 27, "Input"],
Cell[55489, 2394, 88, 3, 32, "Text"],
Cell[55580, 2399, 54, 1, 27, "Input"],
Cell[55637, 2402, 44, 1, 27, "Input"],
Cell[55684, 2405, 79, 1, 27, "Input"],
Cell[55766, 2408, 70, 1, 27, "Input"],
Cell[55839, 2411, 49, 0, 32, "Text"],
Cell[55891, 2413, 74, 1, 27, "Input"],
Cell[55968, 2416, 67, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[56084, 2423, 26, 0, 53, "Subtitle"],
Cell[56113, 2425, 52, 0, 32, "Text"],
Cell[56168, 2427, 39, 1, 27, "Input"],

Cell[CellGroupData[{
Cell[56232, 2432, 38, 0, 38, "Subsection"],
Cell[56273, 2434, 47, 0, 32, "Text"],
Cell[56323, 2436, 61, 1, 27, "Input"],
Cell[56387, 2439, 45, 0, 32, "Text"],
Cell[56435, 2441, 58, 1, 27, "Input"],
Cell[56496, 2444, 46, 0, 32, "Text"],
Cell[56545, 2446, 57, 1, 27, "Input"],
Cell[56605, 2449, 92, 3, 32, "Text"],
Cell[56700, 2454, 75, 1, 27, "Input"],
Cell[56778, 2457, 39, 0, 32, "Text"],
Cell[56820, 2459, 61, 1, 27, "Input"],
Cell[56884, 2462, 52, 0, 32, "Text"],
Cell[56939, 2464, 55, 1, 27, "Input"],
Cell[56997, 2467, 39, 0, 32, "Text"],
Cell[57039, 2469, 61, 1, 27, "Input"],
Cell[57103, 2472, 66, 0, 32, "Text"],
Cell[57172, 2474, 75, 1, 27, "Input"],
Cell[57250, 2477, 103, 3, 32, "Text"],
Cell[57356, 2482, 74, 1, 27, "Input"],
Cell[57433, 2485, 38, 1, 27, "Input"],
Cell[57474, 2488, 74, 1, 27, "Input"],
Cell[57551, 2491, 38, 1, 27, "Input"],
Cell[57592, 2494, 74, 0, 32, "Text"],
Cell[57669, 2496, 56, 1, 27, "Input"],
Cell[57728, 2499, 94, 3, 32, "Text"],
Cell[57825, 2504, 51, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[57913, 2510, 34, 0, 30, "Subsection"],
Cell[57950, 2512, 74, 0, 32, "Text"],
Cell[58027, 2514, 94, 3, 32, "Text"],
Cell[58124, 2519, 43, 0, 32, "Text"],
Cell[58170, 2521, 57, 1, 27, "Input"],
Cell[58230, 2524, 41, 0, 32, "Text"],
Cell[58274, 2526, 54, 1, 27, "Input"],
Cell[58331, 2529, 46, 0, 32, "Text"],
Cell[58380, 2531, 53, 1, 27, "Input"],
Cell[58436, 2534, 88, 3, 32, "Text"],
Cell[58527, 2539, 89, 1, 27, "Input"],
Cell[58619, 2542, 39, 0, 32, "Text"],
Cell[58661, 2544, 61, 1, 27, "Input"],
Cell[58725, 2547, 48, 0, 32, "Text"],
Cell[58776, 2549, 51, 1, 27, "Input"],
Cell[58830, 2552, 39, 0, 32, "Text"],
Cell[58872, 2554, 61, 1, 27, "Input"],
Cell[58936, 2557, 48, 0, 32, "Text"],
Cell[58987, 2559, 51, 1, 27, "Input"],
Cell[59041, 2562, 48, 0, 32, "Text"],
Cell[59092, 2564, 51, 1, 27, "Input"],
Cell[59146, 2567, 45, 0, 32, "Text"],
Cell[59194, 2569, 74, 1, 27, "Input"],
Cell[59271, 2572, 74, 1, 27, "Input"],
Cell[59348, 2575, 51, 1, 27, "Input"],
Cell[59402, 2578, 39, 1, 27, "Input"],
Cell[59444, 2581, 37, 0, 32, "Text"],
Cell[59484, 2583, 70, 1, 27, "Input"],
Cell[59557, 2586, 39, 1, 27, "Input"],
Cell[59599, 2589, 88, 3, 32, "Text"],
Cell[59690, 2594, 140, 3, 27, "Input"],
Cell[59833, 2599, 61, 1, 27, "Input"],
Cell[59897, 2602, 45, 0, 32, "Text"],
Cell[59945, 2604, 74, 1, 27, "Input"],
Cell[60022, 2607, 74, 1, 27, "Input"],
Cell[60099, 2610, 51, 1, 27, "Input"],
Cell[60153, 2613, 39, 1, 27, "Input"],
Cell[60195, 2616, 155, 3, 50, "Text"],
Cell[60353, 2621, 91, 1, 27, "Input"],
Cell[60447, 2624, 87, 1, 27, "Input"],
Cell[60537, 2627, 61, 1, 27, "Input"],
Cell[60601, 2630, 115, 3, 32, "Text"],
Cell[60719, 2635, 56, 1, 27, "Input"],
Cell[60778, 2638, 131, 3, 27, "Input"],
Cell[60912, 2643, 61, 1, 27, "Input"],
Cell[60976, 2646, 55, 0, 32, "Text"],
Cell[61034, 2648, 51, 1, 27, "Input"],
Cell[61088, 2651, 87, 3, 32, "Text"],
Cell[61178, 2656, 244, 4, 59, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[61459, 2665, 30, 0, 30, "Subsection"],
Cell[61492, 2667, 113, 3, 32, "Text"],
Cell[61608, 2672, 118, 2, 27, "Input"],
Cell[61729, 2676, 39, 1, 27, "Input"],
Cell[61771, 2679, 130, 2, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[61950, 2687, 30, 0, 53, "Subtitle"],
Cell[61983, 2689, 55, 0, 32, "Text"],
Cell[62041, 2691, 71, 0, 32, "Text"],
Cell[62115, 2693, 43, 1, 27, "Input"],

Cell[CellGroupData[{
Cell[62183, 2698, 37, 0, 38, "Subsection"],
Cell[62223, 2700, 46, 0, 32, "Text"],
Cell[62272, 2702, 60, 1, 27, "Input"],
Cell[62335, 2705, 44, 0, 32, "Text"],
Cell[62382, 2707, 57, 1, 27, "Input"],
Cell[62442, 2710, 46, 0, 32, "Text"],
Cell[62491, 2712, 56, 1, 27, "Input"],
Cell[62550, 2715, 91, 3, 32, "Text"],
Cell[62644, 2720, 157, 3, 43, "Input"],
Cell[62804, 2725, 39, 0, 32, "Text"],
Cell[62846, 2727, 61, 1, 27, "Input"],
Cell[62910, 2730, 51, 0, 32, "Text"],
Cell[62964, 2732, 54, 1, 27, "Input"],
Cell[63021, 2735, 39, 0, 32, "Text"],
Cell[63063, 2737, 61, 1, 27, "Input"],
Cell[63127, 2740, 90, 3, 32, "Text"],
Cell[63220, 2745, 70, 1, 27, "Input"],
Cell[63293, 2748, 111, 3, 32, "Text"],
Cell[63407, 2753, 51, 1, 27, "Input"],
Cell[63461, 2756, 163, 4, 50, "Text"],
Cell[63627, 2762, 82, 1, 27, "Input"],
Cell[63712, 2765, 89, 3, 32, "Text"],
Cell[63804, 2770, 69, 1, 27, "Input"],
Cell[63876, 2773, 60, 0, 32, "Text"],
Cell[63939, 2775, 60, 1, 27, "Input"],
Cell[64002, 2778, 46, 0, 32, "Text"],
Cell[64051, 2780, 41, 1, 27, "Input"],
Cell[64095, 2783, 57, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[64201, 2790, 28, 0, 53, "Subtitle"],

Cell[CellGroupData[{
Cell[64254, 2794, 26, 0, 38, "Subsection"],
Cell[64283, 2796, 35, 0, 32, "Text"],
Cell[64321, 2798, 49, 1, 27, "Input"],
Cell[64373, 2801, 51, 0, 32, "Text"],
Cell[64427, 2803, 54, 1, 27, "Input"],
Cell[64484, 2806, 33, 0, 32, "Text"],
Cell[64520, 2808, 46, 1, 27, "Input"],
Cell[64569, 2811, 46, 0, 32, "Text"],
Cell[64618, 2813, 45, 1, 27, "Input"],
Cell[64666, 2816, 70, 0, 32, "Text"],
Cell[64739, 2818, 64, 1, 27, "Input"],
Cell[64806, 2821, 39, 0, 32, "Text"],
Cell[64848, 2823, 61, 1, 27, "Input"],
Cell[64912, 2826, 40, 0, 32, "Text"],
Cell[64955, 2828, 43, 1, 27, "Input"],
Cell[65001, 2831, 39, 0, 32, "Text"],
Cell[65043, 2833, 61, 1, 27, "Input"],
Cell[65107, 2836, 93, 3, 32, "Text"],
Cell[65203, 2841, 106, 2, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[65346, 2848, 30, 0, 30, "Subsection"],
Cell[65379, 2850, 143, 3, 32, "Text"],
Cell[65525, 2855, 41, 0, 32, "Text"],
Cell[65569, 2857, 53, 1, 27, "Input"],
Cell[65625, 2860, 36, 0, 32, "Text"],
Cell[65664, 2862, 54, 1, 27, "Input"],
Cell[65721, 2865, 74, 0, 32, "Text"],
Cell[65798, 2867, 63, 1, 27, "Input"],
Cell[65864, 2870, 39, 0, 32, "Text"],
Cell[65906, 2872, 61, 1, 27, "Input"],
Cell[65970, 2875, 47, 0, 32, "Text"],
Cell[66020, 2877, 44, 1, 27, "Input"],
Cell[66067, 2880, 39, 0, 32, "Text"],
Cell[66109, 2882, 63, 1, 27, "Input"],
Cell[66175, 2885, 177, 4, 50, "Text"],
Cell[66355, 2891, 131, 3, 32, "Text"],
Cell[66489, 2896, 64, 1, 27, "Input"],
Cell[66556, 2899, 50, 1, 27, "Input"],
Cell[66609, 2902, 70, 1, 27, "Input"],
Cell[66682, 2905, 47, 1, 27, "Input"],
Cell[66732, 2908, 48, 1, 27, "Input"],
Cell[66783, 2911, 56, 1, 27, "Input"],
Cell[66842, 2914, 52, 0, 32, "Text"],
Cell[66897, 2916, 54, 1, 27, "Input"],
Cell[66954, 2919, 61, 1, 27, "Input"],
Cell[67018, 2922, 60, 0, 32, "Text"],
Cell[67081, 2924, 40, 1, 27, "Input"],
Cell[67124, 2927, 61, 1, 27, "Input"],
Cell[67188, 2930, 41, 1, 27, "Input"],
Cell[67232, 2933, 61, 1, 27, "Input"],
Cell[67296, 2936, 43, 0, 32, "Text"],
Cell[67342, 2938, 38, 1, 27, "Input"],
Cell[67383, 2941, 61, 1, 27, "Input"],
Cell[67447, 2944, 41, 1, 27, "Input"],
Cell[67491, 2947, 61, 1, 27, "Input"],
Cell[67555, 2950, 36, 0, 32, "Text"],
Cell[67594, 2952, 37, 1, 27, "Input"],
Cell[67634, 2955, 61, 1, 27, "Input"],
Cell[67698, 2958, 41, 1, 27, "Input"],
Cell[67742, 2961, 61, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[67852, 2968, 26, 0, 53, "Subtitle"],
Cell[67881, 2970, 237, 5, 68, "Text"],
Cell[68121, 2977, 124, 3, 32, "Text"],
Cell[68248, 2982, 43, 1, 27, "Input"],
Cell[68294, 2985, 125, 3, 32, "Text"],
Cell[68422, 2990, 44, 1, 27, "Input"],
Cell[68469, 2993, 102, 3, 32, "Text"],

Cell[CellGroupData[{
Cell[68596, 3000, 37, 0, 38, "Subsection"],
Cell[68636, 3002, 46, 0, 32, "Text"],
Cell[68685, 3004, 60, 1, 27, "Input"],
Cell[68748, 3007, 44, 0, 32, "Text"],
Cell[68795, 3009, 57, 1, 27, "Input"],
Cell[68855, 3012, 46, 0, 32, "Text"],
Cell[68904, 3014, 56, 1, 27, "Input"],
Cell[68963, 3017, 91, 3, 32, "Text"],
Cell[69057, 3022, 127, 3, 27, "Input"],
Cell[69187, 3027, 39, 0, 32, "Text"],
Cell[69229, 3029, 61, 1, 27, "Input"],
Cell[69293, 3032, 51, 0, 32, "Text"],
Cell[69347, 3034, 54, 1, 27, "Input"],
Cell[69404, 3037, 39, 0, 32, "Text"],
Cell[69446, 3039, 61, 1, 27, "Input"],
Cell[69510, 3042, 126, 3, 32, "Text"],
Cell[69639, 3047, 72, 1, 27, "Input"],
Cell[69714, 3050, 67, 0, 32, "Text"],
Cell[69784, 3052, 77, 1, 27, "Input"],
Cell[69864, 3055, 115, 3, 32, "Text"],
Cell[69982, 3060, 80, 1, 27, "Input"],
Cell[70065, 3063, 66, 0, 32, "Text"],
Cell[70134, 3065, 63, 1, 27, "Input"],
Cell[70200, 3068, 36, 0, 32, "Text"],
Cell[70239, 3070, 80, 1, 27, "Input"],
Cell[70322, 3073, 74, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[70433, 3079, 38, 0, 30, "Subsection"],
Cell[70474, 3081, 47, 0, 32, "Text"],
Cell[70524, 3083, 61, 1, 27, "Input"],
Cell[70588, 3086, 45, 0, 32, "Text"],
Cell[70636, 3088, 58, 1, 27, "Input"],
Cell[70697, 3091, 46, 0, 32, "Text"],
Cell[70746, 3093, 57, 1, 27, "Input"],
Cell[70806, 3096, 92, 3, 32, "Text"],
Cell[70901, 3101, 220, 5, 43, "Input"],
Cell[71124, 3108, 39, 0, 32, "Text"],
Cell[71166, 3110, 61, 1, 27, "Input"],
Cell[71230, 3113, 52, 0, 32, "Text"],
Cell[71285, 3115, 55, 1, 27, "Input"],
Cell[71343, 3118, 39, 0, 32, "Text"],
Cell[71385, 3120, 61, 1, 27, "Input"],
Cell[71449, 3123, 96, 3, 32, "Text"],
Cell[71548, 3128, 79, 1, 27, "Input"],
Cell[71630, 3131, 132, 3, 32, "Text"],
Cell[71765, 3136, 62, 1, 27, "Input"],
Cell[71830, 3139, 60, 0, 32, "Text"],
Cell[71893, 3141, 83, 1, 27, "Input"],
Cell[71979, 3144, 65, 0, 32, "Text"],
Cell[72047, 3146, 49, 1, 27, "Input"],
Cell[72099, 3149, 51, 1, 27, "Input"],
Cell[72153, 3152, 66, 0, 32, "Text"],
Cell[72222, 3154, 48, 1, 27, "Input"],
Cell[72273, 3157, 55, 1, 27, "Input"],
Cell[72331, 3160, 52, 1, 27, "Input"],
Cell[72386, 3163, 172, 4, 50, "Text"],
Cell[72561, 3169, 51, 1, 27, "Input"],
Cell[72615, 3172, 51, 1, 27, "Input"],
Cell[72669, 3175, 37, 0, 32, "Text"],
Cell[72709, 3177, 83, 1, 27, "Input"],
Cell[72795, 3180, 48, 1, 27, "Input"],
Cell[72846, 3183, 39, 0, 32, "Text"],
Cell[72888, 3185, 50, 1, 27, "Input"],
Cell[72941, 3188, 41, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[73031, 3195, 29, 0, 53, "Subtitle"],
Cell[73063, 3197, 106, 3, 50, "Text"],
Cell[73172, 3202, 40, 0, 32, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[73249, 3207, 28, 0, 53, "Subtitle"],
Cell[73280, 3209, 204, 5, 50, "Text"],
Cell[73487, 3216, 331, 8, 122, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[73855, 3229, 29, 0, 53, "Subtitle"],
Cell[73887, 3231, 226, 5, 50, "Text"],
Cell[74116, 3238, 89, 3, 32, "Text"],
Cell[74208, 3243, 208, 4, 50, "Text"],
Cell[74419, 3249, 54, 1, 27, "Input"],
Cell[74476, 3252, 122, 3, 32, "Text"],
Cell[74601, 3257, 52, 0, 32, "Text"],
Cell[74656, 3259, 43, 1, 27, "Input"],
Cell[74702, 3262, 70, 0, 32, "Text"],
Cell[74775, 3264, 57, 1, 27, "Input"],
Cell[74835, 3267, 40, 0, 32, "Text"],
Cell[74878, 3269, 57, 1, 27, "Input"],
Cell[74938, 3272, 32, 0, 32, "Text"],
Cell[74973, 3274, 44, 1, 27, "Input"],
Cell[75020, 3277, 40, 0, 32, "Text"],
Cell[75063, 3279, 40, 1, 27, "Input"],
Cell[75106, 3282, 72, 0, 32, "Text"],
Cell[75181, 3284, 63, 1, 27, "Input"],
Cell[75247, 3287, 130, 3, 32, "Text"],
Cell[75380, 3292, 159, 4, 27, "Input"],
Cell[75542, 3298, 40, 0, 32, "Text"],
Cell[75585, 3300, 57, 1, 27, "Input"],
Cell[75645, 3303, 37, 0, 32, "Text"],
Cell[75685, 3305, 63, 1, 27, "Input"],
Cell[75751, 3308, 41, 0, 32, "Text"],
Cell[75795, 3310, 66, 1, 27, "Input"],
Cell[75864, 3313, 156, 3, 50, "Text"],
Cell[76023, 3318, 144, 4, 50, "Text"]
}, Closed]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

