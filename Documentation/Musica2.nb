(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.0'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     25519,        840]*)
(*NotebookOutlinePosition[     26215,        864]*)
(*  CellTagsIndexPosition[     26171,        860]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["Musica2", "Title"],

Cell["Documentation on the Musica2 package.", "Text"],

Cell[CellGroupData[{

Cell["Licence", "Subtitle"],

Cell["\<\
Copyright (C) 2004 Bo C. Herlin

This program is free software;you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation;either version 2
of the License,or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program;if not,write to the Free Software Foundation,
Inc.,59 Temple Place-Suite 330,Boston,MA 02111-1307,USA.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["History", "Subtitle"],

Cell["\<\
2004-08-13 Bo C. Herlin : yet another rest/tie scheme, now with \
MidiDataAnyValue and MidiDataNoValue, MidiRest* is removed
2004-08-13 Bo C. Herlin : added Midi(Add|Get|Rem|Set)(Notes|QPM), enamed \
MidiEqualizeEOT to MidiAddEOT
2004-08-11 Bo C. Herlin : added SoundSetDuration to be used in MidiToSound
2004-08-10 Bo C. Herlin : removed call to MidiAddEOT, added SoundPitchShift
2004-08-09 Bo C. Herlin : minor changes to reflect the code. 
2004-08-08 Bo C. Herlin : added this new state-thing 
2004-08-04 Bo C. Herlin : first release
2004-07-28 Bo C. Herlin : created\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Init", "Subtitle"],

Cell["\<\
Load Musica2 which in turn will load each package when \
needed.\
\>", "Text"],

Cell[BoxData[
    \(<< Musica2`\)], "Input",
  InitializationCell->True],

Cell["\<\
A small example below uses a tiny part of the Audio package when \
creating a triangle sound.\
\>", "Text"],

Cell[BoxData[
    \(<< Miscellaneous`Audio`\)], "Input",
  InitializationCell->True],

Cell["Set DataFolder to the folder containing the testfiles.", "Text"],

Cell[BoxData[
    \(\(DataFolder = "\<Musica2/Documentation/Data/\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(\(\(cor := DataFolder <> "\<cor.mid\>"\) \)\(;\)\( (*\ 2.9  kb, \ 
      J . S . Bach, \ bwv\ 323, \ choral, \ Holy, \ 
      holy, \ \(\(holy\)\(.\)\)\ *) \)\(\[IndentingNewLine]\)\(\(fug := 
        DataFolder <> "\<fug.mid\>"\) \)\(;\)\( (*\ 6.1  kb, \ 
      J . S . Bach, \ bwv\ 846  b, \ fugue\ 1\ in\ C\ major, \ 
      wtc1\ *) \)\(\[IndentingNewLine]\)\(\(cun := 
        DataFolder <> "\<cun.mid\>"\) \)\(;\)\( (*\ 6.4  kb, \ 
      J . S . Bach, \ bwv\ 1080  a, \ contrapunctus\ 1, \ 
      cunst\ die\ fugue\ *) \)\(\[IndentingNewLine]\)\(\(pre := 
        DataFolder <> "\<pre.mid\>"\) \)\(;\)\( (*\ 8.9  kb, \ 
      J . S . Bach, \ bwv\ 847  a, \ preludium\ 2\ in\ C\ minor, \ 
      wtc1\ *) \)\)\)], "Input",
  InitializationCell->True],

Cell["Set MidiTestFile to the file to apply the tests to.", "Text"],

Cell[BoxData[{
    \(\(MidiTestFile := cor;\)\), "\[IndentingNewLine]", 
    \(\(MidiTestFileList := {cor, fug, cun, pre};\)\)}], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Tour of Musica2", "Subtitle"],

Cell["\<\
Eventually there will be functions for manipulating Midi-objects, \
like getting, adding and removing things like notes and stuff.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Midi", "Subsubtitle"],

Cell["Read from a SMF (StandardMidiFile).", "Text"],

Cell[BoxData[
    \(m = MidiImportSMF[MidiTestFile]\)], "Input"],

Cell["\<\
Midi contain two parts: info and music. Info is a list of rules \
with values for different attributes and music is the midi-data whos \
structure depends on info.\
\>", "Text"],

Cell["\<\
Info contain rules for each attribute:
\tMidiFileFormat (0 or 1),if omitted defaults to Options[Midi]
\tMidiShape (MidiFile,MidiVoice or MidiChord)
\tMidiTimeUnit (MidiTick or MidiSec)
\tMidiTiming (MidiDelta or MidiAbsolute)
\tMidiTPQ (TickPerQuarter),if omitted defaults to Options[Midi]
\tMidiQPM (QuarterPerMinute),if omitted defaults to Options[Midi], used as \
default tempo\
\>", "Text"],

Cell[BoxData[
    \(MidiGetInfo[m]\)], "Input"],

Cell[BoxData[
    \(Options[Midi]\)], "Input"],

Cell["\<\
The info-parts MidiShape, MidiTimeUnit and MidiTiming are called \
the State.\
\>", "Text"],

Cell[BoxData[
    \(MidiGetState[m]\)], "Input"],

Cell["Write to a SMF.", "Text"],

Cell[BoxData[
    \(MidiExportSMF["\<tmp.mid\>", m]\)], "Input"],

Cell["Create a list of Midi's to test on.", "Text"],

Cell[BoxData[
    \(\((ml = MidiImportSMF /@ MidiTestFileList)\) // ColumnForm\)], "Input"],

Cell["What are the lengths of the tracks?", "Text"],

Cell[BoxData[
    \(MidiGetDurations /@ ml // ColumnForm\)], "Input"],

Cell["Equalize them per file. This also adds EOT if missing.", "Text"],

Cell[BoxData[
    \(\(MidiGetDurations[MidiAddEOT[#]] &\) /@ ml // ColumnForm\)], "Input"],

Cell["Keep the max-duration.", "Text"],

Cell[BoxData[
    \(\(MidiGetDurations[MidiAddEOT[#, True]] &\) /@ ml // 
      ColumnForm\)], "Input"],

Cell["What are the lengths of the files (unmodified)?", "Text"],

Cell[BoxData[
    \(MidiGetDuration /@ ml\)], "Input"],

Cell["On which channels per track are there notes?", "Text"],

Cell[BoxData[
    \(\(MidiGetChannels[#] &\) /@ ml // ColumnForm\)], "Input"],

Cell["\<\
Do the files use NoteOff's instead of NoteOn's with velocity \
zero?\
\>", "Text"],

Cell[BoxData[
    \(\(# === MidiNormalizeNoteOff[#] &\) /@ ml\)], "Input"],

Cell["\<\
If a second parameter is supplied you can turn all \
NoteOff-velocitys to zero.\
\>", "Text"],

Cell["\<\
Currently, some of the functions just called above only work if the \
Midi-object has shape MidiFile.\
\>", "Text"],

Cell["\<\
Since changing to shape MidiVoice is neglecting velocity for \
NoteOff's I'll set them all to zero so that I easier can check for any \
loss.\
\>", "Text"],

Cell[BoxData[
    \(m = MidiNormalizeNoteOff[m, True]\)], "Input"],

Cell["\<\
I will also change timing to MidiAbsolute for the same \
reason.\
\>", "Text"],

Cell[BoxData[
    \(m = MidiSetState[m, {MidiTiming \[Rule] MidiAbsolute}]\)], "Input"],

Cell["\<\
When shape is MidiFile the music-part is a list of tracks \
containing events as {timing, {type, data}}.\
\>", "Text"],

Cell["\<\
Type is always an integer, except if the event is a meta-event, \
then its a list as {255,integer}.\
\>", "Text"],

Cell[BoxData[
    \(m[\([2]\)] // ColumnForm\)], "Input"],

Cell["\<\
This looks very much like an EventList in the original \
musica-package.\
\>", "Text"],

Cell["Change shape to MidiVoice.", "Text"],

Cell[BoxData[
    \(mv = MidiSetState[m, {MidiShape \[Rule] MidiVoice}]\)], "Input"],

Cell["\<\
You can supply a MidiVoiceReleaseTimeFunction to MidiSetState when \
changing shape from MidiFile to MidiVoice to intruduce a minimum release \
time. First parameter is the track-nr, the second is the note as \
{{on,off},{ch,p,v}}.\
\>", "Text"],

Cell[BoxData[
    \(MidiSetState[m, {MidiShape \[Rule] MidiVoice}, 
      MidiVoiceReleaseTimeFunction \[Rule] 
        Function[{t, n}, If[n[\([2, 2]\)] \[Equal] 72, Print[t, "\< \>", n]]; 
          0]]\)], "Input"],

Cell["\<\
When shape is MidiVoice the music-part is a list of voices \
containing data as {{type, track},{{timing, data}...}}.\
\>", "Text"],

Cell["There is no type MidiNoteOff in shape MidiVoice.", "Text"],

Cell["\<\
If the voice contains notes, type MidiNoteOn, track is not just a \
number but a list as {track,channel,voice}. (Im not sure if the voice-nr-info \
is useful, I might remove it).\
\>", "Text"],

Cell["\<\
If the voice contains notes, the data is {timing,{pitch,velocity}} \
since channel is added to the track-info, se above.\
\>", "Text"],

Cell["\<\
A rest is represented by the value of \
{MidiDataNoValue,MidiDataNoValue}. The data for a rest is discarded when \
changing back to shape MidiFile.\
\>", "Text"],

Cell[BoxData[
    \({\[IndentingNewLine]MidiDataNoValue, \
\[IndentingNewLine]MidiDataNoValueQ[2], \[IndentingNewLine]MidiDataNoValueQ[
        MidiDataNoValue], \[IndentingNewLine]MidiDataNoValueQ[
        Log[MidiTie[MidiDataNoValue + 12]/2]]\[IndentingNewLine]}\)], "Input"],

Cell["\<\
If the data is a list just one of the elements has to be \
MidiDataNoValue for MidiDataNoValueQ to return true.\
\>", "Text"],

Cell[BoxData[
    \(MidiDataNoValueQ[{1, MidiDataNoValue, 2, 3}]\)], "Input"],

Cell[BoxData[
    \(mv[\([2]\)] // ColumnForm\)], "Input"],

Cell["Change shape back to MidiFile again.", "Text"],

Cell[BoxData[
    \(mf = MidiSetState[mv, {MidiShape -> MidiFile}]\)], "Input"],

Cell["\<\
What did we miss? (nothing if you used my testfile) (TODO: All \
channel messages except notes are currently discarded when changing to shape \
MidiVoice or MidiChord).\
\>", "Text"],

Cell[BoxData[
    \(MapThread[Complement, {m[\([2]\)], mf[\([2]\)]}] // 
      ColumnForm\)], "Input"],

Cell["\<\
What did we add? This should at least be all empty for all \
testfiles.\
\>", "Text"],

Cell[BoxData[
    \(MapThread[Complement, {mf[\([2]\)], m[\([2]\)]}] // 
      ColumnForm\)], "Input"],

Cell["Next shape is MidiChord.", "Text"],

Cell[BoxData[
    \(mc = MidiSetState[mv, {MidiShape \[Rule] MidiChord}]\)], "Input"],

Cell["\<\
When shape is MidiChord the music-part is a list containing data as \
{{type, {track...}},{{timing, {data...}}...}} for each type.\
\>", "Text"],

Cell["There is no type MidiNoteOff in shape chord.", "Text"],

Cell["\<\
Currently, the data is negative or has the head MidiTie if there is \
a tie.\
\>", "Text"],

Cell[BoxData[
    \(mc[\([2]\)] // ColumnForm\)], "Input"],

Cell["Negative pitch means tie, MidiDataNoValue means a rest.", "Text"],

Cell[BoxData[
    \({\[IndentingNewLine]MidiTieQ[\(-3\)], \[IndentingNewLine]MidiTie[
        60], \[IndentingNewLine]MidiTie[
        MidiDataNoValue], \[IndentingNewLine]MidiUnTie[\(-61\)], \
\[IndentingNewLine]MidiTie[anything], \[IndentingNewLine]MidiUnTie[
        MidiTie[anything]], \[IndentingNewLine]MidiUnTie[
        anything], \[IndentingNewLine]MidiTieQ[
        anything], \[IndentingNewLine]MidiTieQ[
        MidiTie[anything]], \[IndentingNewLine]MidiTieQ[
        Log[MidiTie[MidiDataNoValue + 12]/2]], \[IndentingNewLine]MidiUnTie[
        Log[MidiTie[MidiDataNoValue + 12]/2]]\[IndentingNewLine]}\)], "Input"],

Cell["Get the list of all chords, just the pitch.", "Text"],

Cell[BoxData[
    \(\(\(Transpose[#]\)[\([1]\)] &\) /@ \(Transpose[
          mc[\([2, 1, 2]\)]]\)[\([2]\)]\)], "Input"],

Cell["\<\
We can use supplied patterns to check the data. Not much of a test \
yet really, but the sourcecode of the patterns may help a confused \
programmer.\
\>", "Text"],

Cell["We can check the info part.", "Text"],

Cell[BoxData[
    \(\(MatchQ[#[\([1]\)], MidiPatternInfo] &\) /@ {mf, mv, mc}\)], "Input"],

Cell["We can check the music part.", "Text"],

Cell[BoxData[
    \(\(MatchQ[#[\([2]\)], MidiPatternFile] &\) /@ {mf, mv, mc}\)], "Input"],

Cell[BoxData[
    \(\(MatchQ[#[\([2]\)], MidiPatternVoice] &\) /@ {mf, mv, mc}\)], "Input"],

Cell[BoxData[
    \(\(MatchQ[#[\([2]\)], MidiPatternChord] &\) /@ {mf, mv, mc}\)], "Input"],

Cell["Or we can check the whole package so to speak.", "Text"],

Cell[BoxData[
    \(\(MatchQ[#, MidiPatternMidi] &\) /@ {mf, mv, mc}\)], "Input"],

Cell["Change TimeUnit to MidiSec and then get the duration in sec.", "Text"],

Cell[BoxData[
    \(\(MidiGetDuration[MidiSetState[#, {MidiTimeUnit \[Rule] MidiSec}]] &\) /@ 
      ml\)], "Input"],

Cell["Get all tempo-changes and their starting time.", "Text"],

Cell[BoxData[
    \(Round[MidiGetQPM /@ ml] // ColumnForm\)], "Input"],

Cell["There are some functions for creating Midi-objects.", "Text"],

Cell["\<\
A starting point for making Midi-objects using these functions \
could be MidiEmpty:\
\>", "Text"],

Cell[BoxData[
    \(e = MidiEmpty\)], "Input"],

Cell["\<\
Add notes in a {{{{on,off},{ch,p,v}}...}...} format as returned by \
MidiGetNotes:\
\>", "Text"],

Cell[BoxData[
    \(e = MidiAddNotes[e, MidiGetNotes[m]]\)], "Input"],

Cell["Add qpm in a {{on,qpm}...} format as returned by MidiGetQPM:", "Text"],

Cell[BoxData[
    \(e = MidiAddQPM[e, MidiGetQPM[m]]\)], "Input"],

Cell["Then add/adjust EOT.", "Text"],

Cell[BoxData[
    \(e = MidiAddEOT[e]\)], "Input"],

Cell["You can also remove all notes.", "Text"],

Cell[BoxData[
    \(e = MidiRemNotes[e]\)], "Input"],

Cell["And all QPM.", "Text"],

Cell[BoxData[
    \(e = MidiRemQPM[e]\)], "Input"],

Cell["Only EOT left.", "Text"],

Cell[BoxData[
    \(e[\([2]\)] // ColumnForm\)], "Input"],

Cell["\<\
MidiSetNotes[m,n] is like calling MidiAddNotes[MidiRemNotes[m],n] \
but with better state handling.\
\>", "Text"],

Cell["\<\
Eventually, when I know how Midi-objects preferably are created, I \
will produce some more functions so that one doesnt have to mess with too \
much low level details like below. But until then: embrace!\
\>", "Text"],

Cell["\<\
Three simple ways of creating Midi-objects in a low-level-way with \
random notes getting slightly different results.\
\>", "Text"],

Cell[BoxData[
    \(\(\(NRT = 4;\)\( (*\ nr\ of\ tracks\ *) \)\)\)], "Input"],

Cell[BoxData[
    \(\(\(NRN = 100;\)\( (*\ nr\ of\ notes\ per\ track\ *) \)\)\)], "Input"],

Cell["Create a Midi object in shape file.", "Text"],

Cell[BoxData[
    \(m1 = 
      Midi[\[IndentingNewLine]{MidiShape \[Rule] MidiFile, 
          MidiTimeUnit \[Rule] MidiTick, 
          MidiTiming \[Rule] 
            MidiAbsolute}, \[IndentingNewLine]Join[\[IndentingNewLine]{{}},  \
(*\ empty\ master\ track\ *) \[IndentingNewLine]\(Flatten[#, 1] &\) /@ 
            Table[\[IndentingNewLine]Module[{s = Random[Integer, {0, 10000}], 
                  c = Random[Integer, {0, 15}], 
                  p = Random[Integer, {0, 127}], 
                  v = Random[Integer, {1, 127}], 
                  d = Random[
                      Integer, {1, 
                        100}]}, \[IndentingNewLine]{{s, {MidiNoteOn, {c, p, 
                        v}}}, {s + 
                      d, {MidiNoteOff, {c, p, 
                        0}}}}\[IndentingNewLine]], \[IndentingNewLine]{t, 
                NRT}, {i, 
                NRN}\[IndentingNewLine]]\[IndentingNewLine]]\
\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(MatchQ[m1[\([2]\)], MidiPatternFile]\)], "Input"],

Cell["Create a Midi object in shape voice.", "Text"],

Cell[BoxData[
    \(m2 = 
      Midi[\[IndentingNewLine]{MidiShape \[Rule] MidiVoice, 
          MidiTimeUnit \[Rule] MidiTick, 
          MidiTiming \[Rule] 
            MidiAbsolute}, \
\[IndentingNewLine]Table[\[IndentingNewLine]Module[{c = 
                Random[Integer, {0, 
                    15}]}, \[IndentingNewLine]{{MidiNoteOn, {t, c, 
                  1}}, \[IndentingNewLine]Flatten[
                Table[\[IndentingNewLine]Module[{s = 
                        Random[Integer, {0, 10000}], 
                      p = Random[Integer, {0, 127}], 
                      v = Random[Integer, {1, 127}], 
                      d = Random[
                          Integer, {1, 100}]}, \[IndentingNewLine]{{d, {p, 
                          v}}, {d + 
                          s, {p, \(-v\)}}}\[IndentingNewLine]], \
\[IndentingNewLine]{i, NRN}\[IndentingNewLine]], 
                1]\[IndentingNewLine]}\[IndentingNewLine]], \
\[IndentingNewLine]{t, 
            NRT}\[IndentingNewLine]]\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(MatchQ[m2[\([2]\)], MidiPatternVoice]\)], "Input"],

Cell["Create a Midi object in shape chord.", "Text"],

Cell[BoxData[
    \(m3 = 
      Midi[\[IndentingNewLine]{MidiShape \[Rule] MidiChord, 
          MidiTimeUnit \[Rule] MidiTick, 
          MidiTiming \[Rule] 
            MidiDelta}, \[IndentingNewLine]{{{MidiNoteOn, 
              Table[Module[{c = Random[Integer, {0, 15}]}, {t, c, 1}], {t, 
                  NRT}]}, \
\[IndentingNewLine]Table[\[IndentingNewLine]Module[{d = 
                    Random[Integer, {1, 
                        100}]}, \[IndentingNewLine]{\[IndentingNewLine]d, \
\[IndentingNewLine]Table[\[IndentingNewLine]Module[{p = 
                          Random[Integer, {0, 127}], 
                        v = Random[
                            Integer, {1, 127}]}, \[IndentingNewLine]{p, 
                        v}\[IndentingNewLine]], \[IndentingNewLine]{t, 
                      NRT}\[IndentingNewLine]]\[IndentingNewLine]}\
\[IndentingNewLine]], \[IndentingNewLine]{i, 
                NRN}\[IndentingNewLine]]\[IndentingNewLine]}}\
\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(MatchQ[m3[\([2]\)], MidiPatternChord]\)], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sound", "Subsubtitle"],

Cell["Start with a function taking sec as parameter.", "Text"],

Cell[BoxData[
    \(f = Sin[2  Pi\ 220\ #] &\)], "Input"],

Cell[BoxData[
    \(Plot[f[t], {t, 0, 0.01}]\)], "Input"],

Cell["Make a 1 sec sound-function-object.", "Text"],

Cell[BoxData[
    \(s = SoundMakeFunc[f, SoundDuration \[Rule] 1]\)], "Input"],

Cell[BoxData[
    \(SoundGetInfo[s]\)], "Input"],

Cell[BoxData[
    \(Show[s]\)], "Input"],

Cell["\<\
Zound (yes, Zound, NOT Sound) has some default-values, just like \
Midi, so the SoundDuration could have been omitted in the case above .\
\>", \
"Text"],

Cell[BoxData[
    \(Options[Zound]\)], "Input"],

Cell["Make a sound using the Audio-package.", "Text"],

Cell[BoxData[
    \(s = Waveform[Triangle, 220, 0.5]\)], "Input"],

Cell[BoxData[
    \(Show[s]\)], "Input"],

Cell["Get the function.", "Text"],

Cell[BoxData[
    \(\((f = \(SoundGetFunc[s]\)[\([1]\)])\)[t]\)], "Input"],

Cell[BoxData[
    \(Plot[f[t], {t, 0, 0.01}]\)], "Input"],

Cell["Convert sample-rate.", "Text"],

Cell[BoxData[
    \(s = SoundMakeFunc[s, SampleRate \[Rule] 2^12]\)], "Input"],

Cell[BoxData[
    \(Show[s]\)], "Input"],

Cell["Make it into a sound-sample-list.", "Text"],

Cell[BoxData[
    \(s = SoundMakeList[s]\)], "Input"],

Cell[BoxData[
    \(Show[s]\)], "Input"],

Cell["Get the function (which is really a list now).", "Text"],

Cell[BoxData[
    \(f = \(SoundGetFunc[s]\)[\([1]\)]\)], "Input"],

Cell[BoxData[
    \(Plot[f[t], {t, 0, 0.01}]\)], "Input"],

Cell["Do it again, but smothen the curve.", "Text"],

Cell[BoxData[
    \(f = \(SoundGetFunc[s, 
          InterpolationOrder \[Rule] 1]\)[\([1]\)]\)], "Input"],

Cell[BoxData[
    \(Plot[f[t], {t, 0, 0.01}]\)], "Input"],

Cell["Start with two sounds.", "Text"],

Cell[BoxData[
    \(sa = SoundMakeFunc[Sin[2  Pi\ 220\ #] &, SoundDuration \[Rule] 1]; 
    sb = SoundMakeFunc[Sin[2  Pi\ 220\ 3/2\ #] &, 
        SoundDuration \[Rule] 1];\)], "Input"],

Cell["Make a sound by combining them in paralell.", "Text"],

Cell[BoxData[
    \(sp = SoundPar[{sa, sb}]\)], "Input"],

Cell[BoxData[
    \(Show[sp]\)], "Input"],

Cell["\<\
Make a sound by combining them in sequence, just like \
Beethowen...\
\>", "Text"],

Cell[BoxData[
    \(ss = SoundSeq[{sa, sb}]\)], "Input"],

Cell[BoxData[
    \(Show[ss]\)], "Input"],

Cell["Make a sound by combining sound in paralell and in sequence.", "Text"],

Cell[BoxData[
    \(ssp = SoundSeq[{SoundPar[{sa, sb}], SoundPar[{sb, sa}]}]\)], "Input"],

Cell[BoxData[
    \(Show[ssp]\)], "Input"],

Cell["Slice it up...", "Text"],

Cell[BoxData[
    \(ssl = SoundUnSeq[ssp, {0.7, 1.1}]\)], "Input"],

Cell["...and take the portion from the middle.", "Text"],

Cell[BoxData[
    \(sm = ssl[\([2]\)]\)], "Input"],

Cell[BoxData[
    \(Show[sm]\)], "Input"],

Cell[BoxData[
    \(sd = SoundImportWav[DataFolder <> "\<lin8.wav\>"]\)], "Input"],

Cell[BoxData[
    \(SoundGetInfo[sd]\)], "Input"],

Cell[BoxData[
    \(Show[sd]\)], "Input"],

Cell["\<\
Lets get a small part from it (quite tiny actually), just the \"o\" \
when he says Torvalds.\
\>", "Text"],

Cell[BoxData[
    \(sdp = 
      SoundMakeList[\[IndentingNewLine]Take[\(SoundGetList[
              sd]\)[\([1]\)], {10300, 10342}]\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(SoundGetInfo[sdp]\)], "Input"],

Cell[BoxData[
    \(Show[sdp]\)], "Input"],

Cell["\<\
Now, lets make a simple Midi to Sound converter using this snippet.\
\
\>", "Text"],

Cell[BoxData[
    \(MidiToSound[m : Midi[_, _], s_Sound, \ 
        opts___] := \[IndentingNewLine]Module[\[IndentingNewLine]{\
\[IndentingNewLine]p2f = 
            Function[p, 
              440*2^\((\((p - 57)\)/12)\)], \[IndentingNewLine]v2a = 
            Function[v, v/127], \[IndentingNewLine]osc = 
            Function[{f, a}, 
              N[a\ Sin[
                      2  Pi\ f  #]] &], \[IndentingNewLine]mf, \
\[IndentingNewLine]r, c, mix\[IndentingNewLine]}, \[IndentingNewLine] (*\ 
          get\ the\ music\ as\ {{{timing, {p, 
                        v}} ... } ... }\ *) \[IndentingNewLine]r = 
          Cases[\(MidiSetState[
                m, {MidiTimeUnit \[Rule] MidiSec, 
                  MidiShape \[Rule] MidiVoice, 
                  MidiTiming \[Rule] 
                    MidiDelta}]\)[\([2]\)], {{MidiNoteOn, _}, d$_} \[Rule] 
              d$]; \[IndentingNewLine] (*\ 
          calculate\ mean\ freq\ *) \[IndentingNewLine]mf = 
          N[Mean[Flatten[\(\((\(If[\(! MidiDataNoValueQ[#[\([2]\)]]\), 
                            p2f[#[\([2, 1]\)]], {}] &\) /@ #)\) &\) /@ 
                  r]]]; \[IndentingNewLine] (*\ 
          make\ them\ into\ lists\ of\ sound - 
            objects\ *) \[IndentingNewLine]r = \(\((\[IndentingNewLine]\(If[
                      MidiDataNoValueQ[#[\([2]\)]], \
\[IndentingNewLine]SoundOfSilence[SoundChannelCount -> 1, 
                        SoundDuration \[Rule] #[\([1]\)], 
                        opts], \[IndentingNewLine]SoundSetDuration[
                        SoundPitchShift[s, p2f[#[\([2, 1]\)]]/mf, 
                          opts], #[\([1]\)], 
                        opts]\[IndentingNewLine]] &\) /@ \
#\[IndentingNewLine])\) &\) /@ r; \[IndentingNewLine] (*\ 
          then\ use\ SoundSeq\ *) \[IndentingNewLine]r = 
          SoundSeq /@ r; \[IndentingNewLine] (*\ 
          then\ use\ SoundPar\ *) \[IndentingNewLine]r = 
          SoundPar[r]; \[IndentingNewLine] (*\ 
          create\ a\ simple\ mix\ for\ two\ output - 
            channels\ *) \[IndentingNewLine]c = 
          SoundGetChannelCount[r]; \[IndentingNewLine]mix = 
          Table[N[{Evaluate[\((c - i)\)/\((2 \((c - 1)\))\)] &, 
                Evaluate[\((i - 1)\)/\((2 \((c - 1)\))\)] &}], {i, 
              c}]; \[IndentingNewLine] (*\ 
          make\ the\ mixdown\ *) \[IndentingNewLine]SoundMix[r, 
          mix]\[IndentingNewLine]]\)], "Input"],

Cell["First, lets use a sinewavesound.", "Text"],

Cell[BoxData[
    \(m2s = MidiToSound[m, SoundMakeFunc[Sin[2  Pi\ 440\ #] &]]\)], "Input"],

Cell[BoxData[
    \(SoundGetInfo[m2s]\)], "Input"],

Cell["\<\
This takes a while to render, partly (maybe) because a Sound of \
type SampledSoundFunction with two channels must contain a list of two \
functions returning one value each instead of a single function returning a \
list of two values which would be more efficient in a mix. On my laptop, \
1GHz, it takes about 80 sec.\
\>", "Text"],

Cell[BoxData[
    \(Timing[Show[m2s]]\)], "Input"],

Cell["Then we let Linus do his solo-quartet", "Text"],

Cell[BoxData[
    \(m2s = MidiToSound[m, sdp]\)], "Input"],

Cell["On my laptop it takes about 160 sec.", "Text"],

Cell[BoxData[
    \(Timing[Show[m2s]]\)], "Input"],

Cell["\<\
Now, lets hear him sing our 3rd random composition (m3 takes 20 sec \
to convert and render, m1 and m2 takes much, much longer):\
\>", "Text"],

Cell[BoxData[
    \(Timing[Show[MidiToSound[m3, sdp]]]\)], "Input"],

Cell["Hmmm, let's leave Linus to his OS-kernel shall we?", "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
FrontEndVersion->"5.0 for X",
ScreenRectangle->{{0, 1600}, {0, 1200}},
AutoGeneratedPackage->Automatic,
WindowSize->{788, 975},
WindowMargins->{{0, Automatic}, {31, Automatic}},
StyleDefinitions -> "Default.nb"
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 24, 0, 96, "Title"],
Cell[1803, 55, 53, 0, 32, "Text"],

Cell[CellGroupData[{
Cell[1881, 59, 27, 0, 51, "Subtitle"],
Cell[1911, 61, 720, 16, 284, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[2668, 82, 27, 0, 51, "Subtitle"],
Cell[2698, 84, 594, 11, 158, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[3329, 100, 24, 0, 51, "Subtitle"],
Cell[3356, 102, 88, 3, 32, "Text"],
Cell[3447, 107, 72, 2, 27, "Input",
  InitializationCell->True],
Cell[3522, 111, 117, 3, 32, "Text"],
Cell[3642, 116, 84, 2, 27, "Input",
  InitializationCell->True],
Cell[3729, 120, 70, 0, 32, "Text"],
Cell[3802, 122, 112, 2, 27, "Input",
  InitializationCell->True],
Cell[3917, 126, 775, 13, 75, "Input",
  InitializationCell->True],
Cell[4695, 141, 67, 0, 32, "Text"],
Cell[4765, 143, 166, 3, 43, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[4968, 151, 35, 0, 53, "Subtitle"],
Cell[5006, 153, 154, 3, 32, "Text"],

Cell[CellGroupData[{
Cell[5185, 160, 27, 0, 31, "Subsubtitle"],
Cell[5215, 162, 51, 0, 32, "Text"],
Cell[5269, 164, 64, 1, 27, "Input"],
Cell[5336, 167, 187, 4, 50, "Text"],
Cell[5526, 173, 404, 9, 140, "Text"],
Cell[5933, 184, 47, 1, 27, "Input"],
Cell[5983, 187, 46, 1, 27, "Input"],
Cell[6032, 190, 101, 3, 32, "Text"],
Cell[6136, 195, 48, 1, 27, "Input"],
Cell[6187, 198, 31, 0, 32, "Text"],
Cell[6221, 200, 64, 1, 27, "Input"],
Cell[6288, 203, 51, 0, 32, "Text"],
Cell[6342, 205, 91, 1, 27, "Input"],
Cell[6436, 208, 51, 0, 32, "Text"],
Cell[6490, 210, 69, 1, 27, "Input"],
Cell[6562, 213, 70, 0, 32, "Text"],
Cell[6635, 215, 90, 1, 27, "Input"],
Cell[6728, 218, 38, 0, 32, "Text"],
Cell[6769, 220, 103, 2, 27, "Input"],
Cell[6875, 224, 63, 0, 32, "Text"],
Cell[6941, 226, 54, 1, 27, "Input"],
Cell[6998, 229, 60, 0, 32, "Text"],
Cell[7061, 231, 77, 1, 27, "Input"],
Cell[7141, 234, 92, 3, 32, "Text"],
Cell[7236, 239, 74, 1, 27, "Input"],
Cell[7313, 242, 103, 3, 32, "Text"],
Cell[7419, 247, 125, 3, 32, "Text"],
Cell[7547, 252, 165, 4, 50, "Text"],
Cell[7715, 258, 66, 1, 27, "Input"],
Cell[7784, 261, 88, 3, 32, "Text"],
Cell[7875, 266, 87, 1, 27, "Input"],
Cell[7965, 269, 128, 3, 32, "Text"],
Cell[8096, 274, 123, 3, 32, "Text"],
Cell[8222, 279, 57, 1, 27, "Input"],
Cell[8282, 282, 96, 3, 32, "Text"],
Cell[8381, 287, 42, 0, 32, "Text"],
Cell[8426, 289, 84, 1, 27, "Input"],
Cell[8513, 292, 255, 5, 50, "Text"],
Cell[8771, 299, 217, 4, 43, "Input"],
Cell[8991, 305, 140, 3, 32, "Text"],
Cell[9134, 310, 64, 0, 32, "Text"],
Cell[9201, 312, 202, 4, 50, "Text"],
Cell[9406, 318, 144, 3, 32, "Text"],
Cell[9553, 323, 171, 4, 50, "Text"],
Cell[9727, 329, 277, 4, 107, "Input"],
Cell[10007, 335, 135, 3, 32, "Text"],
Cell[10145, 340, 77, 1, 27, "Input"],
Cell[10225, 343, 58, 1, 27, "Input"],
Cell[10286, 346, 52, 0, 32, "Text"],
Cell[10341, 348, 79, 1, 27, "Input"],
Cell[10423, 351, 192, 4, 50, "Text"],
Cell[10618, 357, 102, 2, 27, "Input"],
Cell[10723, 361, 95, 3, 32, "Text"],
Cell[10821, 366, 102, 2, 27, "Input"],
Cell[10926, 370, 40, 0, 32, "Text"],
Cell[10969, 372, 85, 1, 27, "Input"],
Cell[11057, 375, 154, 3, 32, "Text"],
Cell[11214, 380, 60, 0, 32, "Text"],
Cell[11277, 382, 100, 3, 32, "Text"],
Cell[11380, 387, 58, 1, 27, "Input"],
Cell[11441, 390, 71, 0, 32, "Text"],
Cell[11515, 392, 628, 10, 219, "Input"],
Cell[12146, 404, 59, 0, 32, "Text"],
Cell[12208, 406, 120, 2, 27, "Input"],
Cell[12331, 410, 173, 4, 50, "Text"],
Cell[12507, 416, 43, 0, 32, "Text"],
Cell[12553, 418, 90, 1, 27, "Input"],
Cell[12646, 421, 44, 0, 32, "Text"],
Cell[12693, 423, 90, 1, 27, "Input"],
Cell[12786, 426, 91, 1, 27, "Input"],
Cell[12880, 429, 91, 1, 27, "Input"],
Cell[12974, 432, 62, 0, 32, "Text"],
Cell[13039, 434, 81, 1, 27, "Input"],
Cell[13123, 437, 76, 0, 32, "Text"],
Cell[13202, 439, 116, 2, 27, "Input"],
Cell[13321, 443, 62, 0, 32, "Text"],
Cell[13386, 445, 70, 1, 27, "Input"],
Cell[13459, 448, 67, 0, 32, "Text"],
Cell[13529, 450, 108, 3, 32, "Text"],
Cell[13640, 455, 46, 1, 27, "Input"],
Cell[13689, 458, 106, 3, 32, "Text"],
Cell[13798, 463, 69, 1, 27, "Input"],
Cell[13870, 466, 76, 0, 32, "Text"],
Cell[13949, 468, 65, 1, 27, "Input"],
Cell[14017, 471, 36, 0, 32, "Text"],
Cell[14056, 473, 50, 1, 27, "Input"],
Cell[14109, 476, 46, 0, 32, "Text"],
Cell[14158, 478, 52, 1, 27, "Input"],
Cell[14213, 481, 28, 0, 32, "Text"],
Cell[14244, 483, 50, 1, 27, "Input"],
Cell[14297, 486, 30, 0, 32, "Text"],
Cell[14330, 488, 57, 1, 27, "Input"],
Cell[14390, 491, 123, 3, 32, "Text"],
Cell[14516, 496, 228, 4, 50, "Text"],
Cell[14747, 502, 141, 3, 32, "Text"],
Cell[14891, 507, 77, 1, 27, "Input"],
Cell[14971, 510, 90, 1, 27, "Input"],
Cell[15064, 513, 51, 0, 32, "Text"],
Cell[15118, 515, 960, 19, 235, "Input"],
Cell[16081, 536, 69, 1, 27, "Input"],
Cell[16153, 539, 52, 0, 32, "Text"],
Cell[16208, 541, 1035, 21, 283, "Input"],
Cell[17246, 564, 70, 1, 27, "Input"],
Cell[17319, 567, 52, 0, 32, "Text"],
Cell[17374, 569, 998, 19, 315, "Input"],
Cell[18375, 590, 70, 1, 27, "Input"]
}, Open  ]],

Cell[CellGroupData[{
Cell[18482, 596, 28, 0, 31, "Subsubtitle"],
Cell[18513, 598, 62, 0, 32, "Text"],
Cell[18578, 600, 57, 1, 27, "Input"],
Cell[18638, 603, 57, 1, 27, "Input"],
Cell[18698, 606, 51, 0, 32, "Text"],
Cell[18752, 608, 78, 1, 27, "Input"],
Cell[18833, 611, 48, 1, 27, "Input"],
Cell[18884, 614, 40, 1, 27, "Input"],
Cell[18927, 617, 163, 4, 50, "Text"],
Cell[19093, 623, 47, 1, 27, "Input"],
Cell[19143, 626, 53, 0, 32, "Text"],
Cell[19199, 628, 65, 1, 27, "Input"],
Cell[19267, 631, 40, 1, 27, "Input"],
Cell[19310, 634, 33, 0, 32, "Text"],
Cell[19346, 636, 74, 1, 27, "Input"],
Cell[19423, 639, 57, 1, 27, "Input"],
Cell[19483, 642, 36, 0, 32, "Text"],
Cell[19522, 644, 78, 1, 27, "Input"],
Cell[19603, 647, 40, 1, 27, "Input"],
Cell[19646, 650, 49, 0, 32, "Text"],
Cell[19698, 652, 53, 1, 27, "Input"],
Cell[19754, 655, 40, 1, 27, "Input"],
Cell[19797, 658, 62, 0, 32, "Text"],
Cell[19862, 660, 65, 1, 27, "Input"],
Cell[19930, 663, 57, 1, 27, "Input"],
Cell[19990, 666, 51, 0, 32, "Text"],
Cell[20044, 668, 106, 2, 27, "Input"],
Cell[20153, 672, 57, 1, 27, "Input"],
Cell[20213, 675, 38, 0, 32, "Text"],
Cell[20254, 677, 185, 3, 43, "Input"],
Cell[20442, 682, 59, 0, 32, "Text"],
Cell[20504, 684, 56, 1, 27, "Input"],
Cell[20563, 687, 41, 1, 27, "Input"],
Cell[20607, 690, 92, 3, 32, "Text"],
Cell[20702, 695, 56, 1, 27, "Input"],
Cell[20761, 698, 41, 1, 27, "Input"],
Cell[20805, 701, 76, 0, 32, "Text"],
Cell[20884, 703, 89, 1, 27, "Input"],
Cell[20976, 706, 42, 1, 27, "Input"],
Cell[21021, 709, 30, 0, 32, "Text"],
Cell[21054, 711, 66, 1, 27, "Input"],
Cell[21123, 714, 56, 0, 32, "Text"],
Cell[21182, 716, 50, 1, 27, "Input"],
Cell[21235, 719, 41, 1, 27, "Input"],
Cell[21279, 722, 82, 1, 27, "Input"],
Cell[21364, 725, 49, 1, 27, "Input"],
Cell[21416, 728, 41, 1, 27, "Input"],
Cell[21460, 731, 116, 3, 32, "Text"],
Cell[21579, 736, 165, 3, 59, "Input"],
Cell[21747, 741, 50, 1, 27, "Input"],
Cell[21800, 744, 42, 1, 27, "Input"],
Cell[21845, 747, 93, 3, 32, "Text"],
Cell[21941, 752, 2422, 44, 539, "Input"],
Cell[24366, 798, 48, 0, 32, "Text"],
Cell[24417, 800, 90, 1, 27, "Input"],
Cell[24510, 803, 50, 1, 27, "Input"],
Cell[24563, 806, 344, 6, 68, "Text"],
Cell[24910, 814, 50, 1, 27, "Input"],
Cell[24963, 817, 53, 0, 32, "Text"],
Cell[25019, 819, 58, 1, 27, "Input"],
Cell[25080, 822, 52, 0, 32, "Text"],
Cell[25135, 824, 50, 1, 27, "Input"],
Cell[25188, 827, 152, 3, 32, "Text"],
Cell[25343, 832, 67, 1, 27, "Input"],
Cell[25413, 835, 66, 0, 32, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

