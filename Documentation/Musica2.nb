(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.0'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     37610,       1673]*)
(*NotebookOutlinePosition[     38325,       1698]*)
(*  CellTagsIndexPosition[     38281,       1694]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["Musica2", "Title",
  FontSize->24],

Cell["Documentation on the Musica2 package.", "Text"],

Cell[CellGroupData[{

Cell["Licence", "Subtitle"],

Cell["\<\
Copyright (C) 2004 Bo C. Herlin

This program is free software;you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation;either version 2
of the License,or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program;if not,write to the Free Software Foundation,
Inc.,59 Temple Place-Suite 330,Boston,MA 02111-1307,USA.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["History", "Subtitle"],

Cell["\<\
2004-10-20 Bo C. Herlin : added Spectrum,Tuning, FigBass, Intervals \
and ThirdStack
2004-09-27 Bo C. Herlin : changed PitchCode in Scale to Content and added \
some scale-examples
2004-09-24 Bo C. Herlin : changed SnippetData to Content
2004-09-22 Bo C. Herlin : changed Show to Play2
2004-09-21 Bo C. Herlin : more (roger that)
2004-09-20 Bo C. Herlin : more
2004-09-18 Bo C. Herlin : renamed Info to Opts
2004-09-15 Bo C. Herlin : major rewrite, started using up-values and a kind \
of template for types
2004-09-14 Bo C. Herlin : added Patterns section
2004-09-13 Bo C. Herlin : added some use of Chord's and Melody's
2004-09-12 Bo C. Herlin : added use of Common.m's Duration/Info-things
2004-09-11 Bo C. Herlin : added use of Note.m's Chord- and Melody-types
2004-09-02 Bo C. Herlin : changed all MidiData*Value* to Data*Value* and \
MidiTie to DataTie, and all *Voice* to *Melody*
2004-08-23 Bo C. Herlin : i dont remeber, i dont recall 
2004-08-19 Bo C. Herlin : moved MidiPlay to a package of its own
2004-08-17 Bo C. Herlin : added Midi(Add|Get|Rem|Set)(Chords|Voices), \
modified MidiToSound and added MidiPlay, added MidiOfSilence and \
MidiPitchShift
2004-08-15 Bo C. Herlin : dropped the voice-nr from shape voice and chord, \
renamed MidiAddEOT to MidiFixEOT and MidiNormalizeNoteOff to MidiFixNoteOff
2004-08-14 Bo C. Herlin : added MidiSeq and MidiPar
2004-08-13 Bo C. Herlin : yet another rest/tie scheme, now with \
MidiDataAnyValue and MidiDataNoValue, MidiRest* is removed
2004-08-13 Bo C. Herlin : added Midi(Add|Get|Rem|Set)(Notes|QPM), enamed \
MidiEqualizeEOT to MidiAddEOT
2004-08-11 Bo C. Herlin : added SoundSetDuration to be used in MidiToSound
2004-08-10 Bo C. Herlin : removed call to MidiAddEOT, added SoundPitchShift
2004-08-09 Bo C. Herlin : minor changes to reflect the code. 
2004-08-08 Bo C. Herlin : added this new state-thing 
2004-08-04 Bo C. Herlin : first release
2004-07-28 Bo C. Herlin : created\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Welcome", "Subtitle"],

Cell["\<\
Hi there! Welcome to Musica2. 
This is a randomly created notebook that sometimes also works as a testbench \
when I extend Musica2. I try to make everything in this notebook to work in \
every release, and even in the CVS at sourceforge.net.
If You find errors, please tell me about them.
If You miss anything, please tell me about it.
If You would like something changed, please tell me what it is.
If You have a contribution, please send it to me.
If You... I think You got the idea now...
Mail me at bo@gcab.net, or even better, post a message to a forum at \
http://sourceforge.net/forum/?group_id=90149.
And above all; Have Fun!\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Init", "Subtitle"],

Cell["\<\
A small example below uses a tiny part of the Audio package when \
creating a triangle sound.\
\>", "Text"],

Cell[BoxData[
    \(<< Graphics`Colors`\)], "Input",
  InitializationCell->True],

Cell["Im using some colors.", "Text"],

Cell[BoxData[
    \(<< Miscellaneous`Audio`\)], "Input",
  InitializationCell->True],

Cell["\<\
Load Musica2 which in turn will load each sub-package when \
needed.\
\>", "Text"],

Cell[BoxData[
    \(<< Musica2`\)], "Input",
  InitializationCell->True],

Cell["Set DataFolder to the folder containing the testfiles.", "Text"],

Cell[BoxData[
    \(\(DataFolder = "\<Musica2/Documentation/Data/\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(\(\(cor := DataFolder <> "\<cor.mid\>"\) \)\(;\)\( (*\ 2.9  kb, \ 
      J . S . Bach, \ bwv\ 323, \ choral, \ Holy, \ 
      holy, \ \(\(holy\)\(.\)\)\ *) \)\(\[IndentingNewLine]\)\(\(fug := 
        DataFolder <> "\<fug.mid\>"\) \)\(;\)\( (*\ 6.1  kb, \ 
      J . S . Bach, \ bwv\ 846  b, \ fugue\ 1\ in\ C\ major, \ 
      wtc1\ *) \)\(\[IndentingNewLine]\)\(\(cun := 
        DataFolder <> "\<cun.mid\>"\) \)\(;\)\( (*\ 6.4  kb, \ 
      J . S . Bach, \ bwv\ 1080  a, \ contrapunctus\ 1, \ 
      cunst\ die\ fugue\ *) \)\(\[IndentingNewLine]\)\(\(pre := 
        DataFolder <> "\<pre.mid\>"\) \)\(;\)\( (*\ 8.9  kb, \ 
      J . S . Bach, \ bwv\ 847  a, \ preludium\ 2\ in\ C\ minor, \ 
      wtc1\ *) \)\)\)], "Input",
  InitializationCell->True],

Cell["Set MidiTestFile to the file to apply the tests to.", "Text"],

Cell[BoxData[{
    \(\(MidiTestFile := cor;\)\), "\[IndentingNewLine]", 
    \(\(MidiTestFileList := {cor, fug, cun, pre};\)\)}], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Mini-tour", "Subtitle"],

Cell["Read from a SMF (StandardMidiFile).", "Text"],

Cell[BoxData[
    \(mid = Import[MidiTestFile, Midi]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Timing[Play2[mid]]\)], "Input"],

Cell["Write to a SMF.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.mid\>", mid]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mini-tour step by step", "Subtitle"],

Cell["Read from a SMF.", "Text"],

Cell[BoxData[
    \(mid = Import[MidiTestFile, Midi]\)], "Input"],

Cell["Set time-unit to second instead of tick.", "Text"],

Cell[BoxData[
    \(mid = Midi[mid, TimeUnit \[Rule] Second]\)], "Input"],

Cell["Get all tracks.", "Text"],

Cell[BoxData[
    \(trk = Track[mid]\)], "Input"],

Cell["Convert each track to counterpoint.", "Text"],

Cell[BoxData[
    \(cpt = Counterpoint /@ trk\)], "Input"],

Cell["Get the melodies in each counterpoint.", "Text"],

Cell[BoxData[
    \(mel = Melody /@ cpt\)], "Input"],

Cell["Flatten it and get the ones that are non-empty.", "Text"],

Cell[BoxData[
    \(mel = Select[Flatten[mel], \((0 < Length[#])\) &]\)], "Input"],

Cell["Convert each melody to a snippet.", "Text"],

Cell[BoxData[
    \(snp = Snippet /@ mel\)], "Input"],

Cell["Make a 4ch sound of them.", "Text"],

Cell[BoxData[
    \(Length[snd = Sound[snp]]\)], "Input"],

Cell["Mix it to two channels.", "Text"],

Cell[BoxData[
    \(snd = Mix[snd, 2]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Show[snd]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Melody-Play2-Export example", "Subtitle"],

Cell["\<\
Create a random diatonic melody. The Note-constructor used take \
{duration,{pitchcode,velocity}} as parameter.\
\>", "Text"],

Cell[BoxData[
    \(mel = 
      Melody[Table[
          Note[\[IndentingNewLine]{\[IndentingNewLine]Random[Integer, {1, 4}]/
                4, \[IndentingNewLine]{\[IndentingNewLine]Random[
                  Integer, {35, 41}], \[IndentingNewLine]Random[
                  Integer, {64, 
                    127}]\[IndentingNewLine]}\[IndentingNewLine]}\
\[IndentingNewLine]], {12}]]\)], "Input"],

Cell["\<\
The Scale constructor without arguments return a C-major scale.
Scales can be used as a function to convert from scale-step to \
pitch-code.\
\>", "Text"],

Cell["Diatonic to chromatic.", "Text"],

Cell[BoxData[
    \(mel = \(Scale[]\)[mel]\)], "Input"],

Cell["Plot it.", "Text"],

Cell[BoxData[
    \(NotePlot[mel, PitchCode]\)], "Input"],

Cell[BoxData[
    \(NotePlot[mel, Velocity]\)], "Input"],

Cell["Get the durations", "Text"],

Cell[BoxData[
    \(NoteDuration[mel]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Play2[mel]\)], "Input"],

Cell["\<\
Convert to midi-track and set midi-channel to 3 (zero-based).\
\>", \
"Text"],

Cell[BoxData[
    \(trk = Track[mel, MidiChannel \[Rule] 3]\)], "Input"],

Cell["Convert to midi (assuming we used sec as time-unit).", "Text"],

Cell[BoxData[
    \(mid = Midi[trk, TimeUnit \[Rule] Second]\)], "Input"],

Cell["Write to a SMF.", "Text"],

Cell[BoxData[
    \(Export["\<tmp.mid\>", mid]\)], "Input"],

Cell["Augment the durations by a ratio of 3/2", "Text"],

Cell[BoxData[
    \(mel = Map[3  #/2 &, mel, NoteDuration]\)], "Input"],

Cell["Play it.", "Text"],

Cell[BoxData[
    \(Play2[mel]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Scale", "Subtitle"],

Cell["Different ways to construct a scale.", "Text"],

Cell["\<\
The first parameter is the number of sharps/flats as a \
positive/negative number. The second is the mode which is a number 0 to 6 \
representing the scale-step the scale starts on, or one of {ModeAeolian, \
ModeDorian, ModeIonian, ModeLocrian, ModeLydian, ModeMajor, ModeMinor, \
ModeMixolydian, ModePhrygian}. The pitch-codes are always positive. The \
number of sharps/flats are mod 12.\
\>", "Text"],

Cell[BoxData[
    \(Data[Scale[3, ModeMajor]]\)], "Input"],

Cell[BoxData[
    \(Data[Scale[\(-6\), ModeMixolydian]]\)], "Input"],

Cell[BoxData[
    \(Data[Scale[6, ModeMixolydian]]\)], "Input"],

Cell["\<\
Scale[], with no parameter, is C-major scale, same as \
Scale[0,ModeMajor]\
\>", "Text"],

Cell[BoxData[
    \(Data[Scale[]]\)], "Input"],

Cell["\<\
Giving only one parameter to Scale[n] (number of sharps/flats) will \
return a scale that differ in only one scale-step from Scale[n-1] and \
Scale[n+1] and may therefore result in a scale with negative pitch-codes. The \
number of sharps/flats are NOT mod 12.\
\>", "Text"],

Cell["Compare...", "Text"],

Cell[BoxData[
    \(Data[Scale[3]]\)], "Input"],

Cell["...with...", "Text"],

Cell[BoxData[
    \(Data[Scale[4]]\)], "Input"],

Cell["...and...", "Text"],

Cell[BoxData[
    \(Data[Scale[\(-6\)]]\)], "Input"],

Cell["...with...", "Text"],

Cell[BoxData[
    \(Data[Scale[\(-5\)]]\)], "Input"],

Cell["\<\
Inverse gives the inverse of a scale and may contain the symbol \
DataAnyValue.\
\>", "Text"],

Cell[BoxData[
    \(Data[Scale[\(-5\)]]\)], "Input"],

Cell[BoxData[
    \(Data[Inverse[Scale[\(-5\)]]]\)], "Input"],

Cell[BoxData[
    \(Data[Inverse[Inverse[Scale[\(-5\)]]]]\)], "Input"],

Cell["\<\
Another example of inverse containing pitch-codes outside the \
octave.\
\>", "Text"],

Cell[BoxData[
    \(Data[Scale[1, 0]]\)], "Input"],

Cell[BoxData[
    \(Data[Inverse[Scale[1, 0]]]\)], "Input"],

Cell[BoxData[
    \(Data[Inverse[Inverse[Scale[1, 0]]]]\)], "Input"],

Cell["An easy way to look at the sizes of the steps of scale.", "Text"],

Cell[BoxData[
    \(ValuesToDeltas[PitchCode[Scale[1, 0]]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Tuning", "Subtitle"],

Cell["\<\
There is currently only one type of tuning, EqualTemperament, to \
which Tuning defaults to.\
\>", "Text"],

Cell[BoxData[
    \(Tuning\)], "Input"],

Cell["\<\
The object has four members: \
{{FrequencyRef,FrequencyOctave},{PitchCodeRef, PitchCodeOctave}}\
\>", "Text"],

Cell[BoxData[
    \(\({#, Tuning[\([#]\)]} &\) /@ Members[EqualTemperament] // 
      ColumnForm\)], "Input"],

Cell["Tuning is by default the same as:", "Text"],

Cell[BoxData[
    \(EqualTemperament[{{440, 2}, {69, 12}}]\)], "Input"],

Cell["You can easily create another kind of eq-tuning, :", "Text"],

Cell[BoxData[
    \(tun = EqualTemperament[{{440, 3}, {69, 19}}]\)], "Input"],

Cell["\<\
The function TuningFunction takes a tuning object and returns a \
function for tuning. The second parameter specifies if the inverse function \
is to be returned, and if omitted defaults to False.\
\>", "Text"],

Cell[BoxData[
    \(\(tff = TuningFunction[tun, False];\)\)], "Input"],

Cell[BoxData[
    \(tff[69]\)], "Input"],

Cell[BoxData[
    \(\(tft = TuningFunction[tun, True];\)\)], "Input"],

Cell[BoxData[
    \(tft[%%]\)], "Input"],

Cell["You can also use the tuning-object as a function directly:", "Text"],

Cell[BoxData[
    \(tun[69]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["FigBass", "Subtitle"],

Cell["\<\
FigBass is almost like a figured-bass-chord, but without duration \
and velocity.\
\>", "Text"],

Cell["FigBass has three members: {Octave,{Bass,Code}}", "Text"],

Cell[BoxData[
    \(FigBass[{12, {40, 145}}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell["Octave can also be \[Infinity]", "Text"],

Cell[BoxData[
    \(FigBass[{\[Infinity], {40, 145}}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Intervals", "Subtitle"],

Cell["Intervals is an interval-vector.", "Text"],

Cell["Intervals has two members: {Octave, Content}", "Text"],

Cell[BoxData[
    \(Content[Intervals[Chord[{0, 4, 7}]]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["ThirdStack", "Subtitle"],

Cell["\<\
ThirdStack is another way of coding chords. No duration or \
velocity.\
\>", "Text"],

Cell["Intervals has three members: {Base, {Bass, Code}}", "Text"],

Cell[BoxData[
    \(PitchCode[ThirdStack[{{3, 4}, {40, 5}}]]\)], "Input"],

Cell["You can use another base than {3,4} which is default.", "Text"],

Cell["ThirdStack[i] is the same as ThirdStack[{{3,4},{0,i}}].", "Text"],

Cell[BoxData[
    \(\(PitchCode[ThirdStack[#]] &\) /@ Range[10] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(\(Content[Intervals[ThirdStack[#], Octave \[Rule] 12]] &\) /@ 
        Range[10] // ColumnForm\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Spectrum", "Subtitle"],

Cell["Spectrum contains Tones.", "Text"],

Cell["A Tone has three members: {Frequency, {Amplitude, Phase}}", "Text"],

Cell["\<\
Conversion from Snippet to Spectrum use Fourier, while Spectrum to \
Snippet currently use a bank of sines.\
\>", "Text"],

Cell[BoxData[
    \(spk = Spectrum[Snippet[Note[60]]]\)], "Input"],

Cell[BoxData[
    \(Max[Amplitude[spk]]\)], "Input"],

Cell[BoxData[
    \(spk = Select[spk, %*0.9 < Amplitude[#] &]\)], "Input"],

Cell[BoxData[
    \(Data[spk]\)], "Input"],

Cell[BoxData[
    \(Tuning[60] // N\)], "Input"],

Cell[BoxData[
    \(snp = Snippet[spk]\)], "Input"],

Cell[BoxData[
    \(Show[Sound[snp]]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Constructors that convert (some of them...)", "Subtitle"],

Cell["\<\
There are many conversion-constructors in Musica2. Here are some.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell["Init", "Subsubtitle",
  FontSize->18],

Cell[BoxData[
    \(not = Note[60]\)], "Input"],

Cell[BoxData[
    \(mel = Melody[{61, 62, 63}]\)], "Input"],

Cell[BoxData[
    \(cho = Chord[{60, 64, 67}]\)], "Input"],

Cell[BoxData[
    \(cpt = Counterpoint[{mel, mel}]\)], "Input"],

Cell[BoxData[
    \(prg = Progression[{cho, cho}]\)], "Input"],

Cell[BoxData[
    \(evt = Event[{1, {2, 3}}]\)], "Input"],

Cell[BoxData[
    \(trk = 
      Track[{Event[{0, {EventTypeNoteOn, {0, 60, 64}}}], 
          Event[{960, {EventTypeNoteOff, {0, 60, 64}}}]}]\)], "Input"],

Cell[BoxData[
    \(mid = Midi[{trk, trk}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
  "Conve",
  StyleBox["rt",
    FontSize->18]
}], "Subsubtitle",
  FontSize->18],

Cell[CellGroupData[{

Cell["Chord", "Subsection"],

Cell[BoxData[
    \(Chord[cpt]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Chord[mel]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Chord[not]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Chord[{not, not}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Chord[prg]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Chord[mid]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Chord[trk]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Counterpoint", "Subsection"],

Cell[BoxData[
    \(Counterpoint[cho]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Counterpoint[mel]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Counterpoint[{mel, mel}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Counterpoint[prg]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Counterpoint[mid]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Counterpoint[trk]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Event", "Subsection"],

Cell[BoxData[
    \(Event[cho]\)], "Input"],

Cell[BoxData[
    \(Map[EventData, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Event[cpt]\)], "Input"],

Cell[BoxData[
    \(Map[EventData, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Event[mel]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"],

Cell[BoxData[
    \(Event[not]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"],

Cell[BoxData[
    \(Event[prg]\)], "Input"],

Cell[BoxData[
    \(Map[EventData, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Event[mid]\)], "Input"],

Cell[BoxData[
    \(Map[EventData, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Event[trk]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Melody", "Subsection"],

Cell[BoxData[
    \(Melody[cho]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Melody[cpt]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Melody[not]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Melody[{not, not}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Melody[prg]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Melody[mid]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Melody[trk]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Midi", "Subsection"],

Cell[BoxData[
    \(Midi[cho]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[cpt]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[mel]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[not]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[prg]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[evt]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Midi[trk]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Note", "Subsection"],

Cell[BoxData[
    \(Note[cho]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Note[cpt]\)], "Input"],

Cell[BoxData[
    \(Map[PitchCode, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Note[mel]\)], "Input"],

Cell[BoxData[
    \(PitchCode /@ %\)], "Input"],

Cell[BoxData[
    \(Note[prg]\)], "Input"],

Cell[BoxData[
    \(Map[PitchCode, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Note[mid]\)], "Input"],

Cell[BoxData[
    \(Map[PitchCode, %, {2}]\)], "Input"],

Cell[BoxData[
    \(Note[trk]\)], "Input"],

Cell[BoxData[
    \(Map[PitchCode, %, {2}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Progression", "Subsection"],

Cell[BoxData[
    \(Progression[cho]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Progression[{cho, cho}]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Progression[cpt]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Progression[mel]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Progression[mid]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"],

Cell[BoxData[
    \(Progression[trk]\)], "Input"],

Cell[BoxData[
    \(PitchCode[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Snippet", "Subsection"],

Cell[BoxData[
    \(Snippet[cho]\)], "Input"],

Cell[BoxData[
    \(Snippet[cpt]\)], "Input"],

Cell[BoxData[
    \(Snippet[mel]\)], "Input"],

Cell[BoxData[
    \(Snippet[not]\)], "Input"],

Cell[BoxData[
    \(Snippet[prg]\)], "Input"],

Cell[BoxData[
    \(Snippet[Sound[%]]\)], "Input"],

Cell[BoxData[
    \(Snippet[mid]\)], "Input"],

Cell[BoxData[
    \(Snippet[trk]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Sound", "Subsection"],

Cell[BoxData[
    \(Sound[cho]\)], "Input"],

Cell[BoxData[
    \(Sound[cpt]\)], "Input"],

Cell[BoxData[
    \(Sound[mel]\)], "Input"],

Cell[BoxData[
    \(Sound[not]\)], "Input"],

Cell[BoxData[
    \(Sound[prg]\)], "Input"],

Cell[BoxData[
    \(Sound[snp]\)], "Input"],

Cell[BoxData[
    \(Sound[{snp, snp}]\)], "Input"],

Cell[BoxData[
    \(Sound[mid]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Track", "Subsection"],

Cell[BoxData[
    \(Track[cho]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"],

Cell[BoxData[
    \(Track[cpt]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"],

Cell[BoxData[
    \(Track[mel]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Track[not]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Track[prg]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"],

Cell[BoxData[
    \(Track[evt]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Track[{evt, evt}]\)], "Input"],

Cell[BoxData[
    \(EventData[%]\)], "Input"],

Cell[BoxData[
    \(Track[mid]\)], "Input"],

Cell[BoxData[
    \(EventData /@ %\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Behind the scenes", "Subsubtitle",
  FontSize->18],

Cell["\<\
The non-trivial conversion-constructors are:
  Counterpoint[_Track]
  Counterpoint[_Progression]
  Progression[_Counterpoint]
  Snippet[_Melody]
The rest of the conversion-constructors are quite simple and depend on the \
non-trivial ones.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Mix-Par-Seq", "Subtitle"],

Cell["Oh yes, we have Par, Seq and Mix to add to the list!", "Text"],

Cell[CellGroupData[{

Cell["Init", "Subsubtitle",
  FontSize->18],

Cell[BoxData[
    \(not = Note[60]\)], "Input"],

Cell[BoxData[
    \(mel = Melody[{61, 62, 63}]\)], "Input"],

Cell[BoxData[
    \(cho = Chord[{60, 64, 67}]\)], "Input"],

Cell[BoxData[
    \(cpt = Counterpoint[{mel, mel}]\)], "Input"],

Cell[BoxData[
    \(prg = Progression[{cho, cho}]\)], "Input"],

Cell[BoxData[
    \(evt = Event[{1, {2, 3}}]\)], "Input"],

Cell[BoxData[
    \(trk = 
      Track[{Event[{0, {EventTypeNoteOn, {0, 60, 64}}}], 
          Event[{960, {EventTypeNoteOff, {0, 60, 64}}}]}]\)], "Input"],

Cell[BoxData[
    \(mid = Midi[{trk, trk}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mix", "Subsubtitle",
  FontSize->18],

Cell[BoxData[
    \(Mix[{mid, mid}]\)], "Input"],

Cell[BoxData[
    \(Data[%] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(Mix[{trk, trk}]\)], "Input"],

Cell[BoxData[
    \(Data[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Par", "Subsubtitle",
  FontSize->18],

Cell[BoxData[
    \(Par[{cho, cho}]\)], "Input"],

Cell[BoxData[
    \(Par[{cpt, cpt}]\)], "Input"],

Cell[BoxData[
    \(Par[{mel, mel}]\)], "Input"],

Cell[BoxData[
    \(Par[{mid, mid}]\)], "Input"],

Cell[BoxData[
    \(Data[%]\)], "Input"],

Cell[BoxData[
    \(Par[{not, not}]\)], "Input"],

Cell[BoxData[
    \(Par[{prg, prg}]\)], "Input"],

Cell[BoxData[
    \(Par[{trk, trk}]\)], "Input"],

Cell[BoxData[
    \(Data[%]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Seq", "Subsubtitle",
  FontSize->18],

Cell[BoxData[
    \(Seq[{cho, cho}]\)], "Input"],

Cell[BoxData[
    \(Seq[{cpt, cpt}]\)], "Input"],

Cell[BoxData[
    \(Seq[{mel, mel}]\)], "Input"],

Cell[BoxData[
    \(Seq[{not, not}]\)], "Input"],

Cell[BoxData[
    \(Seq[{mid, mid}]\)], "Input"],

Cell[BoxData[
    \(Data[%] // ColumnForm\)], "Input"],

Cell[BoxData[
    \(Seq[{prg, prg}]\)], "Input"],

Cell[BoxData[
    \(Seq[{trk, trk}]\)], "Input"],

Cell[BoxData[
    \(Data[%]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern (as in design)", "Subtitle"],

Cell["\<\
I have tried to minimize the number of new symbols by applying a \
pattern to each object-type in Musica2.\
\>", "Text"],

Cell["\<\
Most types in Musica2 is either a container or an element whithin a \
container (or both). Examples of this in Musica2 is
  Midi that contains Track's that contains Event's
  TempoTrack that contains Tempo's
  Progression that contains Chord's that contains Note's
  Counterpoint that contains Melody's that contains Note's
  Sound that contains Snippet's\
\>", "Text"],

Cell["\<\
Instead of having a Midi-object with a list of Track-objects I \
wanted the Midi-object to have no other Head's on its internal data than \
List. This since other Head's sometimes mess things up (i must admit, it may \
be because of my bad programming). But having custom Head's its a handy \
thing, so I want to have it both ways, at least pretend I have it.\
\>", \
"Text"],

Cell["\<\
This is where the design-pattern comes in. I have written code than \
generates the code needed for this dual-face to appear.\
\>", "Text"],

Cell["\<\
The best way to describe the pattern used is probably by giving an \
example. I was thinking of a Tree-Branch-Leaf example, but since Tree is \
already taken I decided to use Bush instead. When I started typing Bush- I \
continued with War-Terrorist! Oops, a Freudian slip? Im not trying to make a \
political statement here, im not into politics. Im not into writing \
documentation either, but it is more fun using War-Terrorist than using \
Branch-Leaf. If you dont like it just consider it as a bad joke, which is \
really what it is.\
\>", "Text"],

Cell["\<\
Creating types like this is rather easy (if you stick to some rules \
on the pattern for the leaf element which I havent documented yet and \
probably never will, ok, dont use \
BlankSequence,BlankNullSequence,Alternatives and then some...nested List's is \
ok though).\
\>", "Text"],

Cell["Always create the types in leaf to tree order.", "Text"],

Cell["\<\
Ok, lets create Bush that contains War's that contains \
Terrorist's\
\>", "Text"],

Cell[BoxData[
    \(CreateElement[
      Terrorist, {Muslim : \((True | False)\), Bombs_Integer}]\)], "Input"],

Cell[TextData[{
  "Dont bother about the ",
  Cell[BoxData[
      \(General::"spell1"\)], "Message"],
  " message about TerroristQ and Terrorist, its OK."
}], "Text"],

Cell[BoxData[
    \(CreateContainer[War, Terrorist]\)], "Input"],

Cell[BoxData[
    \(CreateContainer[Bush, War]\)], "Input"],

Cell["\<\
We now have a load of code generated for us that will make it \
easier to handle these new types.\
\>", "Text"],

Cell["Code for \"reflection\":", "Text"],

Cell[BoxData[
    \(Members[Terrorist]\)], "Input"],

Cell[BoxData[
    \(\(Pos[Terrorist, #] &\) /@ %\)], "Input"],

Cell[BoxData[
    \(ContainerQ /@ {Bush, War, Terrorist}\)], "Input"],

Cell[BoxData[
    \(ElementType /@ {Bush, War}\)], "Input"],

Cell["All constructors take optional parameters.", "Text"],

Cell["\<\
Default-constructors for all types take the data as first \
parameter.\
\>", "Text"],

Cell[BoxData[
    \(tn = {t = Terrorist[{True, 0}, name \[Rule] "\<john\>"], 
        Terrorist[{False, 1}, age \[Rule] 12]}\)], "Input"],

Cell["\<\
Extra constructors for a container takes one or a list of elements.\
\
\>", "Text"],

Cell[BoxData[
    \(w = War[tn]\)], "Input"],

Cell[BoxData[
    \(b = 
      Bush[{w, War[tn, no \[Rule] good]}, IQ \[Rule] DataNoValue]\)], "Input"],

Cell["\<\
Then there are som constructors for elements that take a container \
as parameter.\
\>", "Text"],

Cell[BoxData[
    \(War[b]\)], "Input"],

Cell[BoxData[
    \(Terrorist[w]\)], "Input"],

Cell[BoxData[
    \(Terrorist[b]\)], "Input"],

Cell["\<\
Each type has two parts, Opts and Data. Data is a \"raw\" format:\
\
\>", "Text"],

Cell[BoxData[
    \(Opts /@ {w, b, t} // ColumnForm\)], "Input"],

Cell["\<\
The elements are simply stored in a list, one item for each \
element.
Each element is a two item list {Opts,Data}, but if an element has no Opts it \
is just Data without the enclosing list.\
\>", "Text"],

Cell[BoxData[
    \(Data /@ {w, b, t} // ColumnForm\)], "Input"],

Cell["\<\
The \"default-constructor\" for all types thus works like \
this:\
\>", "Text"],

Cell[BoxData[
    \(\(\(#[\([0]\)]\)[Data[#], Sequence @@ Opts[#]] &\) /@ {b, w, 
        t}\)], "Input"],

Cell["\<\
But we usually never use this \"raw\" Data, only the Opts. Instead \
we use the members in various ways:\
\>", "Text"],

Cell[BoxData[
    \(Bombs /@ {b, w, t} // ColumnForm\)], "Input"],

Cell["Tests:", "Text"],

Cell[BoxData[
    \(\({BushQ[#], WarQ[#], TerroristQ[#]} &\) /@ {b, w, t} // 
      ColumnForm\)], "Input"],

Cell["\<\
(Im not so sure if the TerroristQ-test is a valid test in \
reality...)\
\>", "Text"],

Cell[BoxData[
    \(\({\(DataQ[Bush]\)[Data[#]], \(DataQ[War]\)[
              Data[#]], \(DataQ[Terrorist]\)[Data[#]]} &\) /@ {b, w, t} // 
      ColumnForm\)], "Input"],

Cell["Map and many other List-functions also works on Containers.", "Text"],

Cell["Append[_Container,_Element]", "Text"],

Cell[BoxData[
    \(Append[b, w]\)], "Input"],

Cell["Delete[_Container,n__]", "Text"],

Cell[BoxData[
    \(Delete[b, \(-1\)]\)], "Input"],

Cell["Drop[_Container,n_]", "Text"],

Cell[BoxData[
    \(Drop[b, 1]\)], "Input"],

Cell["\<\
Extract[_Container,n_Integer] calls \
Part[_Container,n_Integer]\
\>", "Text"],

Cell[BoxData[
    \(Extract[b, 1]\)], "Input"],

Cell["First[_Container]", "Text"],

Cell[BoxData[
    \(First[b]\)], "Input"],

Cell["Insert[_Container,_Element,n_Integer]", "Text"],

Cell[BoxData[
    \(Insert[b, w, 2]\)], "Input"],

Cell["Last[_Container]", "Text"],

Cell[BoxData[
    \(Last[b]\)], "Input"],

Cell["Length[_Container]", "Text"],

Cell[BoxData[
    \(Length[b]\)], "Input"],

Cell["Map[f_,_Container]", "Text"],

Cell[BoxData[
    \(Opts /@ b\)], "Input"],

Cell["\<\
If the result from Map is a list if elements a container is \
returned\
\>", "Text"],

Cell[BoxData[
    \(\(# &\) /@ b\)], "Input"],

Cell["The same goes for MapIndexed[f_,_Container]", "Text"],

Cell[BoxData[
    \(MapIndexed[# &, b]\)], "Input"],

Cell["Most[_Container]", "Text"],

Cell[BoxData[
    \(Most[b]\)], "Input"],

Cell["Part[_Container,n_Integer]", "Text"],

Cell[BoxData[
    \(b[\([1]\)]\)], "Input"],

Cell["Part[_Container,n_Integer,m__Integer]", "Text"],

Cell[BoxData[
    \(b[\([1, 2]\)]\)], "Input"],

Cell["Prepend[_Container,_Element]", "Text"],

Cell[BoxData[
    \(Prepend[b, w]\)], "Input"],

Cell["ReplacePart[_Container,_Element,n_Integer]", "Text"],

Cell[BoxData[
    \(ReplacePart[b, War[{}], 1]\)], "Input"],

Cell["Rest[_Container]", "Text"],

Cell[BoxData[
    \(Rest[b]\)], "Input"],

Cell["Scan[f_,_Container]", "Text"],

Cell[BoxData[
    \(Scan[Print, b]\)], "Input"],

Cell["Select[_Container,f_]", "Text"],

Cell[BoxData[
    \(Select[b, \((Opts[#] =!= {})\) &]\)], "Input"],

Cell["Take[_Container,n_]", "Text"],

Cell[BoxData[
    \(Take[b, 1]\)], "Input"],

Cell["Some, like Map, are extended.", "Text"],

Cell["\<\
Map[f_,_Container,s_Symbol] and MapIndexed[f_, _Container, \
s_Symbol] maps through all elements (leafs) and applys f to the leaf's member \
and the reconstructs the container again.\
\>", "Text"],

Cell[BoxData[
    \(Bombs /@ b\)], "Input"],

Cell[BoxData[
    \(Map[2 + # &, b, Bombs]\)], "Input"],

Cell[BoxData[
    \(Bombs /@ %\)], "Input"],

Cell["\<\
Part[_Container,s_Symbol] and Part[_Container, n_Integer, \
m___Integer, s_Symbol] works like expected\
\>", "Text"],

Cell[BoxData[
    \(b[\([Bombs]\)]\)], "Input"],

Cell[BoxData[
    \(b[\([1, Bombs]\)]\)], "Input"],

Cell[BoxData[
    \(b[\([1, 2, Bombs]\)]\)], "Input"],

Cell["\<\
Until I write more documentation the best way to find out about all \
List-functions for Containers is to look inside Type.m\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notes on Midi.m", "Subtitle"],

Cell["Midi.m depends on Note.m", "Text"],

Cell["\<\
Midi contains Track contains Event with members \
{EventTime_,{EventType_,EventData_}}.\
\>", "Text"],

Cell["TempoTrack contains Tempo with members {TempoTime_,QPM_}.", "Text"],

Cell["\<\
Tidy[_Track] sorts the events and makes sure that there is exactly \
one EOT in the track.
Tidy[_Midi] calls Tidy for each track and sets them to the same length.
Tidy[_TempoTrack] sorts the tempos for the tempo-track.\
\>", "Text"],

Cell["\<\
Conversion- and extra- constructors:
  Event[_Tempo] does the hard work
  Midi[_Midi, opts___] is used to change time-unit and uses TempoTrack and \
TempoFunction and then some
  Tempo[_Event] does the hard work
  TempoTrack[_Track] uses Tempo[_Event] and TempoTrack[{__Tempo}]
  Track[_TempoTrack] uses Event[_Tempo] and Track[{__Event}]\
\>", "Text"],

Cell["\<\
Duration functions:
  Duration[_Midi] uses EventTime[_Event] and Max
  Duration[_Track] uses Duration[_Track] and Max\
\>", "Text"],

Cell["\<\
Play2 functions:
  Play2[_Midi]
  Play2[_Track]\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notes on Note.m", "Subtitle"],

Cell["Note.m depends on Sound.m", "Text"],

Cell["\<\
Counterpoint contains Melody contains Note with members \
{NoteDuration_, PcV:{PitchCode_,Velocity_}}.
  NoteDuration, not Duration, is a member of Note.\
\>", "Text"],

Cell["\<\
Progression contains Chord contains Note with members as \
above.\
\>", "Text"],

Cell["Scale with members {Octave_Integer, Content:{__}}.", "Text"],

Cell["\<\
Duration functions:
  Duration[_Chord], the duration is stored as NoteDuration in its Opts-part \
rather in its Data-part.
  Duration[_Counterpoint] is the max of the melodies duration.
  Duration[_Melody] is the sum of the notes duration.
  Duration[_Note] returns NoteDuration.
  Duration[_Progression] is the sum of the chords duration.\
\>", "Text"],

Cell["\<\
Conversion-and extra-constructors:
  Chord[{__}] takes only PitchCodes and uses NoteDuration and Velocity from \
Options[Note]  
  Melody[{__}] takes only PitchCodes and uses NoteDuration and Velocity from \
Options[Note]  
  Note[_] takes only PitchCode and uses NoteDuration and Velocity from \
Options[Note]\
\>", "Text"],

Cell["\<\
Inverse[_Scale] returns an \"inverted\" scale which may contain the \
symbol DataAnyValue.\
\>", "Text"],

Cell["\<\
Play2 functions:
  Play2[_Chord]
  Play2[_Counterpoint]
  Play2[_Melody]
  Play2[_Note]
  Play2[_Progression]  \
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notes on Sound.m", "Subtitle"],

Cell["\<\
Since Sound is a type that I don't own, the underlying logic for it \
is somewhat messy, but it seem like Sound now acts as the rest of the \
Containers.\
\>", "Text"],

Cell["\<\
Sound contains Snippet with members \
{SoundType:(SampledSoundFunction|SampledSoundList), Content_, \
SampleRate_Integer, SampleCount_Integer}.\
\>", "Text"],

Cell["\<\
Tidy[_Sound] makes sure even a monophonic Sound has a List \
internally.\
\>", "Text"],

Cell["\<\
Duration functions:
  Duration[_Snippet]
  Duration[_Sound]\
\>", "Text"],

Cell["\<\
Play2 functions:
  Play2[_Snippet]
  Play2[_Sound] calls Show after mixing it to two channels\
\>", "Text"]
}, Closed]]
}, Open  ]]
},
FrontEndVersion->"5.0 for X",
ScreenRectangle->{{0, 1600}, {0, 1200}},
AutoGeneratedPackage->Automatic,
WindowSize->{736, 1124},
WindowMargins->{{0, Automatic}, {Automatic, 17}},
Magnification->1,
StyleDefinitions -> "Default.nb"
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 40, 1, 79, "Title"],
Cell[1819, 56, 53, 0, 32, "Text"],

Cell[CellGroupData[{
Cell[1897, 60, 27, 0, 51, "Subtitle"],
Cell[1927, 62, 720, 16, 284, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[2684, 83, 27, 0, 53, "Subtitle"],
Cell[2714, 85, 1963, 36, 554, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[4714, 126, 27, 0, 53, "Subtitle"],
Cell[4744, 128, 658, 13, 194, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[5439, 146, 24, 0, 53, "Subtitle"],
Cell[5466, 148, 117, 3, 32, "Text"],
Cell[5586, 153, 80, 2, 27, "Input",
  InitializationCell->True],
Cell[5669, 157, 37, 0, 32, "Text"],
Cell[5709, 159, 84, 2, 27, "Input",
  InitializationCell->True],
Cell[5796, 163, 92, 3, 32, "Text"],
Cell[5891, 168, 72, 2, 27, "Input",
  InitializationCell->True],
Cell[5966, 172, 70, 0, 32, "Text"],
Cell[6039, 174, 112, 2, 27, "Input",
  InitializationCell->True],
Cell[6154, 178, 775, 13, 139, "Input",
  InitializationCell->True],
Cell[6932, 193, 67, 0, 32, "Text"],
Cell[7002, 195, 166, 3, 43, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[7205, 203, 29, 0, 53, "Subtitle"],
Cell[7237, 205, 51, 0, 32, "Text"],
Cell[7291, 207, 65, 1, 27, "Input"],
Cell[7359, 210, 24, 0, 32, "Text"],
Cell[7386, 212, 51, 1, 27, "Input"],
Cell[7440, 215, 31, 0, 32, "Text"],
Cell[7474, 217, 59, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[7570, 223, 42, 0, 53, "Subtitle"],
Cell[7615, 225, 32, 0, 32, "Text"],
Cell[7650, 227, 65, 1, 27, "Input"],
Cell[7718, 230, 56, 0, 32, "Text"],
Cell[7777, 232, 73, 1, 27, "Input"],
Cell[7853, 235, 31, 0, 32, "Text"],
Cell[7887, 237, 49, 1, 27, "Input"],
Cell[7939, 240, 51, 0, 32, "Text"],
Cell[7993, 242, 58, 1, 27, "Input"],
Cell[8054, 245, 54, 0, 32, "Text"],
Cell[8111, 247, 52, 1, 27, "Input"],
Cell[8166, 250, 63, 0, 32, "Text"],
Cell[8232, 252, 82, 1, 27, "Input"],
Cell[8317, 255, 49, 0, 32, "Text"],
Cell[8369, 257, 53, 1, 27, "Input"],
Cell[8425, 260, 41, 0, 32, "Text"],
Cell[8469, 262, 57, 1, 27, "Input"],
Cell[8529, 265, 39, 0, 32, "Text"],
Cell[8571, 267, 50, 1, 27, "Input"],
Cell[8624, 270, 24, 0, 32, "Text"],
Cell[8651, 272, 42, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[8730, 278, 47, 0, 53, "Subtitle"],
Cell[8780, 280, 135, 3, 32, "Text"],
Cell[8918, 285, 398, 8, 155, "Input"],
Cell[9319, 295, 164, 4, 50, "Text"],
Cell[9486, 301, 38, 0, 32, "Text"],
Cell[9527, 303, 55, 1, 27, "Input"],
Cell[9585, 306, 24, 0, 32, "Text"],
Cell[9612, 308, 57, 1, 27, "Input"],
Cell[9672, 311, 56, 1, 27, "Input"],
Cell[9731, 314, 33, 0, 32, "Text"],
Cell[9767, 316, 50, 1, 27, "Input"],
Cell[9820, 319, 24, 0, 32, "Text"],
Cell[9847, 321, 43, 1, 27, "Input"],
Cell[9893, 324, 87, 3, 32, "Text"],
Cell[9983, 329, 72, 1, 27, "Input"],
Cell[10058, 332, 68, 0, 32, "Text"],
Cell[10129, 334, 73, 1, 27, "Input"],
Cell[10205, 337, 31, 0, 32, "Text"],
Cell[10239, 339, 59, 1, 27, "Input"],
Cell[10301, 342, 55, 0, 32, "Text"],
Cell[10359, 344, 71, 1, 27, "Input"],
Cell[10433, 347, 24, 0, 32, "Text"],
Cell[10460, 349, 43, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[10540, 355, 25, 0, 53, "Subtitle"],
Cell[10568, 357, 52, 0, 32, "Text"],
Cell[10623, 359, 413, 7, 86, "Text"],
Cell[11039, 368, 58, 1, 27, "Input"],
Cell[11100, 371, 68, 1, 27, "Input"],
Cell[11171, 374, 63, 1, 27, "Input"],
Cell[11237, 377, 98, 3, 32, "Text"],
Cell[11338, 382, 46, 1, 27, "Input"],
Cell[11387, 385, 284, 5, 68, "Text"],
Cell[11674, 392, 26, 0, 32, "Text"],
Cell[11703, 394, 47, 1, 27, "Input"],
Cell[11753, 397, 26, 0, 32, "Text"],
Cell[11782, 399, 47, 1, 27, "Input"],
Cell[11832, 402, 25, 0, 32, "Text"],
Cell[11860, 404, 52, 1, 27, "Input"],
Cell[11915, 407, 26, 0, 32, "Text"],
Cell[11944, 409, 52, 1, 27, "Input"],
Cell[11999, 412, 103, 3, 32, "Text"],
Cell[12105, 417, 52, 1, 27, "Input"],
Cell[12160, 420, 61, 1, 27, "Input"],
Cell[12224, 423, 70, 1, 27, "Input"],
Cell[12297, 426, 95, 3, 32, "Text"],
Cell[12395, 431, 50, 1, 27, "Input"],
Cell[12448, 434, 59, 1, 27, "Input"],
Cell[12510, 437, 68, 1, 27, "Input"],
Cell[12581, 440, 71, 0, 32, "Text"],
Cell[12655, 442, 71, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[12763, 448, 26, 0, 53, "Subtitle"],
Cell[12792, 450, 116, 3, 32, "Text"],
Cell[12911, 455, 39, 1, 27, "Input"],
Cell[12953, 458, 119, 3, 32, "Text"],
Cell[13075, 463, 109, 2, 27, "Input"],
Cell[13187, 467, 49, 0, 32, "Text"],
Cell[13239, 469, 71, 1, 27, "Input"],
Cell[13313, 472, 66, 0, 32, "Text"],
Cell[13382, 474, 77, 1, 27, "Input"],
Cell[13462, 477, 220, 4, 50, "Text"],
Cell[13685, 483, 70, 1, 27, "Input"],
Cell[13758, 486, 40, 1, 27, "Input"],
Cell[13801, 489, 69, 1, 27, "Input"],
Cell[13873, 492, 40, 1, 27, "Input"],
Cell[13916, 495, 74, 0, 32, "Text"],
Cell[13993, 497, 40, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[14070, 503, 27, 0, 53, "Subtitle"],
Cell[14100, 505, 105, 3, 32, "Text"],
Cell[14208, 510, 63, 0, 32, "Text"],
Cell[14274, 512, 57, 1, 27, "Input"],
Cell[14334, 515, 45, 1, 27, "Input"],
Cell[14382, 518, 46, 0, 32, "Text"],
Cell[14431, 520, 66, 1, 27, "Input"],
Cell[14500, 523, 45, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[14582, 529, 29, 0, 53, "Subtitle"],
Cell[14614, 531, 48, 0, 32, "Text"],
Cell[14665, 533, 60, 0, 32, "Text"],
Cell[14728, 535, 69, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[14834, 541, 30, 0, 53, "Subtitle"],
Cell[14867, 543, 94, 3, 32, "Text"],
Cell[14964, 548, 65, 0, 32, "Text"],
Cell[15032, 550, 73, 1, 27, "Input"],
Cell[15108, 553, 69, 0, 32, "Text"],
Cell[15180, 555, 71, 0, 32, "Text"],
Cell[15254, 557, 90, 1, 27, "Input"],
Cell[15347, 560, 127, 2, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[15511, 567, 28, 0, 53, "Subtitle"],
Cell[15542, 569, 40, 0, 32, "Text"],
Cell[15585, 571, 73, 0, 32, "Text"],
Cell[15661, 573, 131, 3, 32, "Text"],
Cell[15795, 578, 66, 1, 27, "Input"],
Cell[15864, 581, 52, 1, 27, "Input"],
Cell[15919, 584, 74, 1, 27, "Input"],
Cell[15996, 587, 42, 1, 27, "Input"],
Cell[16041, 590, 48, 1, 27, "Input"],
Cell[16092, 593, 51, 1, 27, "Input"],
Cell[16146, 596, 49, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[16232, 602, 63, 0, 53, "Subtitle"],
Cell[16298, 604, 91, 3, 29, "Text"],

Cell[CellGroupData[{
Cell[16414, 611, 43, 1, 33, "Subsubtitle"],
Cell[16460, 614, 47, 1, 27, "Input"],
Cell[16510, 617, 59, 1, 27, "Input"],
Cell[16572, 620, 58, 1, 27, "Input"],
Cell[16633, 623, 63, 1, 27, "Input"],
Cell[16699, 626, 62, 1, 27, "Input"],
Cell[16764, 629, 57, 1, 27, "Input"],
Cell[16824, 632, 155, 3, 43, "Input"],
Cell[16982, 637, 55, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[17074, 643, 96, 5, 35, "Subsubtitle"],

Cell[CellGroupData[{
Cell[17195, 652, 27, 0, 38, "Subsection"],
Cell[17225, 654, 43, 1, 27, "Input"],
Cell[17271, 657, 47, 1, 27, "Input"],
Cell[17321, 660, 43, 1, 27, "Input"],
Cell[17367, 663, 47, 1, 27, "Input"],
Cell[17417, 666, 43, 1, 27, "Input"],
Cell[17463, 669, 45, 1, 27, "Input"],
Cell[17511, 672, 50, 1, 27, "Input"],
Cell[17564, 675, 45, 1, 27, "Input"],
Cell[17612, 678, 43, 1, 27, "Input"],
Cell[17658, 681, 47, 1, 27, "Input"],
Cell[17708, 684, 43, 1, 27, "Input"],
Cell[17754, 687, 47, 1, 27, "Input"],
Cell[17804, 690, 43, 1, 27, "Input"],
Cell[17850, 693, 47, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[17934, 699, 34, 0, 30, "Subsection"],
Cell[17971, 701, 50, 1, 27, "Input"],
Cell[18024, 704, 45, 1, 27, "Input"],
Cell[18072, 707, 50, 1, 27, "Input"],
Cell[18125, 710, 45, 1, 27, "Input"],
Cell[18173, 713, 57, 1, 27, "Input"],
Cell[18233, 716, 45, 1, 27, "Input"],
Cell[18281, 719, 50, 1, 27, "Input"],
Cell[18334, 722, 45, 1, 27, "Input"],
Cell[18382, 725, 50, 1, 27, "Input"],
Cell[18435, 728, 45, 1, 27, "Input"],
Cell[18483, 731, 50, 1, 27, "Input"],
Cell[18536, 734, 45, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[18618, 740, 27, 0, 30, "Subsection"],
Cell[18648, 742, 43, 1, 27, "Input"],
Cell[18694, 745, 55, 1, 27, "Input"],
Cell[18752, 748, 43, 1, 27, "Input"],
Cell[18798, 751, 55, 1, 27, "Input"],
Cell[18856, 754, 43, 1, 27, "Input"],
Cell[18902, 757, 47, 1, 27, "Input"],
Cell[18952, 760, 43, 1, 27, "Input"],
Cell[18998, 763, 47, 1, 27, "Input"],
Cell[19048, 766, 43, 1, 27, "Input"],
Cell[19094, 769, 55, 1, 27, "Input"],
Cell[19152, 772, 43, 1, 27, "Input"],
Cell[19198, 775, 55, 1, 27, "Input"],
Cell[19256, 778, 43, 1, 27, "Input"],
Cell[19302, 781, 47, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[19386, 787, 28, 0, 30, "Subsection"],
Cell[19417, 789, 44, 1, 27, "Input"],
Cell[19464, 792, 47, 1, 27, "Input"],
Cell[19514, 795, 44, 1, 27, "Input"],
Cell[19561, 798, 47, 1, 27, "Input"],
Cell[19611, 801, 44, 1, 27, "Input"],
Cell[19658, 804, 45, 1, 27, "Input"],
Cell[19706, 807, 51, 1, 27, "Input"],
Cell[19760, 810, 45, 1, 27, "Input"],
Cell[19808, 813, 44, 1, 27, "Input"],
Cell[19855, 816, 47, 1, 27, "Input"],
Cell[19905, 819, 44, 1, 27, "Input"],
Cell[19952, 822, 47, 1, 27, "Input"],
Cell[20002, 825, 44, 1, 27, "Input"],
Cell[20049, 828, 47, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[20133, 834, 26, 0, 30, "Subsection"],
Cell[20162, 836, 42, 1, 27, "Input"],
Cell[20207, 839, 45, 1, 27, "Input"],
Cell[20255, 842, 42, 1, 27, "Input"],
Cell[20300, 845, 45, 1, 27, "Input"],
Cell[20348, 848, 42, 1, 27, "Input"],
Cell[20393, 851, 45, 1, 27, "Input"],
Cell[20441, 854, 42, 1, 27, "Input"],
Cell[20486, 857, 45, 1, 27, "Input"],
Cell[20534, 860, 42, 1, 27, "Input"],
Cell[20579, 863, 45, 1, 27, "Input"],
Cell[20627, 866, 42, 1, 27, "Input"],
Cell[20672, 869, 45, 1, 27, "Input"],
Cell[20720, 872, 42, 1, 27, "Input"],
Cell[20765, 875, 45, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[20847, 881, 26, 0, 30, "Subsection"],
Cell[20876, 883, 42, 1, 27, "Input"],
Cell[20921, 886, 47, 1, 27, "Input"],
Cell[20971, 889, 42, 1, 27, "Input"],
Cell[21016, 892, 55, 1, 27, "Input"],
Cell[21074, 895, 42, 1, 27, "Input"],
Cell[21119, 898, 47, 1, 27, "Input"],
Cell[21169, 901, 42, 1, 27, "Input"],
Cell[21214, 904, 55, 1, 27, "Input"],
Cell[21272, 907, 42, 1, 27, "Input"],
Cell[21317, 910, 55, 1, 27, "Input"],
Cell[21375, 913, 42, 1, 27, "Input"],
Cell[21420, 916, 55, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[21512, 922, 33, 0, 30, "Subsection"],
Cell[21548, 924, 49, 1, 27, "Input"],
Cell[21600, 927, 45, 1, 27, "Input"],
Cell[21648, 930, 56, 1, 27, "Input"],
Cell[21707, 933, 45, 1, 27, "Input"],
Cell[21755, 936, 49, 1, 27, "Input"],
Cell[21807, 939, 45, 1, 27, "Input"],
Cell[21855, 942, 49, 1, 27, "Input"],
Cell[21907, 945, 45, 1, 27, "Input"],
Cell[21955, 948, 49, 1, 27, "Input"],
Cell[22007, 951, 45, 1, 27, "Input"],
Cell[22055, 954, 49, 1, 27, "Input"],
Cell[22107, 957, 45, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[22189, 963, 29, 0, 30, "Subsection"],
Cell[22221, 965, 45, 1, 27, "Input"],
Cell[22269, 968, 45, 1, 27, "Input"],
Cell[22317, 971, 45, 1, 27, "Input"],
Cell[22365, 974, 45, 1, 27, "Input"],
Cell[22413, 977, 45, 1, 27, "Input"],
Cell[22461, 980, 50, 1, 27, "Input"],
Cell[22514, 983, 45, 1, 27, "Input"],
Cell[22562, 986, 45, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[22644, 992, 27, 0, 30, "Subsection"],
Cell[22674, 994, 43, 1, 27, "Input"],
Cell[22720, 997, 43, 1, 27, "Input"],
Cell[22766, 1000, 43, 1, 27, "Input"],
Cell[22812, 1003, 43, 1, 27, "Input"],
Cell[22858, 1006, 43, 1, 27, "Input"],
Cell[22904, 1009, 43, 1, 27, "Input"],
Cell[22950, 1012, 50, 1, 27, "Input"],
Cell[23003, 1015, 43, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[23083, 1021, 27, 0, 30, "Subsection"],
Cell[23113, 1023, 43, 1, 27, "Input"],
Cell[23159, 1026, 47, 1, 27, "Input"],
Cell[23209, 1029, 43, 1, 27, "Input"],
Cell[23255, 1032, 47, 1, 27, "Input"],
Cell[23305, 1035, 43, 1, 27, "Input"],
Cell[23351, 1038, 45, 1, 27, "Input"],
Cell[23399, 1041, 43, 1, 27, "Input"],
Cell[23445, 1044, 45, 1, 27, "Input"],
Cell[23493, 1047, 43, 1, 27, "Input"],
Cell[23539, 1050, 47, 1, 27, "Input"],
Cell[23589, 1053, 43, 1, 27, "Input"],
Cell[23635, 1056, 45, 1, 27, "Input"],
Cell[23683, 1059, 50, 1, 27, "Input"],
Cell[23736, 1062, 45, 1, 27, "Input"],
Cell[23784, 1065, 43, 1, 27, "Input"],
Cell[23830, 1068, 47, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[23926, 1075, 56, 1, 35, "Subsubtitle"],
Cell[23985, 1078, 263, 8, 122, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[24297, 1092, 31, 0, 53, "Subtitle"],
Cell[24331, 1094, 68, 0, 32, "Text"],

Cell[CellGroupData[{
Cell[24424, 1098, 43, 1, 33, "Subsubtitle"],
Cell[24470, 1101, 47, 1, 27, "Input"],
Cell[24520, 1104, 59, 1, 27, "Input"],
Cell[24582, 1107, 58, 1, 27, "Input"],
Cell[24643, 1110, 63, 1, 27, "Input"],
Cell[24709, 1113, 62, 1, 27, "Input"],
Cell[24774, 1116, 57, 1, 27, "Input"],
Cell[24834, 1119, 155, 3, 43, "Input"],
Cell[24992, 1124, 55, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[25084, 1130, 42, 1, 35, "Subsubtitle"],
Cell[25129, 1133, 48, 1, 27, "Input"],
Cell[25180, 1136, 54, 1, 27, "Input"],
Cell[25237, 1139, 48, 1, 27, "Input"],
Cell[25288, 1142, 40, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[25365, 1148, 42, 1, 35, "Subsubtitle"],
Cell[25410, 1151, 48, 1, 27, "Input"],
Cell[25461, 1154, 48, 1, 27, "Input"],
Cell[25512, 1157, 48, 1, 27, "Input"],
Cell[25563, 1160, 48, 1, 27, "Input"],
Cell[25614, 1163, 40, 1, 27, "Input"],
Cell[25657, 1166, 48, 1, 27, "Input"],
Cell[25708, 1169, 48, 1, 27, "Input"],
Cell[25759, 1172, 48, 1, 27, "Input"],
Cell[25810, 1175, 40, 1, 27, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[25887, 1181, 42, 1, 35, "Subsubtitle"],
Cell[25932, 1184, 48, 1, 27, "Input"],
Cell[25983, 1187, 48, 1, 27, "Input"],
Cell[26034, 1190, 48, 1, 27, "Input"],
Cell[26085, 1193, 48, 1, 27, "Input"],
Cell[26136, 1196, 48, 1, 27, "Input"],
Cell[26187, 1199, 54, 1, 27, "Input"],
Cell[26244, 1202, 48, 1, 27, "Input"],
Cell[26295, 1205, 48, 1, 27, "Input"],
Cell[26346, 1208, 40, 1, 27, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[26435, 1215, 42, 0, 53, "Subtitle"],
Cell[26480, 1217, 130, 3, 32, "Text"],
Cell[26613, 1222, 379, 8, 122, "Text"],
Cell[26995, 1232, 385, 7, 68, "Text"],
Cell[27383, 1241, 149, 3, 50, "Text"],
Cell[27535, 1246, 562, 9, 104, "Text"],
Cell[28100, 1257, 293, 6, 68, "Text"],
Cell[28396, 1265, 62, 0, 32, "Text"],
Cell[28461, 1267, 92, 3, 32, "Text"],
Cell[28556, 1272, 110, 2, 27, "Input"],
Cell[28669, 1276, 166, 5, 32, "Text"],
Cell[28838, 1283, 64, 1, 27, "Input"],
Cell[28905, 1286, 59, 1, 27, "Input"],
Cell[28967, 1289, 121, 3, 32, "Text"],
Cell[29091, 1294, 40, 0, 32, "Text"],
Cell[29134, 1296, 51, 1, 27, "Input"],
Cell[29188, 1299, 61, 1, 27, "Input"],
Cell[29252, 1302, 69, 1, 27, "Input"],
Cell[29324, 1305, 59, 1, 27, "Input"],
Cell[29386, 1308, 58, 0, 32, "Text"],
Cell[29447, 1310, 94, 3, 32, "Text"],
Cell[29544, 1315, 137, 2, 27, "Input"],
Cell[29684, 1319, 93, 3, 32, "Text"],
Cell[29780, 1324, 44, 1, 27, "Input"],
Cell[29827, 1327, 103, 2, 27, "Input"],
Cell[29933, 1331, 106, 3, 32, "Text"],
Cell[30042, 1336, 39, 1, 27, "Input"],
Cell[30084, 1339, 45, 1, 27, "Input"],
Cell[30132, 1342, 45, 1, 27, "Input"],
Cell[30180, 1345, 91, 3, 32, "Text"],
Cell[30274, 1350, 64, 1, 27, "Input"],
Cell[30341, 1353, 215, 5, 50, "Text"],
Cell[30559, 1360, 64, 1, 27, "Input"],
Cell[30626, 1363, 89, 3, 32, "Text"],
Cell[30718, 1368, 105, 2, 27, "Input"],
Cell[30826, 1372, 128, 3, 32, "Text"],
Cell[30957, 1377, 65, 1, 27, "Input"],
Cell[31025, 1380, 22, 0, 32, "Text"],
Cell[31050, 1382, 107, 2, 27, "Input"],
Cell[31160, 1386, 95, 3, 32, "Text"],
Cell[31258, 1391, 170, 3, 43, "Input"],
Cell[31431, 1396, 75, 0, 32, "Text"],
Cell[31509, 1398, 43, 0, 32, "Text"],
Cell[31555, 1400, 45, 1, 27, "Input"],
Cell[31603, 1403, 38, 0, 32, "Text"],
Cell[31644, 1405, 50, 1, 27, "Input"],
Cell[31697, 1408, 35, 0, 32, "Text"],
Cell[31735, 1410, 43, 1, 27, "Input"],
Cell[31781, 1413, 88, 3, 32, "Text"],
Cell[31872, 1418, 46, 1, 27, "Input"],
Cell[31921, 1421, 33, 0, 32, "Text"],
Cell[31957, 1423, 41, 1, 27, "Input"],
Cell[32001, 1426, 53, 0, 32, "Text"],
Cell[32057, 1428, 48, 1, 27, "Input"],
Cell[32108, 1431, 32, 0, 32, "Text"],
Cell[32143, 1433, 40, 1, 27, "Input"],
Cell[32186, 1436, 34, 0, 32, "Text"],
Cell[32223, 1438, 42, 1, 27, "Input"],
Cell[32268, 1441, 34, 0, 32, "Text"],
Cell[32305, 1443, 42, 1, 27, "Input"],
Cell[32350, 1446, 94, 3, 32, "Text"],
Cell[32447, 1451, 45, 1, 27, "Input"],
Cell[32495, 1454, 59, 0, 32, "Text"],
Cell[32557, 1456, 51, 1, 27, "Input"],
Cell[32611, 1459, 32, 0, 32, "Text"],
Cell[32646, 1461, 40, 1, 27, "Input"],
Cell[32689, 1464, 42, 0, 32, "Text"],
Cell[32734, 1466, 43, 1, 27, "Input"],
Cell[32780, 1469, 53, 0, 32, "Text"],
Cell[32836, 1471, 46, 1, 27, "Input"],
Cell[32885, 1474, 44, 0, 32, "Text"],
Cell[32932, 1476, 46, 1, 27, "Input"],
Cell[32981, 1479, 58, 0, 32, "Text"],
Cell[33042, 1481, 59, 1, 27, "Input"],
Cell[33104, 1484, 32, 0, 32, "Text"],
Cell[33139, 1486, 40, 1, 27, "Input"],
Cell[33182, 1489, 35, 0, 32, "Text"],
Cell[33220, 1491, 47, 1, 27, "Input"],
Cell[33270, 1494, 37, 0, 32, "Text"],
Cell[33310, 1496, 66, 1, 27, "Input"],
Cell[33379, 1499, 35, 0, 32, "Text"],
Cell[33417, 1501, 43, 1, 27, "Input"],
Cell[33463, 1504, 45, 0, 32, "Text"],
Cell[33511, 1506, 206, 4, 50, "Text"],
Cell[33720, 1512, 43, 1, 27, "Input"],
Cell[33766, 1515, 55, 1, 27, "Input"],
Cell[33824, 1518, 43, 1, 27, "Input"],
Cell[33870, 1521, 126, 3, 32, "Text"],
Cell[33999, 1526, 47, 1, 27, "Input"],
Cell[34049, 1529, 50, 1, 27, "Input"],
Cell[34102, 1532, 53, 1, 27, "Input"],
Cell[34158, 1535, 148, 3, 32, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[34343, 1543, 35, 0, 53, "Subtitle"],
Cell[34381, 1545, 40, 0, 32, "Text"],
Cell[34424, 1547, 111, 3, 32, "Text"],
Cell[34538, 1552, 73, 0, 32, "Text"],
Cell[34614, 1554, 242, 5, 68, "Text"],
Cell[34859, 1561, 362, 8, 122, "Text"],
Cell[35224, 1571, 141, 4, 68, "Text"],
Cell[35368, 1577, 71, 4, 68, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[35476, 1586, 35, 0, 53, "Subtitle"],
Cell[35514, 1588, 41, 0, 32, "Text"],
Cell[35558, 1590, 177, 4, 50, "Text"],
Cell[35738, 1596, 89, 3, 32, "Text"],
Cell[35830, 1601, 66, 0, 32, "Text"],
Cell[35899, 1603, 363, 8, 122, "Text"],
Cell[36265, 1613, 334, 8, 86, "Text"],
Cell[36602, 1623, 114, 3, 32, "Text"],
Cell[36719, 1628, 135, 7, 122, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[36891, 1640, 36, 0, 53, "Subtitle"],
Cell[36930, 1642, 177, 4, 50, "Text"],
Cell[37110, 1648, 167, 4, 50, "Text"],
Cell[37280, 1654, 96, 3, 32, "Text"],
Cell[37379, 1659, 83, 4, 68, "Text"],
Cell[37465, 1665, 117, 4, 68, "Text"]
}, Closed]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

